<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fluorine&#39;s blog</title>
  
  <subtitle>努力又喜欢摆烂的菜鸡</subtitle>
  <link href="https://narafluorine.gothub.io/atom.xml" rel="self"/>
  
  <link href="https://narafluorine.gothub.io/"/>
  <updated>2024-06-29T17:09:28.967Z</updated>
  <id>https://narafluorine.gothub.io/</id>
  
  <author>
    <name>Fluorine Wengers</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客的测试以及更换工作</title>
    <link href="https://narafluorine.gothub.io/2024/06/30/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E5%B7%A5%E4%BD%9C/"/>
    <id>https://narafluorine.gothub.io/2024/06/30/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E5%B7%A5%E4%BD%9C/</id>
    <published>2024-06-29T17:06:04.000Z</published>
    <updated>2024-06-29T17:09:28.967Z</updated>
    
    <content type="html"><![CDATA[<p>首先是网页测试:</p><h1>这是一级标题</h1><h2 id="这是二级标题">这是二级标题</h2><h3 id="这是三级标题">这是三级标题</h3><h4 id="这是四级标题">这是四级标题</h4><h5 id="这是五级标题">这是五级标题</h5><h6 id="这是六级标题">这是六级标题</h6><p><strong>这是粗体</strong></p><p><em>这是斜体</em></p><p><s>这是删除</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114514</span></span><br></pre></td></tr></table></figure><blockquote><p>???</p><blockquote><p>???</p></blockquote></blockquote><table><thead><tr><th style="text-align:left">表格测试</th><th style="text-align:left">1</th><th style="text-align:left">2</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:left">4</td><td style="text-align:left">5</td></tr></tbody></table><p>无序列表</p><ul><li>114514</li><li>114514</li><li>114514</li></ul><p>有序列表</p><ol><li>114514</li><li>114514</li><li>114514</li></ol><p><a href="https://jlu.edu.cn">链接</a></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/b55lh2jd.png" alt="图炸了" title="流萤酱真可爱"></p><p>换行</p><hr><h1>最后笔者要做的更换</h1><p>洛谷的LaTeX编辑器和博客用的不太一样,需要对语法稍加改变.</p><ol><li>MarkDown的代码结束,从<code>`````</code>变成<code>```</code></li><li>LaTeX的换行从<code>\\</code>改成<code>\\\</code></li><li>LaTeX的粗体从<code>\bold</code>改成<code>\mathbf</code></li><li>LaTeX的无穷从<code>\infin</code>改成<code>\infty</code></li></ol><!--To Be Continued-->]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先是网页测试:&lt;/p&gt;
&lt;h1&gt;这是一级标题&lt;/h1&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;这是二级标题&lt;/h2&gt;
&lt;h3 id=&quot;这是三级标题&quot;&gt;这是三级标题&lt;/h3&gt;
&lt;h4 id=&quot;这是四级标题&quot;&gt;这是四级标题&lt;/h4&gt;
&lt;h5 id=&quot;这是五级标题&quot;&gt;这是五级标题&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面向对象程序设计A学习笔记</title>
    <link href="https://narafluorine.gothub.io/2024/06/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://narafluorine.gothub.io/2024/06/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-29T14:42:37.000Z</published>
    <updated>2024-06-29T15:21:40.466Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前面:OI打的好不等于这堂课不用认真学.OI是面向过程设计,搞出答案就完了,这个则是封装啊啥的一堆东西.OI确实可以让人灵活运用各种语法,但是这个$class$用法很多,都要认真看.</strong></p><p>程序=(算法+数据结构)s,使用对象框架组装程序.说白了就是,时代变了,有$MONEY$了,撑得起更大的程序了,不面向过程了,有对象了(雾)…</p><p>好像一个学期就只学了一个$class$的用法,有<strong>封装,继承,多态</strong>,这是三个基本特征.</p><p><strong>类与对象</strong>:类($class$)只是一个空的框架,对象是由类衍生出来的.它和结构体($struct$)的区别有以下三点:<br><strong>1.它有权限划分</strong>.这就是接下来会讲的$public,private,protected$.<br><strong>2.它有全局变量</strong>.就是那个$static$,虽然笔者不知道这玩意有啥用…反正$class$它就是有.<br><strong>3.它有合构析构函数</strong>,更方便用了.</p><p>$\bold{public,private,protected}$三种属性:$public$是所有人都能访问的,$private$和$protected$都是对象内部随便访问,对象外不可访问的,这俩的区别在继承(往下)那里会有介绍.默认啥也不写就是$private$,在碰到下一个标志前都是这个权限.</p><p>$\bold{static}$关键字:静态成员,静态函数.用法就是和$inline,register$一样,加在函数或者变量名前就好.$static$的作用是让函数或变量变成静态的,就是全局变量,想象一个学生对象,老师就是静态的,学生一届又一届,但是老师不变(排除特殊状况),老师就是静态的.老师根本不认识对象,只知道有多少个学生,学生去哪了被销毁了和老师没关系,大概这个意思.<strong>注意</strong>静态变量使用前记得先分配内存.举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">node</span>()&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">node</span>()&#123;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> node::cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">node a;</span><br><span class="line">a.<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那句$cnt$声明删了会出错,因为没分配内存.$static$修变量的作用主要有以下三点:<br><strong>1.</strong> 流动统计.实时统计当前开了多少个对象.<br><strong>2.</strong> 作为标记符,代表特定的事件是否发生,比如磁盘读写,同时只能有一个读写磁盘,就用标记表示.<br><strong>3.</strong> 链表头指针或尾指针.</p><p><strong>类名遮挡</strong>:就是名字重了咋办的意思.类名允许和变量名一致,每次需要使用变量时就直接用,用到同名类时就加$class\space name$即可.同理函数中的变量名可以与类中的变量名重,使用的时候加上$::$即可.</p><p><strong>合构函数,析构函数</strong>:类新建成员初始化会调用的函数,成员被delete时调用的函数.新建一个对象默认会分配一个合构函数和一个析构函数,但是他们什么也不做,通过自己写合适的函数实现合理的初始化.<br>格式:与类同名,没返回值(初始化要什么返回值),析构就加一个~即可.<br><strong>注意</strong>系统在编译阶段检查到你写了合构或者析构之后默认的啥也不做合构或者析构函数会消失,也就是说你要是想合构函数传参的话记得写默认的情况,省的运行出错.下面是一个简简单单的示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> val)&#123;</span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line">b=val;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> val,<span class="type">int</span> vval,<span class="type">int</span> vvval)&#123;</span><br><span class="line">a=val;</span><br><span class="line">b=vval;</span><br><span class="line">c=vvval;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">node</span>()&#123;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,cnt,a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> node::cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">node <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">node <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>::</strong> 类外可以写函数.方法对是类内声明,类外写$xx::xx(xx){xx}$函数即可写函数.类直接访问成员都是$::$,指针访问类成员用$-&gt;$,一个声明过的对象的直接调用就$.$就行了.</p><p><strong>默认值</strong>:函数在声明时候传参可以这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ko</span><span class="params">(<span class="type">int</span> val=<span class="number">10</span>,<span class="type">int</span> num=<span class="number">20</span>)</span></span>&#123;xx&#125;</span><br></pre></td></tr></table></figure><p>这样做的意思是,如果调用这个函数时缺少参数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koi=<span class="built_in">ko</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>然后第一个数就会被调用的传参顶掉,第二个参数由于少会使用20这个默认值.注意缺省参数只能在后面缺,前面(比方说下面这个就是错的)缺参数系统不给过:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koi=<span class="built_in">ko</span>(,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>类之间的关系</strong>:互不干涉内政.比如我需要一个学生类,学生里面套一个学生ID的类,此时声明一个学生会优先调用套娃里面的ID合构函数,然后再调用套娃外面的学生的构造函数,自动调用的,不用管.<br>但是这导致一个问题.我希望<strong>给ID传参</strong>该咋办呢?在学生的合构函数不能调用ID的合构函数,因为不能干涉内政,但是如果新建一个ID会直接在合构函数运行之后销毁掉(函数内部声明变量开的栈区空间),咋子办?</p><p>新语法来了,专门解决这个问题的(如果有好多个对象就逗号隔开,像下面一样).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> a=<span class="number">10</span>,<span class="type">int</span> b=<span class="number">10</span>):<span class="built_in">ID</span>(b),<span class="built_in">xx</span>(xx)&#123;xx&#125;</span><br></pre></td></tr></table></figure><p>这个冒号后面括号前面的就是对ID先进行初始化,然后再对主的学生对象进行合构的体现.如果不写冒号以及后面的合构函数,就会调用默认无参数的合构函数.</p><p><strong>新.天.地</strong>:这个冒号很灵性啊,就可以对常量数据成员和引用数据成员进行初始化.比方说下面一段代码就初始化了一个常量和一个引用成员.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val):<span class="built_in">op</span>(<span class="number">114514</span>),<span class="built_in">ip</span>(val)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> op;</span><br><span class="line"><span class="type">int</span> &amp;ip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="number">114</span>;</span><br><span class="line"><span class="function">ko <span class="title">aaa</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造对象的顺序</strong>:以下几点:<br><strong>1.</strong> 局部和静态对象按照声明顺序构造(函数中新建一个变量)<br><strong>2.</strong> 静态对象只被构造一次<br><strong>3.</strong> 全局对象都在$main$之前进行构造<br><strong>4.</strong> 全局对象构造时无特殊顺序<br><strong>5. 成员以其在类中的声明顺序构造</strong>:解释一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val):<span class="built_in">b</span>(val),<span class="built_in">a</span>(b+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ko <span class="title">a</span><span class="params">(<span class="number">114</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">858993459</span> <span class="number">114</span></span><br></pre></td></tr></table></figure><p>这份码因为最底下$ab$顺序导致调用合构函数时顺序变化,产生了野值.</p><p><strong>重载运算符</strong>:这里主要讲$++$和$–$的运算.你是否想过如何重载$a++$?这里就会有介绍.<br>首先,大家都知道的,<strong>内部类型不允许重载</strong>,比方说$int$.这个很好理解,这玩意要让你搞了$C++$会大乱的.<br>然后是操作数变不了,还有几个诸如$-&gt;$,$?:$,$::$,$.$,$@$(新运算符)不允许重载之类的规定.<br>如下就是一个简单的码,其中重载了自加:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val=<span class="number">10</span>,<span class="type">int</span> vval=<span class="number">10</span>):<span class="built_in">b</span>(val),<span class="built_in">a</span>(vval)&#123;&#125;</span><br><span class="line">~<span class="built_in">ko</span>()&#123;&#125;</span><br><span class="line">ko&amp; <span class="keyword">operator</span> ++()&#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">ko <span class="keyword">operator</span> ++(<span class="type">int</span>)&#123;</span><br><span class="line"><span class="function">ko <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ko <span class="title">a</span><span class="params">(<span class="number">4</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">(a++).<span class="built_in">prr</span>();</span><br><span class="line">(++a).<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是自加,$C++$约定区别在于一个$int$.</p><p>$\bold{new,delete}$:为什么我们需要它?<br>原因很简单,分配空间的时候,$new$会调用合构函数,而$delete$的时候又会调用析构函数.也就是说,不常用的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>其实是一个调用合构函数的过程.原来是这么回事.</p><p><strong>拷贝构造函数</strong>:为了防止乱用$=$导致权限分配或者数据分配混乱的问题,有了拷贝构造函数.一般传参传$&amp;$对象.<br><strong>注意</strong>:有的时候对象分配了资源(比如堆内存),拷贝直接复制地址是要出错的,所以自己写一个拷贝构造函数分配内存很有必要.</p><p><strong>无名对象</strong>:正如你所见,没名字的对象.这玩意有用,写作:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ko</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>用法有:<br><strong>1.</strong> 函数参数.假如函数传参要一个对象,就可以写一个无名对象顶上去.<br><strong>2.</strong> 初始化引用以及初始化对象定义.如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ko&amp; koi=<span class="built_in">ko</span>(<span class="number">10</span>);</span><br><span class="line">ko koip=<span class="built_in">ko</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>C++的试探</strong>:大家都知道,在$C++$中,$5/2$和$5.0/2$是两个完全不一样的东西.$C++$知道如何把整数转成$double$,也知道计算结果.但是对于我们写的类,$C++$的格式转换要靠我们实现.<br>如何实现呢?就靠我们写的合构函数.<br>如下是一段$C++$进行格式转换的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS<span class="comment">//这句话的意思是在VS上使用strcpy这种不安全的函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">const</span> <span class="type">char</span> arg[])&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(arr,arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ko</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> arr[<span class="number">30</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">koi</span><span class="params">(ko op)</span></span>&#123;</span><br><span class="line">op.<span class="built_in">prr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">koi</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到,传参传一段字符串,自动匹配了一个合构函数,然后调用了,进行后续的运算($const\space char[\space]$和$char[\space]$不一样的,不然匹配不上).<br>$C++$有几点要求:<br><strong>1.</strong> 只会尝试有一个参数的合构函数<br><strong>2.</strong> 当有二义性时立即放弃尝试(比如,学生老师用一个打印函数,名字又是都有的部分,$C++$发现可以是老师也可以是学生,立刻退出了).</p><p>$\bold{friend}$:友元(杰哥)函数.有的时候普通函数也需要访问对象的保护成员(聴話,讓我康康!),为了加快效率.比如矩阵和向量的乘法,乘法的函数不可能同时是两个函数的成员,所以就让它是个普通函数,通过友元的联系来实现乘法.举个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>;<span class="comment">//这行的作用是让下面的friend中的prr认识tsc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tsc</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a.num[i]+b.num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ko a;</span><br><span class="line">tsc b;</span><br><span class="line"><span class="built_in">prr</span>(a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元函数除了对于标记友元的可以看他的赤酱外,就是个普通函数.一个类的成员可以是另一个类的友元,使用$::$选中函数,一个类也可以是另一个类的友元,直接$friend\space class\space name$.友元的第二个作用:方便重载操作符的使用.</p><p><strong>继承</strong>:就是在原有的状态上加点东西,让他变成一个新的类.比如,研究生在大学生基础上加点自己的东西.语法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">yanjiusheng</span>:<span class="keyword">public</span> daxvesheng&#123;xx&#125;;</span><br></pre></td></tr></table></figure><p>继承有什么作用呢？<br><strong>1.</strong> 可以通过改一个小类来实现继承大类的修改,更方便维护.<br><strong>2.</strong> 继承可以让$C++$做隐式格式转换.比如函数要求传大学生的参,我传一个研究生的参,也是可以被接受的.如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>:<span class="keyword">public</span> ko&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tsc</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(ko a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a.num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ko a;</span><br><span class="line">tsc b;</span><br><span class="line"><span class="built_in">prr</span>(a);</span><br><span class="line"><span class="built_in">prr</span>(b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承方式</strong>:在这里,$protected$和$private$会进行区分.<br>一个类作为基类(大学生)时,其$public$和$protected$都可以随便被派生类(研究生)任意访问和调用,但是$private$真的就是谁也用不了,除非声明友类.<br>看例子,冒号后面的$public\space ko$这个权限分给的是类之后的东西.假如改成$private$或者$protected$,下面的$prr(b)$就会报错,理由是成员不可访问.(反正就记住$private$最神秘就对了,严严实实的)<br>注意到例子中的$ko$和$tsc$都有名字叫$num$的数组,为什么不冲突?其实只要访问$ko$中的$num$数组时加个$ko::$就没问题了.</p><p><strong>调整访问控制</strong>:就是改权限.冒号后面加的权限因为是取高的很容易啥也不给看,就需要改权限.如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>:<span class="keyword">public</span> ko&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> ko::num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就把$tsc$派生类的$ko$中的$num$调成了公有了.</p><p>继承和组合的关系:略,一堆废话.</p><p>多继承:加逗号隔开,加权限即可.但是这个时候注意变量名字加$::$区分是源自哪里的.</p><p><strong>虚拟继承</strong>:加$virtual$.虚拟继承的含义是,如果没有该类就新建一个,如果有了就不用动了,用建好的那一个.比如,$victim$和天选和$tsc$(再临)都是$\bold{Alan\space Becker}$画的,但是再临拥有前两者的一切战力,怎么表示?代码如下:</p><p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.sEdp7C8oeRzmx3cKBM0yxQAAAA?rs=1&amp;pid=ImgDetMain" alt="炸了"><br>再临</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">animation</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Running.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> atk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">victim</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> animation&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Revenge.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">the_chosen_one</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> animation&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dam</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Crushing.Damaging.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">the_second_coming</span>:<span class="keyword">public</span> victim,<span class="keyword">public</span> the_chosen_one&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AN</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Drawing.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">the_second_coming a;</span><br><span class="line">a.<span class="built_in">run</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样加$virtual$就会让再临只有一个$animation$了.</p><p><strong>注意</strong>:虚拟继承和虚拟函数是两个截然不同的概念.</p><p><strong>构造顺序</strong>:你学过成员里面套类,继承,虚拟,etc.<br>真的建一个类他们的顺序怎么办呢?为此规定:<br><strong>1.</strong> 虚拟先构造,顺序按照继承顺序<br><strong>2.</strong> 非虚拟的继承构造,按照继承顺序<br><strong>3.</strong> 成员对象<br><strong>4.</strong> 类自己的合构函数</p><p><strong>多态:若语言不支持多态,则不能被成为面向对象的语言.</strong></p><p>这里就会讲$virtual$的用法.比如,一个订单系统,分普通用户和$\bold{VIP}$用户,他们的买东西结算算法不太一样(打折),但是VIP除了打折好像也没啥不同了,我只想用一个函数实现计算,就需要用到虚函数.</p><p>$\bold{virtual}$:和$inline$一样,挂在函数的前面发挥作用.它的意思是迟后联编,说人话就是会覆盖,后面的同名函数会覆盖前面的函数,所以后面的函数加不加$virtual$其实没区别,只要前面加了就行了.比个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">user</span>(<span class="type">int</span> val=<span class="number">998</span>)&#123;</span><br><span class="line">buy=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> buy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> buy;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>:<span class="keyword">public</span> user&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VIP</span>(<span class="type">int</span> val=<span class="number">998</span>):<span class="built_in">user</span>(val)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> buy/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">VIP <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a.<span class="built_in">calc</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个简单的VIP用户打折的程序,重写了$calc$让不同用户计算方式不同.</p><p><strong>失败的迟后联编</strong>:计算函数传参不同,返回值不同,etc所有不能被看成相同函数的情况.</p><p><strong>可返回不同类</strong>:B继承A的,函数有两个,一个返回值是A,一个返回B,这个时候就可以用$virtual$进行联编.</p><p><strong>虚函数的限制</strong>:众所周知,$C++$追求快.所以只会选择个别的函数整成虚函数,那么限制就来了:内联不可以,只有类的成员函数才可以,合构析构不可以,静态不可以.</p><p><strong>类的冗余</strong>:害,其实就是自己关系没导清,多整了几个变量…解决办法就是多开几个类包含以下就没事了…</p><p><strong>抽象类与纯虚函数</strong>:只要有至少一个纯虚函数,这个类就是抽象类.纯虚函数就是函数声明时后面加=0,前面加$virtual$.比如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">ko</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>首先注意,纯虚函数不可以实例化.也就是说括号后面大括号不能有.抽象类不可以实例对象,所以抽象类就是用来继承的,继承的子类重写那个纯虚函数,就完了,子类可以对象化.所以抽象类又被称作接口.</p><p><strong>为什么要抽象类</strong>?方便指针的使用.先前提到了,继承的情况下,派生类的指针完全可以当成母类的指针去用,因为成员是一样的.这里就是可以用抽象类指针传参,然后调用直接放上派生类的指针,$C++$会自己匹配的.</p><hr><h3 id="笔者最后追加的东西：分文件编写">笔者最后追加的东西：分文件编写</h3><p>太重要了,做课设几千行代码不分文件很难维护的(虽然笔者就是这样硬写的…QwQ),而且今天才发的通知要求作业分文件编写…啊总之我就是加了这么个东西,以飨($\bold{xi\check{a}ng}$)读者(老套话了).</p><p>那啥,现在你要写一个$Visual Studio$程序.人有五名,主文件有三个.</p><p>首先,要写好一个头文件.头文件一般是$.h$的格式.新建一个空项目,添加一个空项.</p><p>头文件的<strong>基本结构</strong>:会有详细注释的,放心看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:function.h</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">//这句话的意思是防止头文件重复包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS<span class="comment">//安全问题,后面会讲到</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span><span class="comment">//在这里包含所有头文件名</span></span></span><br><span class="line"><span class="comment">//#include&lt;xxx&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FUNCTION_H<span class="comment">//如果没有定义这个,那就执行以下句子,还是防止头文件多次包含的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNCTION_H<span class="comment">//定义这个,其实名字随便起的,一般大家都这么写</span></span></span><br><span class="line"><span class="comment">//头文件开始写了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> n;<span class="comment">//在function.cpp中定义的变量这里写成这个</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(<span class="type">int</span> num)</span></span>;<span class="comment">//在function.cpp中声明的函数这里写成这个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//头文件写完了结束了</span></span></span><br></pre></td></tr></table></figure><p>头文件对应的实现文件的<strong>基本结构</strong>(头文件就是画大饼的):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:function.cpp</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">//头文件只声明,没大括号,这里实现头文件的大饼</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主文件的<strong>基本结构</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:main.cpp</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span><span class="comment">//为什么不用尖角括号后面会讲</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="number">114</span>;</span><br><span class="line"><span class="built_in">prr</span>(<span class="number">250</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好,这就完了.每个模块负责不同的函数,可以把大工程划分为一个一个小零件,一部分出错不需要整体重新编译.</p><p>有个部分忘写了，是$class$的用法,记住一个事情,$class$的声明都在头文件里面,然后函数就是正常的画大饼就好,但是对应的$cpp$要写成展开的,同时注意标清哪个$class$,比如下面的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//poly.h节选</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">poly</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">a</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//poly.cpp节选</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly::a</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//展开写函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对于重载运算符实例化可以写在外面,但是记得两点不同,一是操作数记得整俩,二是记得声明友元,否则看不了内存(这是全局重载和成员重载的区别).</p><p><strong>问题解答</strong>:<br><strong>1.</strong> 安全问题:$VS$是不赞成你使用$scanf$和$printf$的,因为他们不安全.为什么不安全笔者不知道,反正$VS$不赞成你用,想用可以选择更安全的$scanf_s$,或者像笔者那样加上这句话就可以无视警告接着用.<br><strong>2.</strong> 关于$include$后面的&lt;&gt;“”:尖角和引号的差异在于优先搜索哪里.正常的使用尖角的情况是大家使用库文件的时候,就是那些众所周知的头文件,如$stdio.h$或者$algorithm$,系统看到尖角会优先搜索库文件.然后引号的意思是系统优先搜索该$.cpp$对应的文件夹找这个头文件,一般自己写头文件的会用引号包起来,当然你用引号包库文件也不会有错,使用引号包住功能实现良好的$.cpp$文件也能运行的.<br><strong>3.</strong> $VS$:$Microsoft\space Visual\space Studio$,简称$VS$,是一个编辑器.一般写大型项目会用到这个东西 <s>,比如我们组四千五百行的课设</s>.为什么要用$VS$而不是$Dev$,因为功能全.但是由于安全啊(上文)或者不让用$__int128$呀,编译慢啊(初次启动编译三十秒,后面一两秒出来)之类的,笔者自己学习算法还是喜欢用$Dev$.</p><p>好$\bold{tm}$长啊,我半个学期这是差了多少节课啊QwQ…</p><p>但是最起码我把几百页的书用一篇文章就讲完了,这是十分好学,一看就懂的.</p><p><strong>UPD20240609:</strong></p><h1>做题总结</h1><p>众所周知,学的和考试考的往往是两个东西.Flu收获不小(套话).</p><p><strong>C++内存分配</strong>:<a href="https://blog.csdn.net/weixin_48896613/article/details/127371045">算了,懒得写了,看这个吧</a></p><h1>面向对象Cache</h1><p>这里放一些做题碰到的一些问题,随着考试结束,这篇帖子也会结束.</p><p>C++多文件的好处不是能同时编译生成多个可执行文件.</p><p>执行a.f(100)成功时,f可能的参数表不可以是f(int&amp;),但是可以是f(const int&amp;)</p><p>protected方式下,派生类对象的指针不可以转换成基类指针.</p><p><strong>静态成员的初始化</strong>:</p><p>一个类不能实例化对象有哪几种情况:1抽象类2构造函数是私有的</p><p>静态成员函数没有this指针(所以不可以加virtual,const).</p><p>this指针是一个指针常量.(<code>const A*</code>)指向<strong>类对象</strong> 而不是<strong>类类型</strong>,小心,看清楚了</p><p><strong>友元</strong>:C++友元不具有传递性</p><p>某些运算符重载只能在类内实现:<code>= () [] -&gt;</code></p><p>const的作用:先向左匹配,左边没有东西才会向右匹配,如:<code>int* const p</code>表示一个常指针,而<code>const int* p</code>和<code>int const* p</code>表示都是一个指向常量的指针.</p><p>构造函数要么都有缺省值,要么都没有缺省值. 对</p><p><strong>内联函数</strong>:运行时插到每一个调用函数的地方.</p><p>抽象类通常也需要构造函数.</p><p><strong>常成员函数</strong>:可以被非常成员调用.</p><p><strong>常量对象</strong>:只可以调用类的常成员函数和静态成员函数,不可以调用非常成员函数.</p><p>不允许创建指向自身类型的常量指针和引用.(套娃的官方说法)</p><p>构造函数重载错误:<code>A();A(int=0,int=0);</code></p><p>耦合度:继承的耦合度高于组合,实战中应尽量选择组合而不是继承(也就是耦合度尽量低).</p><p>通过声明私有禁止乱拷贝,拷贝构造函数.</p><p><strong>虚表和虚指针</strong>:虚指针每个对象都有一个,但是虚表是每个类只有一个的东西(也可以有虚表组).</p><p><strong>虚基类</strong>:C++由于支持多重继承可能导致名字冲突,所以提供了这个.虚拟继承的基类就叫虚基类.</p><p><strong>虚函数访问</strong>:非虚非静可以访问虚函数.</p><p>接口:C++支持接口.</p><p>B b和B* pB两种格式作为类A的数据成员的区别:Bb是一般不需要拷贝构造函数的,而pB通常需要拷贝构造函数.pB的时候B可以是抽象类而Bb不可以是抽象类.</p><p><strong>关联,聚集关系</strong>:关联分为单向关联和双向关联,双向关联是A中有B,B中有A的这么一个关系,聚集可以理解为组合,代码上没有差异.</p><p><strong>封装</strong>:可以定义私有成员和保护成员.</p><p><strong>多态</strong>:面向对象语言中,接口的多种不同实现方式即为多态.多态性允许父对象被设置为和子对象相等的技术,赋值以后父对象可以根据当前赋值给子对象的特性以不同方式运作,允许子类将类型指针赋值给父类型指针.多态性在C++和Object Pascal中都是用虚函数实现的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a *ppp=<span class="keyword">new</span> c;</span><br><span class="line">ppp-&gt;<span class="built_in">fuck</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的真谛:声明一个大的,然后因为大的覆写抽象类了,</p><p>类中没虚函数就没虚表了吗?nonono,如果他的基类有,他还是会有虚表的.</p><p>private和protected的区别:继承后子类可见不可见的问题.</p><p>catch支持多态地捕获派生异常.异常可以本层处理也可以部分处理后向上层抛出.(类型不需要严格相同)异常可以在外层函数中捕获,也可以在当前函数中捕获.举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="built_in">f</span>();&#125;<span class="built_in">catch</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果f中没有try catch,f可以被catch捕获.</p><p>父子同名函数:1都不是虚函数2父不是虚函数子类是虚函数3都是虚函数</p><p><strong>函数占位参数</strong>:和默认值相反,占位参数只要出现必须填满.而且,正如其名,他只有类型没有名字,而且必须对应上,比个例子:<code>f(int,int k,int i=0)</code>这里的没名字int就叫占位参数,他只要出现就必须被填上,否则函数会匹配失败.这种占位的也可以有参数,比方说<code>int=0</code>之类的</p><p>内存:构造时new了好多内存是不算在类大小里面的.</p><p>成员函数:A以下情况不可以调用B:1A是静态函数B不是2A是常成员函数B不是</p><p><strong>函数重载</strong>:体会一下,必须<strong>完全一样</strong> 才能触发重载.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>)</span></span>;和<span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span>和<span class="type">int</span> <span class="title">f</span><span class="params">()</span><span class="type">const</span></span></span><br></pre></td></tr></table></figure><p>不会构成二义性,会构成重载.判断依据:参数个数,参数类型,参数顺序,函数是否为const.</p><p><strong>基类的成员函数可以和派生类重名,但是数据成员不可以重名</strong></p><p>抽象类的基类也是抽象类.</p><p>如何避免A外再派生其他类:同时满足:A的构造函数正常public写,然后A的析构函数设置成私有而且不进行实现(或者设置成纯虚函数)可以防止其他类从A派生.</p><p><strong>初始化列表</strong>:其实就是那个:a(),b(){}这个部分.有四种情况:1常量2引用3基类缺少无参数构造函数4类套类需要传参的情况.5其他需要在类初始化之前就需要初始化的情况.</p><p>前加加:<code>A&amp; operator ++()&#123;&#125;</code>后加加<code>A&amp; operator ++(int)&#123;&#125;</code>区别在于一个int.<br>顺带提一嘴,所有的operator返回值参考:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="type">int</span> dat;</span><br><span class="line">a <span class="keyword">operator</span> +(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> -(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> *(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> /(a&amp; io);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> =(a&amp; io);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> ++()&#123;</span><br><span class="line">dat++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">a&amp; <span class="keyword">operator</span> ++(<span class="type">int</span>)&#123;<span class="comment">//注意运算顺序</span></span><br><span class="line"><span class="function">a <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">++(*<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">a&amp; <span class="keyword">operator</span> --();</span><br><span class="line">a&amp; <span class="keyword">operator</span> --(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> +=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> -=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> *=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> /=(a&amp; io);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(a&amp; io);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> !=(a&amp; io);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原因:赋值运算的结果是左值,应当按引用返回.</p><p><strong>常见错误</strong>:</p><p>double转float是不安全的.</p><p>析构函数有参数</p><p>类A开头默认私有的</p><p>乱加const的</p><p>继承未完全覆盖虚函数的(不能实例化)</p><p>继承调用私有参数的(权限问题)</p><p>不写<code>using namespace std;</code>然后用标准库的</p><p>少隐式格式转换的</p><p>少构造函数的</p><h3 id="大题">大题</h3><p>看到一个写法是:<code>std::vector&lt;std::string&gt; f()&#123;return &#123;&quot;message1&quot;,&quot;message2&quot;&#125;;&#125;</code>维克托好像可以用大括号构造的.</p><h3 id="关键字">关键字</h3><p>overide:覆写虚函数时加上的,比个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;<span class="comment">//这三份代码实际跑起来没有差异,所以知道override是什么就行了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">&#125;;</span><br><span class="line">b aa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">aa.<span class="built_in">fuck</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加强代码规范的,不写也罢.(为了拿更多分,请你写上)</p><p>namespace:名字空间.有的时候有好多函数都叫一个名字,就需要名字空间来进行区分.名字空间不应当被放在头文件里面.名字空间也可以嵌套.</p><p><code>dynamic_cast&lt;&gt;()</code>:类型的向上转换.比如父类派生好多子类,子类转父类是安全的,但是dynamic_cast&lt;儿子&gt;(父类变量)则是转换成儿子的.众所周知每个爹都不想当儿子,于是这种转换需要代价.</p><p>explicit:构造函数加一个这个可以禁止隐式格式转换.</p><h2 id="完结">完结</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前面:OI打的好不等于这堂课不用认真学.OI是面向过程设计,搞出答案就完了,这个则是封装啊啥的一堆东西.OI确实可以让人灵活运用各种语法,但是这个$class$用法很多,都要认真看.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序=(算法+数据结构)s,使用对象框</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大学物理B学习笔记</title>
    <link href="https://narafluorine.gothub.io/2024/06/08/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://narafluorine.gothub.io/2024/06/08/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-08T05:05:03.000Z</published>
    <updated>2024-06-29T17:56:47.678Z</updated>
    
    <content type="html"><![CDATA[<p>RT,这是大物的笔记.(草,劳改课还有一篇三千字的论文等着我…)</p><p>听说大物就是高中物理加点微积分的东西,我怎么这么不信啊…</p><p>考试范围是2-8章,别问为什么缺东西.</p><h1 id="第2章-机械振动"><a href="#第2章-机械振动" class="headerlink" title="第2章 机械振动"></a>第2章 机械振动</h1><h2 id="2-1-简谐振动"><a href="#2-1-简谐振动" class="headerlink" title="2.1 简谐振动"></a>2.1 简谐振动</h2><p>胡克定律</p><script type="math/tex; mode=display">F=-kx</script><p>设物体质量为m,牛二得</p><script type="math/tex; mode=display">F=ma=m\frac{\mathrm d^2x}{\mathrm dt^2}</script><p>将上二式合并改写得</p><script type="math/tex; mode=display">\frac{\mathrm d^2x}{\mathrm dt^2}=-\frac kmx=-\omega^2x</script><p>式子的解是</p><script type="math/tex; mode=display">x=A\cos(\omega t+\varphi)</script><p>其中A和varphi都是积分常数.<br>式中</p><script type="math/tex; mode=display">\omega^2=\frac km</script><p>$\omega$是一个系统自身性质决定的常量.拓展:任意满足下式的都可以被称为简谐运动(式子的意思是加速度与位移均匀变化)</p><script type="math/tex; mode=display">\frac{\mathrm d^2y}{\mathrm dt^2}=-\omega^2y</script><p>任意时刻的速度和加速度,自己求导算.下面摆以下式子,别记,看看咋写的.</p><script type="math/tex; mode=display">\begin{aligned}\upsilon&=\frac{\mathrm dx}{\mathrm dt}=-\omega A\sin(\omega t+\varphi)\\\ a&=\frac{\mathrm d\upsilon}{\mathrm dt}=-\omega^2A\cos(\omega t+\varphi)\end{aligned}</script><p><strong>振幅</strong>:A.</p><p><strong>周期</strong>:T,单位s.(其中mk都是振子的自身物理属性,可见这些都是固有的)</p><script type="math/tex; mode=display">T=\frac{2\pi}\omega=2\pi\sqrt{\frac mk}</script><p><strong>振动频率</strong>:$\nu$,单位Hz.</p><script type="math/tex; mode=display">\nu=\frac\omega{2\pi}=\frac 1T=\frac1{2\pi}\sqrt\frac km</script><p><strong>圆频率</strong>:$2\pi$秒内震动次数,单位$\mathrm{rad\cdot s}^{-1}$.</p><script type="math/tex; mode=display">\omega=2\pi\nu</script><p><strong>相位</strong>:$(\omega t+\varphi)$,又叫位相,又叫相.<br><strong>初相</strong>:$\varphi$.</p><p>求解初相啥的自己算吧…以后部分公式点到为止,不写长啥样,让你知道哦有这么个事就行,1记不住2能推导,写他干嘛?</p><p><strong>相位差</strong>:</p><script type="math/tex; mode=display">\Delta\varphi=(\omega_2t+\varphi_2)-(\omega_1t+\varphi_1)</script><p>同频率简谐相位差公式略.<br>如果$\Delta\varphi=2k\pi$叫做同相<br>$\Delta\varphi=\pi+2k\pi$叫做反相.负的叫落后,正的叫领先,范围在$[-\pi,\pi]$.</p><p><strong>简谐运动能量</strong>:就是$E=\frac12kA^2$,平衡点在$\pm\frac{\sqrt2}2A$处,自己证.<br><strong>旋转矢量法</strong>:有一个点围着x逆时针转,投影点就是x,初始时和x轴夹角是$(\omega t+\varphi)$.</p><h3 id="简谐振动的合成"><a href="#简谐振动的合成" class="headerlink" title="简谐振动的合成"></a>简谐振动的合成</h3><h4 id="同方向同频"><a href="#同方向同频" class="headerlink" title="同方向同频"></a>同方向同频</h4><p>合振幅</p><script type="math/tex; mode=display">A=\sqrt{A_1^2+A_2^2+2A_1A_2\cos(\varphi_2-\varphi_1)}</script><p>初相满足</p><script type="math/tex; mode=display">\tan\varphi=\frac{A_1\sin\varphi_1+A_2\sin\varphi_2}{A_1\cos\varphi_1+A_2\cos\varphi_2}</script><p>$\varphi$角的象限可以通过振动的矢量图直接判定.</p><p><strong>同方向频率相近简谐振动合成</strong>:略,很复杂不让你算.<br><strong>2.3*振动的分解和频谱分析</strong><br><strong>2.4*阻尼振动 受迫振动 共振</strong><br>这俩都加星号,考试不考,不写.</p><h1 id="第3章-机械波"><a href="#第3章-机械波" class="headerlink" title="第3章 机械波"></a>第3章 机械波</h1><p>机械波产生条件:<strong>波源和弹性介质</strong>.</p><p>声音是纵波,光是横波.</p><p><strong>波线,波面</strong>:表示波的传递方向,任意时刻振动相位相同的成为波面(波阵面,同相面),最前面的波面叫 <strong>波前</strong>.波线与波面垂直.球面波,正如字面意思.</p><p><strong>波长,周期,频率</strong>:$\lambda$,完整波的长度$T,\nu$.<br><strong>波速</strong>:用$u$表示.公式:</p><script type="math/tex; mode=display">\lambda=uT</script><script type="math/tex; mode=display">u=\lambda T=\nu\lambda</script><p><strong>波函数</strong>:以下公式表示:</p><script type="math/tex; mode=display">y_0(t)=A\cos(\omega t+\varphi)</script><p>时间落后:</p><script type="math/tex; mode=display">y=A\cos\Big[\omega\Big(t-\frac xu\Big)+\varphi\Big]</script><p><strong>波形方程</strong>:波在某点形成的曲线.</p><p><strong>波形向前推移</strong>:经过dt时间,出现在x+dx处,公式为</p><script type="math/tex; mode=display">A\cos[\omega(t-\frac xu)+\varphi]=A\cos[\omega(t+\Delta t-\frac{x+\Delta x}u)+\varphi]</script><p><strong>行波</strong>:向前推移,走的波叫行波.</p><h3 id="波动方程"><a href="#波动方程" class="headerlink" title="波动方程"></a>波动方程</h3><p>好神秘的样子,升一手三级标题.<br>无吸收的各向同性的三维空间的一切传播的波动过程均满足下式:</p><script type="math/tex; mode=display">\frac{\partial^2\psi}{\partial x^2}+\frac{\partial^2\psi}{\partial y^2}+\frac{\partial^2\psi}{\partial z^2}=\frac 1{u^2}\frac{\partial^2\psi}{\partial t^2}</script><p>其中的$\psi$可以代表任何物理量.波函数啊啥的.</p><h3 id="波的能量-能流密度"><a href="#波的能量-能流密度" class="headerlink" title="波的能量 能流密度"></a>波的能量 能流密度</h3><p><strong>能量密度</strong>:介质单位体积内的波动能量.</p><script type="math/tex; mode=display">w=\frac{\mathrm dE}{\mathrm dV}=\rho A^2\omega^2\sin^2\omega(t-\frac xu)</script><p>这个是随时间变化的,平均能量密度是</p><script type="math/tex; mode=display">\overline w=\frac 1T\int_0^T\rho A^2\omega^2\sin^2\omega(t-\frac xu)\mathrm dt=\frac 12\rho A^2\omega^2</script><p><strong>能流</strong>:单位时间内,通过介质某面积的能量.</p><script type="math/tex; mode=display">P=\frac{\mathrm dE}{\mathrm dt}=wuS=\rho A^2\omega^2uS\sin^2\omega(t-\frac xu)</script><p><strong>平均能流</strong>:</p><script type="math/tex; mode=display">\overline P=\overline wus=\frac 12\rho A^2\omega^2uS</script><p><strong>能流密度</strong>:单位时间内垂直于波线的单位面积平均能量.(也叫波强,单位$\mathrm{W\cdot m^{-2}}$)</p><script type="math/tex; mode=display">I=\frac{\overline P}S=\frac 12\rho A^2\omega^2u=\overline wu</script><p>矢量式:</p><script type="math/tex; mode=display">\overrightarrow I=\overline w\cdot\overrightarrow u=\frac 12\rho A^2\omega^2\overrightarrow u</script><p><strong>声波</strong>:20-20000Hz.声波的强度叫声强,声强级是比较声波强度的概念.单位B(贝尔),实际一般使用分贝(dB),$1B=10dB$.<br>以$10^{-12}\mathrm{W\cdot m^{-2}}$为基准声强.($I_0$)</p><script type="math/tex; mode=display">L=\lg\frac I{I_0}(\mathrm B)=10\lg\frac I{I_0}(\mathrm{dB})</script><p><strong>波的衍射反射折射叠加,惠更斯原理</strong>:略(乐)</p><h3 id="波的干涉"><a href="#波的干涉" class="headerlink" title="波的干涉"></a>波的干涉</h3><p>两个波方程在P点的干涉,合起来是</p><script type="math/tex; mode=display">A=\sqrt{A_1^2+A_2^2+2A_1A_2\cos\Delta\varphi}</script><p>其中</p><script type="math/tex; mode=display">\Delta\varphi=\varphi_1-\varphi_2-\frac{2\pi}\lambda(r_2-r_1)</script><p>式子可以理解为波函数先在P点的波形方程,然后两个波形方程叠加(回归上一章了)<br>初相$\varphi$满足</p><script type="math/tex; mode=display">\tan\varphi=\frac{A_1\sin(\varphi_1-\frac{2\pi r_1}\lambda)+A_2\sin(\varphi_2-\frac{2\pi r_2}\lambda)}{A_1\cos(\varphi_1-\frac{2\pi r_1}\lambda)+A_2\cos(\varphi_2-\frac{2\pi r_2}\lambda)}</script><p>然后还是那句老话:2k pi振动加强,pi+2k pi振动减弱.<br>实际条件中两个相干波源可能是同一个震源驱动的,初相相同,干涉极值可以用波程差表示.</p><script type="math/tex; mode=display">\delta=r_2-r_1=k\lambda\\\ \delta=r_2-r_1=(2k+1)\frac\lambda2</script><p>干涉加强和干涉减弱的式子.整数波长加强,半数波长减弱.</p><h3 id="驻波"><a href="#驻波" class="headerlink" title="驻波"></a>驻波</h3><p>干涉的一种特殊情况,合成的波并不向前传递,表现为某些点就是一直不动,然后这些点把绳子分开,像跳绳一样.</p><p><strong>波节</strong>:振动不动的点.<br><strong>波腹</strong>:有些点的振幅始终最大.</p><p>设两个波的初相都是0,波动方程为</p><script type="math/tex; mode=display">y=A\cos2\pi(\frac tT-\frac x\lambda)</script><p>叠加一下,用个和差化积,得到</p><script type="math/tex; mode=display">y=2A\cos2\pi\frac x\lambda\cos\frac{2\pi}Tt</script><p>所以波节满足振动位移是0,带入解出</p><script type="math/tex; mode=display">x=\pm(2k+1)\frac\lambda4</script><p>同理波腹也能这么求出来:</p><script type="math/tex; mode=display">x=\pm k\frac\lambda2</script><p>他俩之间有半个波长距离.</p><h3 id="半波损失"><a href="#半波损失" class="headerlink" title="半波损失"></a>半波损失</h3><p>一般情况下,半波损失和波的种类,两种介质的性质和入射角大小都有关.但是波垂直入射时,半波损失由介质密度和波速乘积$\rho v$决定.这个数大的叫波密介质,这个小的叫波疏介质,波疏到波密有半波损失,反之没有,界面是驻波波腹.</p><h4 id="弦上驻波"><a href="#弦上驻波" class="headerlink" title="弦上驻波"></a>弦上驻波</h4><p>由于两固定端必为波节,所以弦长是半波长的整数倍,有</p><script type="math/tex; mode=display">L=n\frac\lambda2</script><p>所以频率能求出来是</p><script type="math/tex; mode=display">\nu_n=n\frac u{2L}</script><p>所以满足条件才能形成驻波,分别是基频,一次谐频,二次谐频,三次谐频…(取决于n的取值)</p><h3 id="多普勒效应"><a href="#多普勒效应" class="headerlink" title="多普勒效应"></a>多普勒效应</h3><p>其实就是速度变成$u+u_B$,别的都一样,换个参考系就完事了.</p><h1 id="第4章-静电场"><a href="#第4章-静电场" class="headerlink" title="第4章 静电场"></a>第4章 静电场</h1><p>基本电荷量(油滴实验测的):</p><script type="math/tex; mode=display">e=1.602176462\times10^{-19}\mathrm C</script><p>库仑力:</p><script type="math/tex; mode=display">\overrightarrow F=k\frac{q_1q_2}{r^2}\overrightarrow e_r</script><p>其中r是矢量$\overrightarrow r$的大小,$\overrightarrow e$是方向矢量,k是一个常数,大小为</p><script type="math/tex; mode=display">k=8.9880\times10^9\mathrm{N\cdot m^2\cdot C^{-2}}\approx9\times10^9\mathrm{N\cdot m^2\cdot C^{-2}}</script><p>为了简化公式,我们定义一个真空介电常量,或真空电容率即</p><script type="math/tex; mode=display">\varepsilon_0=\frac1{4\pi k}=8.85\times10^{-12}\mathrm{C^2\cdot N^{-1}\cdot m^{-2}}</script><p>(所以有下式,为了和高中转换思路):</p><script type="math/tex; mode=display">k=4\pi\varepsilon_0</script><p>公式改写为</p><script type="math/tex; mode=display">\overrightarrow F=\frac{q_1q_2}{4\pi\varepsilon_0r^2}\overrightarrow e_r</script><p><strong>电场强度</strong>:</p><script type="math/tex; mode=display">\overrightarrow E=\frac{\overrightarrow F}{q_0}</script><p>好几个电场那就矢量叠加,公式略.<br><strong>受力</strong>:</p><script type="math/tex; mode=display">\overrightarrow F=q_0\overrightarrow E</script><p><strong>点电荷场强</strong>:</p><script type="math/tex; mode=display">\overrightarrow E=\frac q{4\pi\varepsilon_0r^2}\overrightarrow e_r</script><p>(r的方向是产生电场的电荷直接指向试验电荷)<br>好几个点电荷:直接矢量相加.<br><strong>连续带电体的场强</strong>:(划分为好多个点电荷元$\mathrm dq$求电场元$\mathrm dE$)矢量积分</p><script type="math/tex; mode=display">\overrightarrow E=\int\mathrm d\overrightarrow E=\frac 1{4\pi\varepsilon_0}\int\frac{\mathrm dq}{r^2}\overrightarrow e_r</script><p>可以分解为</p><script type="math/tex; mode=display">E_x=\int\mathrm dE_x,E_y=\int\mathrm dE_y,E_z=\int\mathrm dE_z\\\ E=\sqrt{E_x^2+E_y^2+E_z^2}</script><p><strong>电偶极子</strong>:相隔较近的两个等量异号的点电荷.<br><strong>电偶极矩</strong>:大小是单个极子的电量乘距离,方向负到正.即</p><script type="math/tex; mode=display">\overrightarrow p=q\overrightarrow l</script><h3 id="静电场中的电介质-电位移矢量"><a href="#静电场中的电介质-电位移矢量" class="headerlink" title="静电场中的电介质 电位移矢量"></a>静电场中的电介质 电位移矢量</h3><p>就是说,分子受电场作用自己也会一字排开,然后产生一个极化电荷的电场,然后抵消原来的电场.公式</p><script type="math/tex; mode=display">\overrightarrow E=\frac{\overrightarrow E_0}{\varepsilon_r}</script><p>式中$\varepsilon_r$叫相对介电常数(没错,就是高中电容那里的东西),$\overrightarrow E_0$是原来的电场.真空的介电常数为1,空气近似1.<br>假如电场太过强力,会把分子拆开变成自由电荷(击穿),临界电场强度叫 <strong>介电强度</strong>.<br><strong>电介质的介电常数</strong>:</p><script type="math/tex; mode=display">\varepsilon=\varepsilon_0\varepsilon_r</script><p>这个$\varepsilon$的作用是替换之前的$\varepsilon_0$,代表某介质中的 <strong>介电常数</strong> 使用,别的不变.</p><p><strong>电极化强度</strong>:电介质单位体积内电偶极矩的矢量和.</p><script type="math/tex; mode=display">\overrightarrow P=\frac{\sum\overrightarrow p_{分子}}{\Delta V}</script><p>反映了介质内电极化的强弱和方向.<br>极化电荷与电极化强度之间的关系:设两平面的自由电荷面密度是$\sigma$和$-\sigma$,有</p><script type="math/tex; mode=display">\sigma'=\frac{\varepsilon_r-1}{\varepsilon_r}\sigma</script><p>表示自由电荷密度$(\sigma)$和极化电荷密度$(\sigma’)$的关系.<br>利用$q=\sigma S$带入得</p><script type="math/tex; mode=display">\overrightarrow P=\frac{\varepsilon_r-1}{\varepsilon_r}\sigma=\varepsilon_0(\varepsilon_r-1)E=\overrightarrow P=\varepsilon_0\chi_e\overrightarrow E</script><p>(定义$\chi_e=\varepsilon_r-1$表示电极化率).理论上是个常数,但是实际上极化介质需要时间,高频电场会让介电常数与外加电场频率有关.</p><p><strong>电位移矢量</strong>:定义如下</p><script type="math/tex; mode=display">\overrightarrow D=\varepsilon_0\overrightarrow E+\overrightarrow P</script><p>单位$\mathrm{C\cdot m^{-2}}$.<br>平板电场的特例:(等于电荷面密度)</p><script type="math/tex; mode=display">D=\sigma</script><p>仍然满足矢量叠加原理.</p><script type="math/tex; mode=display">D=\frac{\mathrm d\varPhi_e}{\mathrm dS_\perp}</script><p><strong>这表明,电场中某点电位移矢量大小等于该点处电位移线的密度.</strong></p><p>这个时候要祭出一个牛逼的公式帮我们衔接高中:</p><script type="math/tex; mode=display">\boxed{E=\frac D\varepsilon}</script><h3 id="静电场中的高斯定理"><a href="#静电场中的高斯定理" class="headerlink" title="静电场中的高斯定理"></a>静电场中的高斯定理</h3><p><strong>电场线,电位移线</strong>:永不闭合(无旋性),切线方向垂直,永不相交.电位移线线和电场线一毛一样,只是量纲不太一样.</p><p><strong>电通量</strong>:用$\varPhi_e$表示.</p><script type="math/tex; mode=display">\varPhi_e=\overrightarrow D\cdot\overrightarrow S</script><p>任意曲面:</p><script type="math/tex; mode=display">\varPhi_e=\int_S\overrightarrow D\cdot\mathrm d\overrightarrow S</script><p>闭合曲面:</p><script type="math/tex; mode=display">\varPhi_e=\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S</script><p><strong>高斯定理</strong>:空间内分布好多个点电荷,空间内做一个任意形状的闭合曲面(叫做高斯面),有的点电荷在面内有的在面外,通过该面的电通量只与面内的点电荷有关,等于其中的自由电荷量的代数和.表示为:</p><script type="math/tex; mode=display">\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S=\sum_{(S内)}q_i</script><p><strong>直线的电荷线密度</strong>:$\lambda$.作用:<br>一段线的带电量</p><script type="math/tex; mode=display">\sum q_i=\lambda l</script><p>很方便.</p><h3 id="几个结论"><a href="#几个结论" class="headerlink" title="几个结论"></a>几个结论</h3><p><strong>球面的电场强度</strong></p><script type="math/tex; mode=display">E=\begin{cases}\frac q{4\pi\varepsilon r^2}&(r>R)\\\ 0&(r<R)\end{cases}</script><p><strong>球体的电场强度</strong>($\varepsilon_1$表示内部介电常数,2是外部的)</p><script type="math/tex; mode=display">E=\begin{cases}\frac q{4\pi\varepsilon_2r^2}&(r>R)\\\ \frac{qr}{4\pi\varepsilon_1R^3}&(r<R)\end{cases}</script><h4 id="柱对称的状况"><a href="#柱对称的状况" class="headerlink" title="柱对称的状况"></a>柱对称的状况</h4><script type="math/tex; mode=display">E=\frac\lambda{2\pi\varepsilon r}</script><p><strong>圆柱面的情况</strong>:同理,内部是0外部和上面公式一毛一样.</p><p><strong>圆柱体的状况</strong>:我逐渐理解”电荷体密度”是什么意思了…就是”电荷 体密度”和”电荷 线密度”,单位不一样,直接乘面积或者体积就是对应的电荷量……所以这个可以自己导了.</p><p><strong>无限大均匀带电平面的分布</strong>:</p><script type="math/tex; mode=display">E=\frac{\sigma}{2\varepsilon}</script><h3 id="静电场的环路定理-电势"><a href="#静电场的环路定理-电势" class="headerlink" title="静电场的环路定理 电势"></a>静电场的环路定理 电势</h3><p>任何做功与路径无关的电场叫做 <strong>保守场</strong>.静电场是保守场,静电力是保守力.</p><h2 id="电势"><a href="#电势" class="headerlink" title="电势"></a>电势</h2><p>(高中整天谈的东西,升一手二级标题不过分吧)</p><script type="math/tex; mode=display">U_A=\int^\infty\overrightarrow E\cdot\mathrm d\overrightarrow l</script><p>两点的电势差:</p><script type="math/tex; mode=display">U_{ab}=U_a-U_b</script><p>又叫电压,符号福特.</p><p><strong>等势面</strong>:略,太熟悉了.</p><p><strong>电场强度和电势梯度</strong>:有</p><script type="math/tex; mode=display">\overrightarrow E=-\nabla U</script><p>意思是某点电场强度就是电势梯度的负值.</p><p><strong>注意</strong>:1.场强方向是电势衰减最快的方向.<br>2.场强大小和变化率有关,与电势值并无直接关系.</p><p><strong>静电场中的导体</strong>:记住一个结论:越尖端积聚电荷量越大.<br><strong>静电屏蔽</strong>:网罩,尽量减少电场对精密器械的影响.<br><strong>接地</strong>:金属空腔内放一个电子会往外辐射电场,但是如果空腔接地那就不会有电场溢出.</p><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><p>公式</p><script type="math/tex; mode=display">C=\frac qU</script><p>单位 法拉.</p><script type="math/tex; mode=display">\mathrm{1F=1C/V,1F=10^6\mu F=10^{12}pF}</script><p><strong>求电容</strong>:</p><p><strong>平板容器</strong>:先求电场:</p><script type="math/tex; mode=display">D=\sigma,E=\frac\sigma\varepsilon</script><p>两点间电势差</p><script type="math/tex; mode=display">U_{AB}=Ed=\frac{qd}{\varepsilon S}</script><p>所以</p><script type="math/tex; mode=display">C=\frac{\varepsilon S}d</script><p>有</p><script type="math/tex; mode=display">\frac C{C_0}=\frac \varepsilon{\varepsilon_0}=\varepsilon_r</script><p>带r的那个是相对介电常数.</p><p><strong>圆柱形电容器的电容</strong>:<br>先求电场:</p><script type="math/tex; mode=display">E=\frac \lambda{2\pi\varepsilon r}</script><p>然后求电势差</p><script type="math/tex; mode=display">U_{AB}=\int^B_A\overrightarrow E\cdot\mathrm d\overrightarrow l=\int^{R_B}_ {R_A}\frac\lambda{2\pi\varepsilon r}\mathrm dr=\frac\lambda{2\pi\varepsilon}\ln\frac{R_B}{R_A}</script><p>故有</p><script type="math/tex; mode=display">C=\frac{2\pi\varepsilon l}{\ln\frac{R_B}{R_A}}</script><p><strong>球形容器的电容</strong>:老规矩,先求电场.</p><script type="math/tex; mode=display">E=\frac q{4\pi\varepsilon r^2}</script><p>然后求出来电势差</p><script type="math/tex; mode=display">U_{AB}=\int^B_A\overrightarrow E\cdot\mathrm d\overrightarrow l=\int^{R_B}_ {R_A}\frac q{4\pi\varepsilon r^2}\mathrm dr=\frac q{4\pi\varepsilon}\Big(\frac 1{R_A}-\frac 1{R_B}\Big)</script><p>最后求出来电容:</p><script type="math/tex; mode=display">C=\frac q{U_{AB}}=4\pi\varepsilon\frac{R_AR_B}{R_B-R_A}</script><p><strong>电容串联</strong>:</p><script type="math/tex; mode=display">\frac 1C=\frac 1{C_1}+\frac 1{C_2}+...</script><p>也就是说更不容易击穿了,但是电容变小了.<br><strong>电容并联</strong>:</p><script type="math/tex; mode=display">C=C_1+C_2+...</script><p>直接相加,电容变大,但是更容易被击穿,取决于能力最低的那个.</p><p><strong>电容能量</strong>:</p><script type="math/tex; mode=display">W_e=\frac 12CU^2_{AB}=\frac 12U_{AB}Q</script><p><strong>电场能量</strong>:先引入电场能量密度的概念,用$w_e$表示:</p><script type="math/tex; mode=display">w_e=\frac 12DE=\frac 12\varepsilon E^2=\frac 12\overrightarrow D\cdot\overrightarrow E</script><p>所以(V是电场空间所占体积)</p><script type="math/tex; mode=display">W_e=\frac 12\varepsilon E^2V=\int w_e\mathrm dV</script><h1 id="第5章-稳恒磁场"><a href="#第5章-稳恒磁场" class="headerlink" title="第5章 稳恒磁场"></a>第5章 稳恒磁场</h1><p>耶比,到磁场了…</p><h3 id="电流和电流密度"><a href="#电流和电流密度" class="headerlink" title="电流和电流密度"></a>电流和电流密度</h3><p>电流的定义式</p><script type="math/tex; mode=display">I=\frac{\mathrm dq}{\mathrm dt}</script><p>电流密度使用$\overrightarrow J$表示,公式为</p><script type="math/tex; mode=display">\overrightarrow J=\frac{\mathrm dI}{\mathrm dS_\perp}=\rho_e\overrightarrow v</script><p>垂直电流线.其中$\rho_e$是平均电流密度,$\overrightarrow v$是该点电荷运动速度的平均值,称为迁移速度.</p><script type="math/tex; mode=display">\overrightarrow J=ne\overrightarrow v</script><p>其中n是单位体积内载流子数目,e是载流子电荷量.如果有好几种电荷和不同的速度那就是他们的矢量和.</p><h3 id="稳恒电场-欧姆定律"><a href="#稳恒电场-欧姆定律" class="headerlink" title="稳恒电场 欧姆定律"></a>稳恒电场 欧姆定律</h3><script type="math/tex; mode=display">I=\frac UR</script><p>适用范围,金属导体,电解液.<br><strong>电导</strong>:单位S(西门子),欧姆倒数.</p><script type="math/tex; mode=display">G=\frac1R</script><p>电阻率:</p><script type="math/tex; mode=display">R=\rho\frac lS</script><p>不均匀时:</p><script type="math/tex; mode=display">R=\int\frac{\rho\mathrm dl}S</script><p><strong>电导率</strong>:</p><script type="math/tex; mode=display">\sigma=\frac1\rho</script><p>电阻率和温度之间有以下关系:</p><script type="math/tex; mode=display">\rho=\rho_0(1+\alpha t)</script><p>其中$\alpha$叫做电阻温度系数.</p><p><strong>魔改欧姆定律</strong>:</p><script type="math/tex; mode=display">\overrightarrow J=\sigma\overrightarrow E</script><p>其中$\overrightarrow E$是电场强度.对非稳恒情况也适用,具有更大的普遍性.</p><p><strong>电动势</strong></p><script type="math/tex; mode=display">\overrightarrow E_k=\frac{\overrightarrow F_k}q</script><p>叫做 <strong>非静电场强</strong>,他的作用使得正极积聚正电荷,负极积聚负电荷,形成电流.</p><script type="math/tex; mode=display">\varepsilon=\frac Aq=\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l</script><p>式中$\varepsilon$叫做电动势,单位是伏特.</p><h3 id="磁场"><a href="#磁场" class="headerlink" title="磁场"></a>磁场</h3><p><strong>磁感应强度</strong>:(最大力的时候是电子垂直磁场运动(废话))</p><script type="math/tex; mode=display">B=\frac{F_{\max}}{qv}</script><p>单位特斯拉(T).<br><strong>电流元产生磁场</strong>:设电流元为$I\mathrm d\overrightarrow l$,方向与电流相同,于是有</p><script type="math/tex; mode=display">\mathrm d\overrightarrow B=k\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}</script><p>k为比例系数,大小和上式单位有关.如果国际单位制就是:</p><script type="math/tex; mode=display">\mathrm d\overrightarrow B=\frac{\mu_0}{4\pi}\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}</script><p>积分形式是</p><script type="math/tex; mode=display">\overrightarrow B=\int_L\mathrm d\overrightarrow B=\int_L\frac{\mu_0}{4\pi}\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}</script><p>其中$\mu_0=4\pi\times10^{-7}\mathrm{T\cdot m\cdot A^{-1}}$叫做真空的磁导率.</p><p><strong>运动电荷的磁场</strong>:</p><script type="math/tex; mode=display">\overrightarrow B_1=\frac{\mathrm d\overrightarrow B}N=\frac{\mu_0}{4\pi}\frac{q\overrightarrow v\times\overrightarrow r}{r^3}</script><h3 id="上面俩定律的应用"><a href="#上面俩定律的应用" class="headerlink" title="上面俩定律的应用"></a>上面俩定律的应用</h3><p>求磁场呗…说什么废话.</p><p><strong>无限长直导线在某点产生的磁场</strong>(a是距离):</p><script type="math/tex; mode=display">B=\frac{\mu_0I}{2\pi a}</script><p><strong>环形导线的磁场</strong>(中心线上):</p><script type="math/tex; mode=display">B=\frac{\mu_0}2\frac{R^2I}{(R^2+x^2)^{\frac32}}</script><p><strong>直螺线管的磁场</strong>:(这个细讲讲,会导式子就行)<br>因为螺线管很密,所以每个电流元可以取$n\mathrm dl$,这条段上线圈在P点产生的磁感应强度就是</p><script type="math/tex; mode=display">\mathrm dB=\frac{\mu_0}{2}\frac{R^2In\mathrm dl}{(R^2+l^2)^\frac32}</script><p>考虑对B求积分,引入变量$\beta$表示矢径之间的夹角,看图发现$l=Rc\tan\beta,\mathrm dl=-R\csc^2\beta\mathrm d\beta$,利用$R^2+l^2=R^2\csc^2\beta$得</p><script type="math/tex; mode=display">B=\int-\frac{\mu_0}2nI\sin\beta\mathrm d\beta</script><p>$\beta$的上界和下限分别为$\beta_1,\beta_2$,带入得</p><script type="math/tex; mode=display">B=\frac{\mu_0}2nI(\cos\beta_2-\cos\beta_1)</script><p>方向沿轴线向右.无限长:</p><script type="math/tex; mode=display">B=\mu_0nI</script><p>对于长直螺线管,边缘的大小是二分之中间的大小.</p><p><strong>磁感线</strong>:几个性质  </p><ol><li>任意两条磁感线不会相交.(因为任意一点方向是唯一确定的)</li><li>磁感线是无头无尾的闭合曲线.</li><li>磁场较强的地方磁感线比较密集.</li></ol><p><strong>磁通量 磁场中的高斯定理</strong>:<br>单位Wb(韦伯).</p><script type="math/tex; mode=display">\varPhi_m=\int_S\overrightarrow B\cdot\mathrm d\overrightarrow S</script><p>高斯定理:对于任意闭合曲面的总磁通量为0(这回就很鸡肋了,只表明了磁场是无源场).</p><script type="math/tex; mode=display">\oint_SB\cos\theta\mathrm dS=\oint_S\overrightarrow B\cdot\mathrm d\overrightarrow S=0</script><h3 id="磁介质-磁化强度"><a href="#磁介质-磁化强度" class="headerlink" title="磁介质,磁化强度"></a>磁介质,磁化强度</h3><p>略,加星了不讲.</p><script type="math/tex; mode=display">\overrightarrow H=\frac{\overrightarrow B}\mu</script><p>$\mu$被称为介质的磁导率,有$\mu=\mu_0\mu_r$,H是新引入的概念,表示磁场强度.</p><p>哈哈,略个几把,后面要用到前面的概念你给我说不讲我去?</p><h3 id="安培环路定律"><a href="#安培环路定律" class="headerlink" title="安培环路定律"></a>安培环路定律</h3><p>环流:(记住得顺着磁场线)</p><script type="math/tex; mode=display">\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=\oint_LH\mathrm dl=\frac{I}{2\pi r}\oint\mathrm dl=\frac I{2\pi r}\cdot2\pi r=I</script><p>上式表明积分和只与传导电流有关.反向积分结果是负的.<br><strong>多个导线</strong>:</p><script type="math/tex; mode=display">\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=\oint_LH\cos\theta\mathrm dl=\sum I_i</script><p>上式被称为安培环路定律.</p><h3 id="磁场对载流导线的作用"><a href="#磁场对载流导线的作用" class="headerlink" title="磁场对载流导线的作用"></a>磁场对载流导线的作用</h3><p><strong>安培力公式</strong>:</p><script type="math/tex; mode=display">\overrightarrow F=\int_LI\mathrm d\overrightarrow l\times\overrightarrow B</script><p><strong>洛伦兹力</strong>:</p><script type="math/tex; mode=display">F_{\max}=qvB</script><script type="math/tex; mode=display">\overrightarrow F=q\overrightarrow v\times\overrightarrow B</script><p>洛伦兹力公式.(左力右电的口诀仍记心间…)</p><p><strong>转圈圈~</strong></p><script type="math/tex; mode=display">R=\frac{mv_0}{qB}</script><script type="math/tex; mode=display">T=\frac{2\pi R}{v_0}=\frac{2\pi m}{qB}</script><p>螺距:转一圈差多少距离(螺旋升天的时候)(这里把速度分解了,升天的速度是$v_0\cos\theta$)</p><script type="math/tex; mode=display">h=\frac{2\pi mv_0\cos\theta}{qB}</script><p><strong>霍尔效应</strong>:额,吃老底吧,没啥好说的.</p><h1 id="第6章-电磁场理论基础"><a href="#第6章-电磁场理论基础" class="headerlink" title="第6章 电磁场理论基础"></a>第6章 电磁场理论基础</h1><p><strong>电磁感应</strong>:<br><strong>感生电动势</strong>:</p><script type="math/tex; mode=display">\varepsilon=-\frac{\mathrm d\varPhi}{\mathrm dt}</script><p><strong>电荷</strong>:</p><script type="math/tex; mode=display">q=\int_{\Delta\varPhi}-\frac1R\mathrm d\varPhi</script><p><strong>楞次定律</strong>:阻碍.</p><h3 id="感生和动生电动势"><a href="#感生和动生电动势" class="headerlink" title="感生和动生电动势"></a>感生和动生电动势</h3><h4 id="动生电势"><a href="#动生电势" class="headerlink" title="动生电势"></a>动生电势</h4><script type="math/tex; mode=display">\varepsilon=\int_a^b(\overrightarrow v\times\overrightarrow B)\cdot\mathrm d\overrightarrow l</script><p>三者垂直有</p><script type="math/tex; mode=display">\varepsilon=Bvl</script><p>(上面的是正常的导体棒移动的电动势)</p><script type="math/tex; mode=display">\mathrm d\varepsilon=Bv\mathrm dr=B\omega r\mathrm dr</script><script type="math/tex; mode=display">\varepsilon=\int\mathrm d\varepsilon=\int_0^1B\omega r\mathrm dr=\frac 12B\omega l^2</script><p>导体棒旋转产生的电动势.</p><h4 id="感生电势"><a href="#感生电势" class="headerlink" title="感生电势"></a>感生电势</h4><script type="math/tex; mode=display">\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l=-\frac{\mathrm d}{\mathrm dt}\int_S\overrightarrow B\cdot\mathrm d\overrightarrow S</script><script type="math/tex; mode=display">\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l=-\int_S\frac{\partial\overrightarrow B}{\partial t}\cdot\mathrm d\overrightarrow S</script><p>两个式子(害,无非就是磁通量变化)</p><p><strong>涡流和趋肤效应</strong>:涡流不解释,趋肤效应是导线在高频交流电作用下电流会主要趋近导线表面,所以常常用多股导线代替一根长直导线,而且可以利用涡流导致的趋肤效应淬火,表面快速升温淬火变硬,但是内部还是维持原先的韧性.</p><h3 id="自感"><a href="#自感" class="headerlink" title="自感"></a>自感</h3><p>有一种预感,自感会很恐怖…</p><script type="math/tex; mode=display">\varPhi=LI</script><p>L是自感系数,单位亨利(H)</p><script type="math/tex; mode=display">\varepsilon_L=-L\frac{\mathrm dI}{\mathrm dt}</script><script type="math/tex; mode=display">\varepsilon_L=-\frac{\mathrm d\varPhi}{\mathrm dt}=-(L\frac{\mathrm dI}{\mathrm dt}+I\frac{\mathrm dL}{\mathrm dt})</script><p>感生电动势阻碍.</p><p><strong>自感电路中的衰减和增长过程</strong>:弛豫时间$t=\tau=L/R$<br>然后自己求积分算.</p><h3 id="磁场的能量"><a href="#磁场的能量" class="headerlink" title="磁场的能量"></a>磁场的能量</h3><p>自感线圈存储的能量:(其实就是螺线管)</p><script type="math/tex; mode=display">W_m=\frac12LI^2</script><p><strong>磁场能量密度</strong>:</p><script type="math/tex; mode=display">w_m=\frac{B^2}{2\mu}=\frac12BH=\frac12\mu H^2</script><p>推广:</p><script type="math/tex; mode=display">W_m=\int_V\mathrm dW_m=\int_Vw_m\mathrm dV=\int_V\frac{B^2}{2\mu}\mathrm dV</script><hr><p><strong>题外话</strong>:电缆长为l,半径r,体积设为</p><script type="math/tex; mode=display">\mathrm dV=2\pi r\mathrm dr</script><p>体会一下,好像是对面积公式求导然后在积分的时候把同轴电缆的两个参数带进去,不需要无脑求体积.</p><h3 id="位移电流"><a href="#位移电流" class="headerlink" title="位移电流"></a>位移电流</h3><p><strong>非恒定电流的磁场中,安培环路定律不再适用.</strong>(因为非恒定状况下,电流不连续)</p><p>麦克斯韦说,能等效一个电流出来,叫”位移电流”,能够让变化电场的高斯定理仍然成立.</p><script type="math/tex; mode=display">\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S=q</script><p>然后先对时间求导,有</p><script type="math/tex; mode=display">\oint_S\frac{\partial\overrightarrow D}{\partial t}\cdot\mathrm d\overrightarrow S=\frac{\mathrm dq}{\mathrm dt}</script><p>带入方程可得</p><script type="math/tex; mode=display">\oint_S(\overrightarrow j+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S=0</script><p>这个”勾”就是 <strong>位移电流</strong>,满足</p><script type="math/tex; mode=display">\overrightarrow j_d=\frac{\partial\overrightarrow D}{\partial t}</script><p>所以</p><script type="math/tex; mode=display">I_d=\int_S\overrightarrow j_d\cdot\mathrm d\overrightarrow S</script><p><strong>全电流</strong>:传导电流和位移电流的总和.是连续的.有</p><script type="math/tex; mode=display">\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow L=I_全=I+I_d=\int_S(\overrightarrow j+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S</script><p>叫做全电流定律.</p><h3 id="麦克斯韦方程组"><a href="#麦克斯韦方程组" class="headerlink" title="麦克斯韦方程组"></a>麦克斯韦方程组</h3><p>静电场和稳恒磁场的基本方程.</p><script type="math/tex; mode=display">\oint\overrightarrow D\cdot\mathrm d\overrightarrow S=q\\\ \oint\overrightarrow E\cdot\mathrm d\overrightarrow l=-\frac{\mathrm d\varPhi}{\mathrm dt}=-\int_S\frac{\partial\overrightarrow B}{\partial t}\cdot\mathrm d\overrightarrow S\\\ \oint_S\overrightarrow B\cdot\mathrm d\overrightarrow S=0\\\ \oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=I+I_d=\int_S(\overrightarrow J+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S</script><p>很牛逼,但是不教怎么用.(估计就是看看牛逼得了)</p><h3 id="电磁波"><a href="#电磁波" class="headerlink" title="电磁波"></a>电磁波</h3><p>传播速率:(下面的c是光速)</p><script type="math/tex; mode=display">u=\frac 1{\sqrt{\mu\varepsilon}}\\\ c=\frac 1{\sqrt{\mu_0\varepsilon_0}}</script><p>电磁波的波函数:</p><script type="math/tex; mode=display">E=E_0\cos\omega(t-\frac zu)</script><script type="math/tex; mode=display">H=H_0\cos\omega(t-\frac zu)</script><p>任何时刻,$\overrightarrow E,\overrightarrow H$和波的传播方向都构成一对右旋的直角坐标系.<br><img src="https://pic4.zhimg.com/v2-df0659a8e768790ecb729e2d587e5afd_r.jpg?source=1940ef5c" alt="图炸了"></p><p>而且$\overrightarrow E\times\overrightarrow H$总是沿着波的方向.(所以光是横波)</p><p><strong>任意时刻有</strong>:</p><script type="math/tex; mode=display">\sqrt\mu H=\sqrt\varepsilon E</script><p>E和H分别在各自的平面上传播,体现了光的偏振性.</p><p><strong>电磁波的能量</strong>:</p><script type="math/tex; mode=display">S=\frac 12u(\varepsilon E^2+\mu H^2)=EH</script><p>把光速带进去自己算结论式子.同理,矢量式是他俩叉乘.<br><strong>平面电磁波的强度表示式</strong>:</p><script type="math/tex; mode=display">I=\frac12E_0H_0</script><p>剩下的自己推.</p><p><strong>电磁波谱</strong>:从能量低到高分别是:<br>无线电波,红外线,可见光,紫外线,X射线,$\gamma$射线</p><h1 id="第7章-光的干涉"><a href="#第7章-光的干涉" class="headerlink" title="第7章 光的干涉"></a>第7章 光的干涉</h1><p>由于生理上引起感光作用的是$\overrightarrow E$而不是$\overrightarrow H$,所以把E叫做光矢量.</p><p>叠加时,各点光强为</p><script type="math/tex; mode=display">I=I_1+I_2+2\sqrt{I_1I_2}\cos\Delta\varphi</script><p>相位差</p><script type="math/tex; mode=display">\Delta\varphi=(\varphi_1-\varphi_2)-\frac{2\pi}{\lambda}(r_1-r_2)</script><p>表明,叠加光强具有偶数k pi时干涉极大,奇数k pi时干涉极小.</p><p><strong>光程差</strong>:光在折射率n的介质中传播的几何路程为r,相当于在真空中传播$L=nr$,叫做光程.</p><p>相位差:</p><script type="math/tex; mode=display">\Delta\varphi=\varphi_2-\varphi_1-2\pi\frac{n_2r_2-n_1r_1}\lambda</script><p>光程差就是二者相减:</p><script type="math/tex; mode=display">\delta=n_2r_2-n_1r_1</script><p>所以暗纹判定可能会很好用:(phi用2k pi判定)</p><script type="math/tex; mode=display">\delta=\begin{cases}\pm k\lambda&亮\\\ \pm(2k+1)\frac\lambda2&暗\end{cases}</script><p>一个结论:透镜虽然会引起光传播路径的差异,但是不会产生光程差的变化.</p><h3 id="获得相干光的办法"><a href="#获得相干光的办法" class="headerlink" title="获得相干光的办法"></a>获得相干光的办法</h3><p><strong>分波面法</strong>:平行光先透过一个单缝然后分成一束光衍射,然后后面放一个双缝.</p><p><strong>分振幅法</strong>:一块玻璃,然后一束光打在上面会发生反射和折射,反射的光直接出去了,折射的打到玻璃底部再反射出去,可以获得两束相干光</p><p><strong>附加条件</strong>:1两束光不可振幅相差太大,否则看不出来.2光程差不可太大,不然一束光道路另一束还没到,会很难评.</p><h3 id="分波阵面干涉"><a href="#分波阵面干涉" class="headerlink" title="分波阵面干涉"></a>分波阵面干涉</h3><p><strong>杨氏干涉</strong>(高中实验)</p><script type="math/tex; mode=display">x=\pm k\frac Da\lambda</script><p>这是明条纹的位置,k是整数,a是两光源之间的距离,D是筒的长度.</p><script type="math/tex; mode=display">x=\pm(2k+1)\frac{D\lambda}{2a}</script><p><strong>劳埃镜实验</strong>:<br>一束光源和一个镜子,镜子用来反射光模拟一个虚拟的相干光源,剩下的不用多说了,1能看干涉条纹,2能观测到反射光的相位发生了跃变.</p><h3 id="分振幅干涉"><a href="#分振幅干涉" class="headerlink" title="分振幅干涉"></a>分振幅干涉</h3><p>(有点看懵逼了,感觉需要考场自己写自己导式子,这里先挖个坑)</p><p><strong>薄膜干涉</strong>:</p><p><img src="https://img.mianfeiwendang.com/pic/d7173276b7690f6b4392b677/1-810-jpg_6-1080-0-0-1080.jpg" alt="你是一个一个一个炸掉的图啊啊啊啊"></p><p>所以两束光,一个过薄膜一个没有,中间会有固定的光程差,满足相干光的条件.</p><script type="math/tex; mode=display">\delta=2e\sqrt{n_2^2-n_1^2\sin^2i}+\frac\lambda2=\begin{cases}k\lambda&亮啊,很亮啊\\\ (2k+1)\frac\lambda2&黑的\end{cases}</script><p>式子最后加的半个波长是半波损失,发生在光从1表面反射到透镜的过程(e是薄膜的厚度,i是入射角,n1是空气折射率,n2是薄膜折射率).</p><p>可以发现,在一个薄膜干涉系统中,光程差最后取决于入射角.不同倾角的入射光最后都会形成不同的干涉条纹,叫做 <strong>等倾干涉</strong>.条纹是内疏外密的明暗相间圆环.</p><p>但是可以看到,有一部分光直接透射出去了,这两束透射光也是可以进行干涉的,光程差是</p><script type="math/tex; mode=display">\delta=2e\sqrt{n_2^2-n_1^2\sin^2i}</script><p>这里是没有半波损失的,所以发现反射光干涉强了透射光干涉就会减弱,这是符合能量守恒定律的.</p><p><strong>劈尖干涉</strong>:其实就是 <strong>等厚干涉</strong>.凡厚度相同的地方都会是同一条干涉条纹.</p><p>实验:两个玻璃片边上垫一层纸(劈尖角一般都很小),然后用光垂直入射,会让直接反射和透射玻璃被劈尖反射的光发生干涉.</p><script type="math/tex; mode=display">\delta=2n_2e+\frac\lambda2</script><p>老规矩,k入是加强,n2是两个劈尖中间的介质e是劈尖厚度,全程和玻璃板没任何关系,甚至换成空气劈尖都没问题.</p><script type="math/tex; mode=display">l=\frac\lambda{2n_2\theta}</script><p>表示两个干涉条纹之间的距离</p><p><strong>牛顿环</strong>:也是一种等厚干涉.光程差:</p><script type="math/tex; mode=display">\delta=2e+\frac\lambda2</script><p>光程差和半波损失,还是k入明环否则暗环.</p><script type="math/tex; mode=display">e_k=\frac{r_k^2}{2R}</script><p>其中R是透镜曲率半径.e是对应的空气柱的厚度,也就是</p><script type="math/tex; mode=display">r_k^2=2Re_k-e_k^2</script><p>所以明环:</p><script type="math/tex; mode=display">r_k=\sqrt{(k-\frac12)R\lambda}</script><p>暗环:</p><script type="math/tex; mode=display">r_k=\sqrt{kR\lambda}</script><h1 id="第8章-光的衍射"><a href="#第8章-光的衍射" class="headerlink" title="第8章 光的衍射"></a>第8章 光的衍射</h1><p>这一章开始就看不懂了…光的波动函数还需要好好看看才能解析这部分的内容…</p><p>只有很小的时候,狭缝甚至和光的波长相比拟的时候衍射现象才明显.</p><p>先分开:当光源和接收屏或二者之一距离有限时叫菲涅尔衍射,或者叫近场衍射,都无限的时候(入射光和衍射光都是平行光的时候)叫夫琅禾费衍射,或远场衍射.</p><p><strong>因为夫琅禾费衍射在实际应用中十分重要,而且数学处理比菲涅尔衍射要简单,所以本章只讨论夫琅禾费衍射(老师人真好,%%%).</strong></p><h2 id="菲涅尔衍射"><a href="#菲涅尔衍射" class="headerlink" title="菲涅尔衍射"></a>菲涅尔衍射</h2><p><strong>惠更斯原理</strong>:介质中传播到的各点,都可以看成是发射子波的波源,其后的任一时刻,子波的包迹就是新的波阵面.</p><p>略,太tm复杂了.Flu看不懂,在这里赌一手不考这逼玩意.</p><h2 id="夫琅禾费衍射"><a href="#夫琅禾费衍射" class="headerlink" title="夫琅禾费衍射"></a>夫琅禾费衍射</h2><p>(这里只考虑 <strong>单缝衍射</strong> 的状况)远场衍射,使用两个凸透镜用来聚光.结构长这样:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">光-&gt;()|()-&gt;   |</span><br></pre></td></tr></table></figure><br>|上有一条小狭缝,假设太小了你看不到(我是不会说我没找到开了一个洞的符号的)()表示凸透镜(有俩)</p><p><strong>俩透镜作用</strong>:第一个是点光源,透镜会把发散的光变成平行光,然后通过狭缝.第二个透镜的目的是汇聚,把平行光衍射的一个方向的光汇聚在一起,然后打在屏幕上会发生干涉.</p><p>入射方向:$\varphi$</p><p>不同角度入射的光会有不同程度的光程差,最中间的叫中央明纹,是最大的干涉纹(都加强).否则会有光程差,最大的光程差是最上面的光和最下面的光,事实上决定一个条纹是亮还是暗就取决于这个.</p><script type="math/tex; mode=display">\delta=BC=a\sin\varphi</script><p>(这个是光程差)</p><p>式子里面的BC是一个方向到透镜的夹角的一个小路程:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*|  /    /</span><br><span class="line"> | /    /</span><br><span class="line">A|/    /</span><br><span class="line"> |\   /</span><br><span class="line"> |  \/<span class="built_in">C</span>(假设BC垂直AC)</span><br><span class="line"> |  /</span><br><span class="line"> | /</span><br><span class="line">B|/</span><br></pre></td></tr></table></figure><br>然后就有最后的公式</p><script type="math/tex; mode=display">\delta=a\sin\varphi=\begin{cases}0&中央明纹\\\ \pm2k\frac\lambda2&暗纹\\\ \pm(2k+1)\frac\lambda2&明纹\end{cases}</script><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>只有这里是2k入是暗纹,原因是偶数个波长差时AB可以被分成偶数个半波带,然后彼此抵消,就是暗纹的结果了.注意只有这里是特殊的,千万不要记混.</p><h3 id="单缝衍射条纹特点"><a href="#单缝衍射条纹特点" class="headerlink" title="单缝衍射条纹特点"></a>单缝衍射条纹特点</h3><p>x是条纹和中心O的距离,f是透镜焦距,a是狭缝宽,有</p><script type="math/tex; mode=display">x=\begin{cases}\pm2k\frac{f\lambda}{2a}&暗\\\ \pm(2k+1)\frac{f\lambda}{2a}&明\end{cases}</script><p>注意k从1开始取.</p><p>小结论:中央明条纹宽度是正常条纹宽度的2倍,而且衍射条纹是均匀不变的.(条纹距离可以用两个相邻另一种条纹相减算)</p><h2 id="光栅衍射"><a href="#光栅衍射" class="headerlink" title="光栅衍射"></a>光栅衍射</h2><p>光栅就是一个一个小格凑一起的,分为 <strong>反射光栅</strong> 和 <strong>透射光栅</strong>.</p><p>透光的宽度是a,不透光的宽度是b,凑一起就是 <strong>光栅常数</strong>(a+b),一般数量级都在$\mathrm{10^{-5}-10^{-6}m}$的数量级.</p><h3 id="光栅方程"><a href="#光栅方程" class="headerlink" title="光栅方程"></a>光栅方程</h3><p><strong>主极大</strong>:满足方程的条纹叫主极大.</p><script type="math/tex; mode=display">(a+b)\sin\varphi=\pm2k\pi,k=0,1,2,...</script><p><strong>极小(暗纹)</strong>:</p><script type="math/tex; mode=display">(a+b)\sin\varphi=\pm\frac{k'}N\lambda</script><p><strong>次极大</strong>:既满足主极大式子又满足单缝衍射暗条纹条件$a\sin\varphi=k’\lambda$证明第k大条纹不再出现,称为光栅缺级现象.</p><p>所以有缺级的级数是</p><script type="math/tex; mode=display">k=\frac{a+b}ak'</script><h3 id="光栅光谱"><a href="#光栅光谱" class="headerlink" title="光栅光谱"></a>光栅光谱</h3><p>第几级就是k=几,直接带进去算.</p><p><strong>色散本领</strong>:</p><script type="math/tex; mode=display">D_l=\frac{kf}{(a+b)\cos\theta}</script><p>完结!喜( )个锤子,真$\mathbf{tm}$长</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RT,这是大物的笔记.(草,劳改课还有一篇三千字的论文等着我…)&lt;/p&gt;
&lt;p&gt;听说大物就是高中物理加点微积分的东西,我怎么这么不信啊…&lt;/p&gt;
&lt;p&gt;考试范围是2-8章,别问为什么缺东西.&lt;/p&gt;
&lt;h1 id=&quot;第2章-机械振动&quot;&gt;&lt;a href=&quot;#第2章-机械振动&quot;</summary>
      
    
    
    
    
    <category term="Physics" scheme="https://narafluorine.gothub.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://narafluorine.gothub.io/2024/05/17/hello-world/"/>
    <id>https://narafluorine.gothub.io/2024/05/17/hello-world/</id>
    <published>2024-05-17T09:10:08.785Z</published>
    <updated>2024-05-17T09:10:08.785Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
