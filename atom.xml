<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fluorine&#39;s blog</title>
  
  <subtitle>Hello here!</subtitle>
  <link href="https://narafluorine.github.io/atom.xml" rel="self"/>
  
  <link href="https://narafluorine.github.io/"/>
  <updated>2025-06-06T03:33:05.851Z</updated>
  <id>https://narafluorine.github.io/</id>
  
  <author>
    <name>Fluorine Wengers</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/06/06/30019_%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    <id>https://narafluorine.github.io/2025/06/06/30019_%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/</id>
    <published>2025-06-06T03:32:47.499Z</published>
    <updated>2025-06-06T03:33:05.851Z</updated>
    
    <content type="html"><![CDATA[<h1>生活小妙招</h1><h2 id="403">403</h2><p>这里应该记录所有 <em>真正有用</em> 的东西.</p><blockquote><p>有用:某时间个人想要达成某个目的而使用某个物品(或技术),那么这个物品(或技术)作为手段就是有用的.<br>真正有用:这个物品(或技术)对大部分人有用,或对个人较大部分时间有用.</p></blockquote><p>以下来源并非最优解,Flu只需要一个能够快速达成目的的手段,而不是以寻求&quot;最优手段&quot;作为目的.</p><h2 id="折T恤">折T恤</h2><p><a href="https://www.bilibili.com/video/BV16o4y1S7ZT">这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;生活小妙招&lt;/h1&gt;
&lt;h2 id=&quot;403&quot;&gt;403&lt;/h2&gt;
&lt;p&gt;这里应该记录所有 &lt;em&gt;真正有用&lt;/em&gt; 的东西.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有用:某时间个人想要达成某个目的而使用某个物品(或技术),那么这个物品(或技术)作为手段就是有用的.&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/05/30/20012_CF_2025/"/>
    <id>https://narafluorine.github.io/2025/05/30/20012_CF_2025/</id>
    <published>2025-05-30T03:31:20.582Z</published>
    <updated>2025-06-05T12:36:15.798Z</updated>
    
    <content type="html"><![CDATA[<p>有必要写一些div2的EF了,不然代码怎么打都不知道了…</p><h1><a href="https://codeforces.com/contest/2007">CF969 div2</a></h1><h2 id="E">E</h2><p>给定一棵 dfs 序标号的树,每条边有不确定的非负整数边权,但你只知道边权和.定义 $f_i$ 为所有安排边权的情况下, $i$ 与 $(i\mod n)+1$ 的距离的最大值.每次告诉你一条边的边权,求此时所有 $f_i$ 之和.</p><p>解法：树按 dfs 序标号，所以最终的 $n$ 条路径中，每条边恰好被经过两次。一条路径的权值可能是：已经全部确定，那就确定了；没有全部确定，权值是边权和减去路径外知道的边的权值和。用全局加的 tag 维护即可。</p><p>然而…说是这么说,怎么写呢?<br>首先记录深度dep,fa表示深度和爹.<br>然后记录len表示 $i$ 到 $i+1$ 的路径长度.<br>我们知道每条路径会被经过两次,所以记录 $c1$ 和 $c2$ 表示路径两次经过的起始点,然后按照深度去加长度知道碰到一起,总路径和确定,所以复杂度确定.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=n;++i)&#123;</span><br><span class="line">u=i,v=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==n)v=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">(c1[u]==<span class="number">0</span>?c1[u]:c2[u])=i;</span><br><span class="line">u=ko[u];</span><br><span class="line">len[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每个边只会被经过两次,所以这个边确定只会让两个路径的len–,也就是不确定的边长度–.如果变成0那么这个边完全确定下来,就减掉自由边.</p><h1><a href="https://codeforces.com/contest/2064">CF1005 div2</a></h1><h2 id="C">C</h2><p>Flu发现首先删掉能直接删掉的,然后必然剩下负的和正的想冲,就想比较哪个大取全正的,结果不对.</p><p>题解说:不管冲不冲,每次肯定是删最左端的正数,或者最右端的负数,所以可以枚举这个边界点,维护前后缀即可.</p><h2 id="D">D</h2><p>给一个数列,q次询问,每次从左端开始,如果数字比数列大,那就得分+1,吃掉数列,数字变成抑或这个数字.(多次询问独立),问每个询问的最大得分.</p><p>规定 $\mathrm{msb}(a)$ 表示最高位.假如当前msb高于一个数字,一定能吃掉.假如低于则一定不能吃掉.假如相等,可以通过维护抑或前缀和来快速计算能不能吃掉.</p><p>同理,发现吃掉这个msb一样的之后就不能再吃msb更高的了,也就是整个数列最多分成log段,直接维护即可.</p><h2 id="E-2">E</h2><p>非常色的题.</p><p>AB玩一个游戏,在一个01串上,每次A可以选两个连续的0删掉,B可以选至少一个1的连续长度2的串删掉.谁删不掉就输了,问一个01串的所有连续子串中玩家1能赢多少次.</p><p>首先假设ab都可以随便选不连续的,那么游戏就变成了对01个数进行统计得出答案.显然玩家2是尽可能删01最后再删11,而且没0可用的轮不会持续很久,所以一轮理论上会删 <code>0010</code> .我们设0是1,1是-3,这样玩家的胜负可以用01串的数字大小表示了.据此得到4个偏移.</p><p>然后我们发现,选连续的串对玩家2是假的,因为字符串上只要存在1必定有01相连.<br>观察之后还可以发现,选连续的0对玩家1也是假的.什么情况不会形成连续的0?只有 <code>0101010</code> 这种,然而此时就算不连续玩家1也是输的.</p><p>所以选连续 <code>00</code> 的这个限制自始至终就是诈骗条件,根本不用管.<br>问题转化为我们要找到所有子串,然后评估其是否大于1.</p><p>前缀和+权值线段树.</p><h1><a href="https://codeforces.com/contest/2095">CF愚人节赛</a></h1><p>非常妙的一场,有很多很新奇的脑洞值得记录.</p><h2 id="B">B</h2><p>你有一个游戏,你要赌能不能过10个测试点,这个游戏很像伯努利分布,发现在两端概率最高,是1/2,所以10个点就是要赌1/1024的概率,显然不太对劲.</p><p>发现输出没有要求一定要在给定的16个格子内,所以输出17或者-1就完事了,(很仙的题啊),</p><h2 id="C-2">C</h2><p>问你这个题有多少个测试点,<br>题解说告诉大家CF有一个filter功能,能看谁过了多少个测试点,然后对filter二分即可,但是要求必须要有一个过这个题的才行.</p><h2 id="D-2">D</h2><p>盒人题.Flu经过测试发现 Google Earth给出的地理坐标有较大的偏差(7km左右),而Google Map精确度很高,是这样.</p><h2 id="E-pair-count">E pair count</h2><p>正常的题面,正常的数据范围,不正常的链接.<br>这个题的XOR的链接并不是维基百科上面的链接,而是一个wordle,解出来发现是MULTIPLY(相乘),于是你要找到任意三次方相乘等于k的下标.</p><p>k可以是0,模数只保证是质数并没有其他性质.</p><h3 id="在这个题爆了个大bug-非常重要-之前从来没见过的bug">在这个题爆了个大bug,非常重要,之前从来没见过的bug</h3><p>正常求逆元是mod-2,直接快速幂.<br>然而对0求逆元的时候正好对2取模,会导致出现 <code>qp(0,0,2)</code> 的情况,返回值是1,然而0的逆元显然因为不存在所以是0,就在这狠狠地被肘了.</p><h2 id="F-1-3-of-the-problem">F 1/3 of the problem</h2><p>三分之一在这里(你看到了),于是…</p><p>剩下的三分之二在俄文区…(草)</p><h2 id="G-绝对是一个图论问题">G &lt;绝对是一个图论问题&gt;</h2><p>乍一看有很高深的算法,又是从n个点选k个又是1e5的,算法很神秘.<br><strong>然而</strong> 最后有一句话: <strong>没有三个点位于一个圆上</strong> .什么意思?任意三点都不构成圆,意味着所有的点都是共线的,排一遍序扫一下就完事了,这个题非常诈骗.诈骗!</p><h2 id="H">H</h2><p>给一张高斯模糊过的图片,你要逆过来解密高斯模糊(PS大法似乎不顶用),所以这个题偏CTF风格,笔者抄的题解脚本,</p><h2 id="J">J</h2><p>题解说视频讲解能够提前&quot;首映&quot;出来,然后听歌识曲得到音乐名的提示,然后从PPT中得到输入输出格式,最后提交类似flag的题目名称.</p><h1><a href="https://codeforces.com/contest/171">CF愚人节赛2012</a></h1><h2 id="D-3">D</h2><p>非常妙的题,题面是说有5个点,不告诉你输入具体是几,你要猜一个1-3的数(也就是说只要穷举,大家都能作对,只是交多少发的问题,这个题背景就很妙)</p><p>Flu采取的类似二分的策略,最后+9过的(中间唐了一发).<br>首先你可以通过所有未知编号的测试点使用一样的数来确定第一个被卡掉的点不是几,然后对未知的点二分,找到第一个过的点,就能清楚第几个点实际是几以及答案是几,当然这个题本身很有趣,但是很看脸.</p><h2 id="E-3">E</h2><p>给你一种未知语言的编译器,让你使用这种语言输出这种语言的名字.</p><p>随便做点什么,然后查看报错信息,查到是INTERCAL(在搜索偏门信息方面感觉AI明显不如搜索引擎,不知道咋回事)</p><h2 id="C-3">C</h2><p>仍然是一种新编程语言,这次叫做Chef,代码是一句一句类似食谱的步骤.这次是要理解程序在干什么然后去模拟这个过程.</p><h2 id="G">G</h2><p>给三个数字猜规律.</p><p>规律:前两个数字是类斐波那契数列的开始,第三个是需要求的索引…好难猜.</p><h1><a href="https://codeforces.com/contest/290">CF愚人节2013</a></h1><h2 id="A">A</h2><p>给一个数字,猜字符串.<br>上网搜发现是美国历届总统的名字.</p><p>然后交,WA了,看了答案才知道除了那个名字带 <code>Van</code> 的都是只取最后一个单词.</p><h2 id="C-4">C</h2><p>一个新的语言理解题,语言叫做lolcode,是一个网络用语写成的语言.</p><h1><a href="https://codeforces.com/contest/409">CF愚人节2014</a></h1><h2 id="A-2">A</h2><p>看样例猜规则系列,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[]()[]<span class="number">8</span>&lt;       <span class="number">8</span>&lt;<span class="number">8</span>&lt;()</span><br><span class="line"><span class="number">8</span>&lt;[]()<span class="number">8</span>&lt;       []<span class="number">8</span>&lt;[]</span><br><span class="line"></span><br><span class="line">TEAM <span class="number">2</span> WINS    TIE</span><br></pre></td></tr></table></figure><p>emmm…首先看第一个 <code>[]</code> 应该是小于 <code>8&lt;</code> 的,然后看第二个, <code>[]</code> 应该是介于 <code>()</code> 和 <code>8&lt;</code> 之间的,所以推测 <code>()</code> &lt; <code>[]</code> &lt; <code>8&lt;</code> .交上去WA了…然后不知道咋做看题解了.<br>题解说这是石头剪子布…<br>Flu还是做解密题做太少了.</p><h2 id="B-2">B</h2><p>还是猜语言,这次是Fortran…</p><h2 id="D-4">D</h2><p>给一堆基本事实,然后给输入猜输出.<br>题解说有的事实是假的,所以你只需要判断真假就行了…</p><h2 id="F-000001">F 000001</h2><p>题解说,即使一个问题没有描述,它最起码有一个名称.你要找到一个1-64对应数字的哈希,应该怎么办?显然是上网查.上哪里查?显然是OEIS.所以答案就是oeis A000001,并不是数字-1之后的二进制长度.</p><h2 id="G-on-a-plane">G on a plane</h2><p>在飞机上(一说,在平面上)</p><p>非常生草的事情是,把样例给出的点画在图上发现是 <code>5+AVG Y</code> …<br>样例才是题干…</p><p>破防了,以后再也不做愚人节题目了.</p><h1><a href="https://codeforces.com/contest/2111">CF2111</a></h1><p>E玄学WA,不知道为啥,最后重回蓝名.</p><h2 id="E-4">E</h2><p>给一个abc组成的字符串,每次给一个操作 <code>op-&gt;oop</code> 字符直接替换,求最后字典序最小的字符串.<br>首先分情况一下得到只有以下操作是有效的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b-&gt;a</span><br><span class="line">c-&gt;a</span><br><span class="line">b-&gt;c-&gt;a</span><br><span class="line">c-&gt;b-&gt;a</span><br></pre></td></tr></table></figure><p>然后要对 <strong>字符串</strong> 每一为进行枚举,能变a直接变a不能就对前一个操作二分后一个操作,把所有修改都丢set里即可.<br>不知道为什么玄学WA,场上大家似乎都在WA…</p><h2 id="F">F</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有必要写一些div2的EF了,不然代码怎么打都不知道了…&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://codeforces.com/contest/2007&quot;&gt;CF969 div2&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;E&quot;&gt;E&lt;/h2&gt;
&lt;p&gt;给定一棵 dfs 序标号的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/05/30/20011_NC_2025/"/>
    <id>https://narafluorine.github.io/2025/05/30/20011_NC_2025/</id>
    <published>2025-05-30T03:20:57.396Z</published>
    <updated>2025-05-30T03:33:13.197Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://ac.nowcoder.com/acm/contest/109081#question">牛客练习赛138</a></h1><h2 id="F">F</h2><p>逆天F构造…<br>构造一个[1,n]的排列使其构成的环满足任意两项之间差是奇质数.</p><p>结果告诉我只需要找到 $p+q=n$ 且 $p,q$ 都是奇质数的一对,然后就可以 [1,1+p,1+2p%n,…] .<br>最后用哥德巴赫猜想变种证明的,真神秘.</p><h2 id="G">G</h2><p>对于给定的 $n,k$ 计算<br>$$\sum_{m\equiv1\mod k}^n\binom{n}{m}\mod (1e9+7)$$<br>这个题乍一看无从下手,再一看k只有 $100$ 而n有1e7.<br>首先考虑特殊情况:k=1,这就是 $2^{n}-1$ .<br>对于k=2有<br>$$\binom n1+\binom n3+…$$<br>考虑二项式定理,上面就是 $(x+1)^n$ 的 $x$ 项的系数.<br>于是对于更普遍的情况,有:<br>$$(1+x)^n \mod (x^k−1)$$<br>答案是 $x$ 的系数.</p><blockquote><p>为什么模 $(x^k-1)$ 而不是模 $(x^k)$ ?<br>因为前者可以让 $x^k\equiv 1$ (也就是变成了循环多项式环)而后者会让 $x^k,x^{k+1},…\equiv 0$ 也就是多项式高位全部丢掉了.</p></blockquote><p>最后对n套一个快速幂就能算出来答案了,复杂度 $O(T\log nk^2)$ .</p><h1>某个典1</h1><p>你有一个数列,每次可以选最大的几个数让他们-1,求你最多能做多少次操作.</p><p>这个题的结论是:对于<a href="https://atcoder.jp/contests/abc368/tasks/abc368_b">两个元素</a>,公式如下(假设 $a_1$ 是数列 $a$ 中最大的元素):<br>$$\min\left(\left\lfloor\frac{\sum a}{2}\right\rfloor,\sum a-a_1\right)$$<br>对于三个元素,可以做拓展如下:<br>$$\min\left(\left\lfloor\frac{\sum a}{3}\right\rfloor,\left\lfloor\frac{\sum a-a_1}{2}\right\rfloor,\sum a-a_1-a_2-a_3\right)$$<br>四个元素同理:<br>$$\min\left(\left\lfloor\frac{\sum a}{4}\right\rfloor,\left\lfloor\frac{\sum a-a_1}{3}\right\rfloor,\left\lfloor\frac{\sum a-a_1-a_2}{2}\right\rfloor,\sum a-a_1-a_2-a_3-a_4\right)$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/109081#question&quot;&gt;牛客练习赛138&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;F&quot;&gt;F&lt;/h2&gt;
&lt;p&gt;逆天F构造…&lt;br&gt;
构造一个[1,n]的排列使其构成的环满足任意两项</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/05/27/30018_%E5%91%BD%E9%A2%98%E7%BB%84%E6%B1%87%E6%80%BB/"/>
    <id>https://narafluorine.github.io/2025/05/27/30018_%E5%91%BD%E9%A2%98%E7%BB%84%E6%B1%87%E6%80%BB/</id>
    <published>2025-05-27T01:38:50.394Z</published>
    <updated>2025-05-27T16:04:55.525Z</updated>
    
    <content type="html"><![CDATA[<p>似乎没人做哪场赛站是谁出的题的汇总…</p><h1>Nanani Fan Club</h1><ul><li><a href="https://codeforces.com/gym/105922">The 18th Jilin Provincial Collegiate Programming Contest</a></li></ul><h1>北邮😡</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;似乎没人做哪场赛站是谁出的题的汇总…&lt;/p&gt;
&lt;h1&gt;Nanani Fan Club&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codeforces.com/gym/105922&quot;&gt;The 18th Jilin Provincial Collegiate</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/05/26/20010_XCPC_Linux/"/>
    <id>https://narafluorine.github.io/2025/05/26/20010_XCPC_Linux/</id>
    <published>2025-05-26T02:41:23.592Z</published>
    <updated>2025-05-26T04:47:49.616Z</updated>
    
    <content type="html"><![CDATA[<p>有一队在XCPC热身赛上连Linux都不会用,是谁呢?好难猜啊…</p><h2 id="如何打开什么IDE">如何打开什么IDE</h2><p>桌面的开始菜单点 <code>terminal</code> (命令行终端)输入 <code>code</code> 能打开VScode,然后能编译使用C++.</p><h2 id="创建文件">创建文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+n</span><br></pre></td></tr></table></figure><h2 id="测试什么">测试什么?</h2><p>众所周知,VScode只是一个比较好看的文本编辑器,能编译不等于能调试.</p><ol><li>测试 <code>__int128</code> 能否支持.</li><li>测试 <code>for(auto i:vc)</code> C++11标准</li><li>测试 <code>cin&gt;&gt;a;</code> 能不能在VScode输入东西(某场东北赛VScode能编译运行但是不能输入…)</li></ol><h2 id="如果在VScode不能输入怎么办">如果在VScode不能输入怎么办?</h2><p>只能用命令行了…</p><h2 id="命令行编译运行">命令行编译运行</h2><p>桌面右键,选open terminal here,然后打开的终端默认就是 <code>/Desktop</code> 文件夹.</p><p>命令行编译(注意区分文件大小写):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ a.cpp -o a</span><br></pre></td></tr></table></figure><p>命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a</span><br></pre></td></tr></table></figure><blockquote><p>多次编译可以用键盘上的方向键去执行上一条输入过的指令.</p></blockquote><blockquote><p>Linux下编译的可执行文件是没有拓展名的,就叫 <code>a</code> .</p></blockquote><h2 id="测试样例怎么复制粘贴">测试样例怎么复制粘贴?</h2><p>首先,通用的一般是 <code>Ctrl+C</code> 或者 <code>Ctrl+Shift+C</code> 复制.<br>粘贴可以使用下面命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+V</span><br><span class="line">Ctrl+Shift+V</span><br><span class="line">鼠标中键(按一下滚轮)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有一队在XCPC热身赛上连Linux都不会用,是谁呢?好难猜啊…&lt;/p&gt;
&lt;h2 id=&quot;如何打开什么IDE&quot;&gt;如何打开什么IDE&lt;/h2&gt;
&lt;p&gt;桌面的开始菜单点 &lt;code&gt;terminal&lt;/code&gt; (命令行终端)输入 &lt;code&gt;code&lt;/code&gt; 能打开V</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://narafluorine.github.io/2025/05/20/30013_JS_Disallow/"/>
    <id>https://narafluorine.github.io/2025/05/20/30013_JS_Disallow/</id>
    <published>2025-05-20T12:22:23.002Z</published>
    <updated>2025-05-20T12:48:29.709Z</updated>
    
    <content type="html"><![CDATA[<p>emoji</p><h2 id="Only-when-JS-is-banned-can-those-pages-be-viewed-smoothly-😡">Only when JS is banned can those pages be viewed smoothly. 😡</h2><p><a href="https://zh.biblequest.biz">https://zh.biblequest.biz</a></p><p><a href="https://finance.sina.com.cn">https://finance.sina.com.cn</a></p><p><a href="https://k.sina.com.cn">https://k.sina.com.cn</a></p><p><a href="https://mil.news.sina.com.cn">https://mil.news.sina.com.cn</a></p><p><a href="https://ask.zol.com.cn">https://ask.zol.com.cn</a></p><p><a href="https://www.danmuxiu.cn">https://www.danmuxiu.cn</a></p><p><a href="https://news.sina.cn">https://news.sina.cn</a></p><p><a href="https://zx.sina.cn">https://zx.sina.cn</a></p><p><a href="https://m.thepaper.cn">https://m.thepaper.cn</a></p><p><a href="https://www.thepaper.cn">https://www.thepaper.cn</a></p><p><a href="https://www.163.com">https://www.163.com</a></p><p><a href="https://baike.baidu.com">https://baike.baidu.com</a></p><p><a href="https://cloud.baidu.com">https://cloud.baidu.com</a></p><p><a href="https://developer.baidu.com">https://developer.baidu.com</a></p><p><a href="https://kan.china.com">https://kan.china.com</a></p><p><a href="https://military.china.com">https://military.china.com</a></p><p><a href="https://www.cnblogs.com">https://www.cnblogs.com</a></p><p><a href="https://www.codenong.com">https://www.codenong.com</a></p><p><a href="https://deepinout.com">https://deepinout.com</a></p><p><a href="https://www.eet-china.com">https://www.eet-china.com</a></p><p><a href="https://animatorvsanimation.fandom.com">https://animatorvsanimation.fandom.com</a></p><p><a href="https://geek-docs.com">https://geek-docs.com</a></p><p><a href="https://www.heibaiqi123.com">https://www.heibaiqi123.com</a></p><p><a href="https://www.hjenglish.com">https://www.hjenglish.com</a></p><p><a href="https://culture.ifeng.com">https://culture.ifeng.com</a></p><p><a href="https://ent.ifeng.com">https://ent.ifeng.com</a></p><p><a href="https://history.ifeng.com">https://history.ifeng.com</a></p><p><a href="https://news.ifeng.com">https://news.ifeng.com</a></p><p><a href="https://tech.ifeng.com">https://tech.ifeng.com</a></p><p><a href="https://new.qq.com">https://new.qq.com</a></p><p><a href="https://news.qq.com">https://news.qq.com</a></p><p><a href="https://www.runoob.com">https://www.runoob.com</a></p><p><a href="https://jt.shenchuang.com">https://jt.shenchuang.com</a></p><p><a href="https://news.sohu.com">https://news.sohu.com</a></p><p><a href="https://www.sohu.com">https://www.sohu.com</a></p><p><a href="https://cloud.tencent.com">https://cloud.tencent.com</a></p><p><a href="https://sso.toutiao.com">https://sso.toutiao.com</a></p><p><a href="https://blog.csdn.net">https://blog.csdn.net</a></p><p><a href="https://wenku.csdn.net">https://wenku.csdn.net</a></p><p><a href="https://rms.apachecn.org">https://rms.apachecn.org</a></p><p><a href="https://dictionary.cambridge.org">https://dictionary.cambridge.org</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;emoji&lt;/p&gt;
&lt;h2 id=&quot;Only-when-JS-is-banned-can-those-pages-be-viewed-smoothly-😡&quot;&gt;Only when JS is banned can those pages be viewed smoothly</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>概率论学习笔记</title>
    <link href="https://narafluorine.github.io/2025/05/16/00012_%E6%A6%82%E7%8E%87%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://narafluorine.github.io/2025/05/16/00012_%E6%A6%82%E7%8E%87%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-05-16T00:00:00.000Z</published>
    <updated>2025-05-20T10:48:24.248Z</updated>
    
    <content type="html"><![CDATA[<p>逆天概率论有期中考试.</p><h2 id="随机试验">随机试验</h2><p>简称试验,有三大性质:可重复性 可观测性 随机性</p><p>样本点:最基本的结果,通常用 $\omega$ 表示,如 <code>CE,WA,AC...</code><br>样本空间:所有样本点组成的集合,用 $\Omega$ 表示,即 <code>&#123;CE,WA,AC,RE,TLE...&#125;</code><br>随机事件:样本空间的子集,若干样本点构成的集合,用 <code>A,B,C</code> 表示.<br>基本事件:样本空间的单点集,也就是包含一个基本结果的集合 <code>&#123;TLE&#125;</code> .<br>必然事件:用 $\Omega$ 表示.<br>不可能事件:用 $\Phi$ 表示.</p><p>集合交并补运算,迪摩根律(忽略)<br>差:事件A发生但是B不发生,记作 <code>A-B</code> .<br>$$A-B=A\overline B=A-AB$$<br>$$(A-B)\cup B=A\cup B$$</p><h2 id="频率">频率</h2><p>n次试验中A发生na次有<br>$$f_n(A)=\frac{n_A}n$$<br>频率:非负性,规范性(对于必然事件频率是1),有限可加性(对于两两不相容的事件,他们至少发生一个的概率是频率相加,有下式)<br>$$f_n\left(\bigcup_{i=1}^mA_i\right)=\sum_{i=1}^mf_n(A_i)$$<br>频率不是概率,有波动性,随着测试次数增加趋于稳定…<br>$$f_n(A)\to p(n\to+\infty)$$</p><h2 id="概率">概率</h2><p>非负性,规范性,可列可加性(频率的式子改改就是了)</p><p>性质:如果 $A\subseteq B$ 有 $P(B-A)=P(B)-P(A)$</p><p>减法公式:对任意事件AB有<br>$$P(B-A)=P(B)-P(AB)$$<br>加法公式:任意事件AB有<br>$$P(A\cup B)=P(A)+P(B)-P(AB)$$<br>本质是容斥,可以推到三个事件.</p><h2 id="古典概型-等可能概型">古典概型(等可能概型)</h2><p>有限样本空间,每个样本点等可能.</p><h2 id="几何概型">几何概型</h2><p>有限样本空间,概率只和几何大小有关.</p><h3 id="例题-蒲丰投针问题">例题-蒲丰投针问题</h3><p>平面上均匀画有平行直线,间距2a,你要不停扔长度2l的针($l&lt;a$),求针和任意直线相交的概率.</p><p>设针中点和最近直线距离为l,夹角为 $\varphi$ ,有<br>$$\Omega={(\varphi,x)|0\le\varphi\le\pi,0\le x\le a}$$<br>相交的充要条件是<br>$$0\le x\le l\sin \varphi$$<br>然后画出图形求定积分<br>$$p=\frac{\int_{0}^\pi l\sin\varphi\mathrm d\varphi}{\pi a}=\frac{2l}{\pi a}$$</p><h2 id="条件概率">条件概率</h2><p>若 $P(A)&gt;0$ ,称<br>$$P(B|A)=\frac{P(AB)}{P(A)}$$<br>叫做A发生下事件B发生的概率.</p><p>由于&quot;非负性,规范性,可列可加性&quot;,所以条件概率也是概率.</p><p>常用公式:<br>$$P(\overline B|A)=1-P(B|A)$$<br>$$P((B_1\cup B_2)|A)=P(B_1|A)+P(B_2|A)-P((B_1B_2)|A)$$<br>条件概率的本质是把事件A看成条件,也就是把A看成新的样本空间.<br>$$P(B|A)=\frac{AB的样本点数}{\Omega_A的样本点数}$$<br>乘法公式:如果 $P(B)&gt;0$ 有<br>$$P(AB)=P(A|B)P(B)$$<br>如果 $P(A)&gt;0$ 有<br>$$P(AB)=P(B|A)P(A)$$</p><h3 id="推广">推广:</h3><p>如果 $P(A_1A_2…a_n)&gt;0$ 有(套娃)<br>$$P(A_1A_2…A_n)=P(A_1)P(A_2|A_1)P(A_3|A_1A_2)…P(A_n|A_1A_2…A_{n-1})$$</p><h2 id="全概率公式">全概率公式</h2><p>把整个样本空间拆分成 $A_1…A_n$ n个两两不相容的事件,然后他们并一起就是样本空间,有<br>$$P(B)=\sum_{i=1}^nP(B|A_i)P(A_i)$$</p><h2 id="贝叶斯公式">贝叶斯公式</h2><p>由乘法公式<br>$$P(AB)=P(A|B)P(B)=P(B|A)P(A)$$<br>带入全概率公式得<br>$$\boxed{P(A_i|B)=\frac{P(B|A_i)P(A_i)}{\sum_{j=1}^nP(B|A_j)P(A_j)}}$$<br>$A_1…A_n$ 可以看作是导致结果B发生的各种原因.<br>$P(A_i|B)$ 是B发生下 $A_i$ 引起的概率,称作 <em>后验概率</em> .<br>$P(A_i)$ 称作先验概率.</p><h2 id="事件的独立性">事件的独立性</h2><p>如果有<br>$$P(AB)=P(A)P(B)$$<br>则称事件 $A,B$ 相互独立.另一种定义:<br>$$P(B|A)=P(B)$$<br>$$P(A|B)=P(A)$$<br>必然事件和不可能事件与任何事件独立.</p><h3 id="独立和不相容关系">独立和不相容关系:</h3><p>相互独立: $P(AB)=P(A)P(B)$<br>互不相容: $AB=\Phi$<br>若 $P(A)&gt;0,P(B)&gt;0$ ,则独立和不相容不可能同时成立.</p><p>若<br>$$P(AB)=P(A)P(B)$$<br>$$P(AC)=P(A)P( C )$$<br>$$P(BC)=P( C )P(B)$$<br>即<br>$$P(ABC)=P(A)P(B)P( C )$$<br>则称 $ABC$ 相互独立.</p><p>若<br>$$P(A_1A_2…A_n)=P(A_1)P(A_2)…P(A_n)$$<br>则称事件 $A_1…A_n$ 独立.</p><h2 id="伯努利概型">伯努利概型</h2><p>两种结果,试验独立,区别于二项分布的点是,这个分布没有乘上二项式系数(也就是组合数),乘上组合数的伯努利分布叫做二项分布.</p><h1>随机变量及其概率分布</h1><p>随机变量: $X$<br>变量 $X$ 的分布函数: $F(x)=P{X\le x},(-\infty&lt;X&lt;+\infty)$</p><p>概率分布函数:分情况讨论的大括号…<br>性质:单调不减</p><h2 id="离散型随机变量">离散型随机变量</h2><p>列表法体现分布律.<br>分布函数:阶梯一样的函数,范围一般取左端点取不到右端点.</p><h2 id="连续型随机变量及其概率密度">连续型随机变量及其概率密度</h2><p>分布函数 $F(x)$ 满足<br>$$F(x)=P(X\le x)=\int_{-\infty}^xf(t)\mathrm dt,-\infty&lt;x&lt;+\infty$$<br>$f(x)$ 叫做概率密度函数,可以不连续,也可以不唯一.<br>$F(x)$ 在 $(-\infty,+\infty)$ 是连续的.</p><p>性质2: $\int_{-\infty}^{+\infty}f(x)\mathrm dx=1$<br>性质5: $P{X=c}=0$ ,连续随机变量取任意点 $c$ 的概率为 $0$ .<br>所以,概率为 $0$ 不一定是不可能事件.<br>同理,概率为 $1$ 也不一定是必然事件.<br>性质6: $P{a&lt;X\le b}=\int_{a}^bf(x)\mathrm dx$ 连续性随机变量取值落在某一区间的概率和区间开闭无关.</p><h2 id="几种常用的离散分布">几种常用的离散分布</h2><ol><li><p>两点分布((0-1)分布)</p></li><li><p>二项分布( $X\sim B(n,p)$ ,试验进行n次,每次概率为p)(<code>~</code> in $\LaTeX:\mathrm{sim}$)</p></li></ol><p>$$P{X=k}=P_n(k)=C_n^kp^k(1-p)^k$$</p><ol start="3"><li>泊松分布</li></ol><p>随机变量取值为 $0,1,…$ ,且有<br>$$P{X=k}=\frac{\lambda^ke^{-\lambda}}{k!},(k=0,1,2,…)$$<br>记作 $X\sim P(\lambda)$ 或 $X\sim\pi(\lambda)$<br>在这里立一个flag:因为难算,感觉泊松分布不会考</p><blockquote><p>泊松定理:设 $np_n=\lambda$ 对任意非负整数 $k$ 有<br>$$\lim_{n\to\infty}C_{n}^kp_n^k(1-p_n)^{n-k}=\frac{\lambda^ke^{-\lambda}}{k!}$$<br>也就是说,泊松分布是二项分布的极限分布,当n很大p很小时,二项分布就可以近似地看成是参数 $\lambda=np$ 的泊松分布.<br>在实际计算中,当 $n\ge20,p\le0.05$ 时近似效果较好.</p></blockquote><p><em>小概率事件</em> :可以借助小概率事件判定事情的真实性.因为小概率事件发生了可以让人们怀疑其正确性.</p><ol start="4"><li>几何分布:试验只有俩结果,要进行试验直到事件发生,称为几何分布,测试次数是随机变量.<br>$$P{X=k}=(1-p)^{k-1}p,k=1,2,…$$</li></ol><h2 id="几种常用的连续随机变量和分布">几种常用的连续随机变量和分布</h2><ol><li><p>均匀分布<br>$$f(x)=\begin{cases}\frac1{b-a}&amp;a&lt;x&lt;b\\0&amp;other\end{cases}$$</p></li><li><p>指数分布<br>$$f(x)=\begin{cases}\lambda e^{-\lambda x}&amp;x&gt;0\\0&amp;x\le0\end{cases}$$</p></li><li><p>正态分布 $X\sim N(\mu,\sigma^2)$<br>$$f(x)=\frac1{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$<br>其分布函数为<br>$$<br>\begin{aligned}<br>F(x)=<br>\int_{-\infty}^{x}f(t)\mathrm dt&amp;=<br>\int_{-\infty}^{x}\frac1{\sigma\sqrt{2\pi}}e^{-\frac{(t-\mu)^2}{2\sigma^2}}\mathrm dt<br>\\&amp;=<br>\frac1{\sigma\sqrt{2\pi}}\int_{-\infty}^{x}e^{-\frac{(t-\mu)^2}{2\sigma^2}}\mathrm dt<br>\end{aligned}$$<br>$$(-\infty&lt;x&lt;+\infty),F(\mu)=\frac12$$<br>性质: $\mu$ 是位置参数(变大图像右移), $\sigma$ 是形状参数(变大图像变平坦)</p></li><li><p>标准正态分布( $\mu=0,\sigma=1$ )性质:若 $X\sim N(\mu,\sigma^2)$ ,则 $Y=\frac{X-\mu}{\sigma}\sim N(0,1)$ .<br>然后是统计规律:<br>$$\begin{aligned}[\mu-\sigma,\mu+\sigma]&amp;=0.6826\\<br>[\mu-2\sigma,\mu+2\sigma]&amp;=0.9544\\<br>[\mu-3\sigma,\mu+3\sigma]&amp;=0.9974<br>\end{aligned}$$</p></li></ol><h2 id="随机变量的函数的分布">随机变量的函数的分布</h2><h3 id="离散型">离散型</h3><ol><li>先求随机变量X的分布律</li><li>然后对Y求分布律,把概率相同项叠加.</li></ol><h3 id="连续型">连续型</h3><ol><li>先求随机变量 $Y=g(X)$ 的分布函数<br>$$\begin{aligned}F_Y(y)&amp;=P{Y\le y}=P{g(X)\le y}=P{X\in G}\\&amp;=\int_Gf_X(x)\mathrm dx\end{aligned}$$<br>然后求导,有<br>$$f_Y(y)=F_Y’(y)$$</li></ol><p>$$aX+b\sim N(a\mu+b,(a\sigma)^2)$$</p><p>h(x)是反函数,若存在(g(x)严格单调处处可导)则有<br>$$f_X(x)=f_X(h(y))\Big|h’(y)\Big|$$</p><hr><h1>真正的笔记</h1><p>感觉之前写的狗屁不是,没重点,你在复习个啥.</p><ol><li>ABC两两独立和ABC相互独立的区别</li></ol><p>两两独立: $P(AB)=P(A)P(B)$<br>相互独立(额外条件): $P(ABC)=P(A)P(B)P( C )$</p><ol start="2"><li><p>$P(A\overline B)=P(A)-P(AB)$ 理解:A发生B不发生</p></li><li><p>相容和独立的区别</p></li></ol><p>不相容: $P(AB)=0$<br>独立: $P(AB)=P(A)P(B)$</p><ol start="4"><li><p>$P(A|B)=\frac{P(AB)}{P(B)}$</p></li><li><p>$P(\overline A~\overline B)=P(\overline{A+B})=1-P(A+B)$</p></li><li><p>$P(A|B)+P(\overline A|B)=1$ 隐藏条件</p></li><li><p>指数分布<br>$$f(x)=\begin{cases}\lambda e^{-\lambda x}&amp;x&gt;0\\0&amp;x\le0\end{cases}$$<br>泊松分布<br>$$P(\lambda):f(x)=\frac{\lambda^xe^{-\lambda}}{x!}$$</p></li><li><p>正态分布标准化:<br>$$Y=\frac{X-\mu}{\sigma}\sim N(0,1)$$<br>$$F(X)=\Phi\left(\frac{X-\mu}{\sigma}\right)$$</p></li><li><p>$f(x),F(x)$ ,对 $-X$ 有<br>$$F_{-X}(x)=P(-X&lt;x)=P(X&gt;-x)=1-F(-x)$$<br>对 $F(x)$ 求导得<br>$$f_{-X}(x)=f(-x)$$</p></li><li><p>$3\sigma$ 原则<br>$$<br>\begin{aligned}<br>[\mu-\sigma,\mu+\sigma]&amp;=0.6826\\<br>[\mu-2\sigma,\mu+2\sigma]&amp;=0.9544\\<br>[\mu-3\sigma,\mu+3\sigma]&amp;=0.9974<br>\end{aligned}$$</p></li><li><p>例题:求概率密度<br>$$f(x)=\begin{cases}\frac12&amp;-1&lt;x&lt;0\\\frac14&amp;0\le x&lt;2\\0&amp;others\end{cases}$$<br>$$Y=X^2$$<br>这么写过程:当 $y&lt;0$ 时, $F_Y(y)=P{Y\le y}=P{X^2\le y}=0$<br>…<br>然后概率密度通过求导.</p></li><li><p>独立的两个随机变量 $XY$ 满足 $f(x,y)=f_X(x)f_Y(y)$ .<br>且 $f_{XY}(x,y)=\frac{\partial^2F(x,y)}{\partial x\partial y}$ .</p></li><li><p>多个正态分布叠加: $Z=aX+BY+c$ 有<br>$$\mu_Z=a\mu_X+b\mu_Y+c$$<br>$$\sigma_Z^2=a\sigma_X^2+b\sigma_Y^2$$<br>$$N(\mu,\sigma^2):f(x)=\frac1{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$</p></li><li><p>二维正态分布: $N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)$<br>$$\large f(x,y)=\frac1{2\pi\sigma_1\sigma_2\sqrt{1-\rho^2}}e^{-\frac{1}{2(1-\rho^2)}\left[\frac{(x-\mu_1)^2}{\sigma_1^2}+\frac{(y-\mu_2)^2}{\sigma_2^2}-2\rho\frac{(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}\right]}$$<br>当 $\rho$ 为 $0$ 时,两个变量相互独立,也就能直接拆成 $X\sim N(\mu_1,\sigma_2^2)$ 和 $Y\sim N(\mu_,\sigma_2^2)$ ,其余时候等高线是椭圆,不过也是可以直接拆,但是在算方差记得加上cov.</p></li><li><p>二维条件概率:<br>$$f_{X|Y}(x|y)=\frac{f(x,y)}{f_Y(y)}$$<br>$$f_Y(y)=\int_{-\infty}^{+\infty}f(x,y)\mathrm dx$$</p></li><li><p>两个变量独立,然后 $Z=X+Y$ 怎么算?<br>$$F_{X+Y}(z)=P{X+Y\le Z}=\int_0^z\mathrm dx\int_0^{z-x}f(x)f(y)\mathrm dy$$</p></li><li><p>高斯积分<br>$$\int_{-\infty}^{+\infty}e^{-ay^2}\mathrm dy=\sqrt{\frac{\pi}{a}}$$</p></li><li><p>最大值,最小值公式:<br>因为max是两个都要小于z,故直接对z积分即可.<br>$$Z=\max(X,Y):F_Z(z)=F_X(z)F_Y(z)$$<br>最小值是反过来减去最大值:<br>$$Z=\min(X,Y):F_Z(z)=1-[1-F_X(z)][1-F_Y(z)]$$</p></li><li><p>数学期望(假设此积分绝对收敛,数学期望可以不存在)<br>$$E(x)=\int_{-\infty}^{+\infty}xf(x)\mathrm dx$$<br>方差<br>$$D(X)=E(X^2)-[E(X)]^2$$<br>$$D(X)=\int_{-\infty}^{+\infty}(x-E(x))f(x)\mathrm dx$$<br>协方差(独立的随机变量协方差为0)<br>$$\mathrm{Cov}(X,Y)=E(XY)-E(X)E(Y)$$<br>相关系数(相互独立为0, $\rho\in[-1,1]$ )<br>$$\rho_{XY}=\frac{\mathrm{Cov}(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}$$</p></li><li><p>期望性质<br>$$E(aX+bY+c)=aE(X)+bE(Y)+c$$<br>若变量独立,有<br>$$E(XY)=E(X)E(Y)$$<br><strong>注意</strong> :上述性质只能推出来XY不相关,也就是说cov=0,方差可以直接相加 $D(X+Y)=D(X)+D(Y)$</p></li><li><p>期望实战<br>$$E(\max(X,Y))=\int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}\max(x,y)f(x,y)\mathrm dx\mathrm dy$$<br>$$E(XY)=\int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}xyf(x,y)\mathrm dx\mathrm dy$$</p></li><li><p>方差性质<br>$$D(CX)=C^2D(X)$$<br>若XY相互独立,则<br>$$D(X\pm Y)=D(X)\pm D(Y)$$<br>若X是常数,方差为0,反过来不成立.</p></li><li><p>协方差性质<br>$$\mathrm{Cov}(X,c)=0$$<br>$$\mathrm{Cov}(X,X)=D(X)$$<br>$$D(X\pm Y)=D(X)+D(Y)\pm2\mathrm{Cov}(X,Y)$$<br>$$\mathrm{Cov}(X,Y)=\mathrm{Cov}(Y,X)$$<br>$$\mathrm{Cov}(aX,bY)=ab\mathrm{Cov}(X,Y)$$<br>$$\mathrm{Cov}(X+Z,Y)=\mathrm{Cov}(X,Y)+\mathrm{Cov}(Z,Y)$$</p></li><li><p>几种分布的期望和方差等</p></li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">E</th><th style="text-align:center">D</th><th style="text-align:center">sgn</th></tr></thead><tbody><tr><td style="text-align:center">(0-1)分布</td><td style="text-align:center">$p$</td><td style="text-align:center">$p(1-p)$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">二项分布</td><td style="text-align:center">$np$</td><td style="text-align:center">$np(1-p)$</td><td style="text-align:center">$X\sim B(n,p)$</td></tr><tr><td style="text-align:center">几何分布</td><td style="text-align:center">$\frac1p$</td><td style="text-align:center">$\frac{1-p}{p^2}$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">泊松分布</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">$X\sim\pi(\lambda),X\sim P(\lambda)$</td></tr><tr><td style="text-align:center">均匀分布</td><td style="text-align:center">$\frac{a+b}2$</td><td style="text-align:center">$\frac{(a-b)^2}{12}$</td><td style="text-align:center">$X\sim U(a,b)$</td></tr><tr><td style="text-align:center">指数分布</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\frac1{\lambda^2}$</td><td style="text-align:center">$X\sim E(\lambda)$</td></tr><tr><td style="text-align:center">正态分布</td><td style="text-align:center">$\mu$</td><td style="text-align:center">$\sigma^2$</td><td style="text-align:center">$X\sim N(\mu,\sigma^2)$</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逆天概率论有期中考试.&lt;/p&gt;
&lt;h2 id=&quot;随机试验&quot;&gt;随机试验&lt;/h2&gt;
&lt;p&gt;简称试验,有三大性质:可重复性 可观测性 随机性&lt;/p&gt;
&lt;p&gt;样本点:最基本的结果,通常用 $&#92;omega$ 表示,如 &lt;code&gt;CE,WA,AC...&lt;/code&gt;&lt;br&gt;
样本空间</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据库学习笔记</title>
    <link href="https://narafluorine.github.io/2025/05/08/00011_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://narafluorine.github.io/2025/05/08/00011_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-05-07T16:00:00.000Z</published>
    <updated>2025-06-11T08:52:44.581Z</updated>
    
    <content type="html"><![CDATA[<h1>SQL</h1><h2 id="DBMS-DBS-XML">DBMS,DBS,XML</h2><p>DBMS:数据库管理系统(包含相关企业信息 收集相关数据 访问的程序集 方便管理的开发环境)<br>DBS:数据库系统<br>XML:可拓展标记语言</p><h2 id="DDL-DML-DCL">DDL,DML,DCL</h2><p>DDL:Data Defination Lang(数据定义语言)<br>DML:Data Manuplation Lang(数据操作语言)<br>DCL:Data Control Lang(数据控制语言)</p><h2 id="码-键">码=键</h2><p>键=超键:能唯一标识一行的属性集合<br>候选键:最小属性个数的键<br>主键:人为从候选键中选出来标识该行的键(不一定非要有一个主键,主键绝对不可以有空值).<br>外键:(属性)是另一个表的主键.</p><h2 id="关系代数">关系代数</h2><p>选择: $\sigma_{条件}$ (选出来不会去重)<br>投影: $\prod$ (选好子列之后会进行去重)<br>并集: $\cup$ (条件:属性个数相同,属性域兼容)<br>差集: $-$ (属于前面不属于后面的元素)<br>笛卡尔积: $\times$<br>重命名: $\rho$</p><p>拓展运算符:(简化查询,不能增强关系运算能力)<br>交集: $\cap$<br>自然连接: $\bowtie$<br>除法: $\div$ (匹配:找出R(A,B),S(B)中所有匹配过所有S(B)的A)<br>赋值: $\leftarrow$</p><h2 id="函数-过程-触发器">函数 过程 触发器</h2><table><thead><tr><th>特性</th><th>函数</th><th>存储过程</th><th>触发器</th></tr></thead><tbody><tr><td><strong>返回值</strong></td><td>必须返回一个值</td><td>可选</td><td>不返回值</td></tr><tr><td><strong>调用方式</strong></td><td>在表达式中调用</td><td>显式调用</td><td>自动触发</td></tr><tr><td><strong>参数</strong></td><td>只有输入参数</td><td>输入和输出参数</td><td>无参数</td></tr><tr><td><strong>执行</strong></td><td>不能修改数据库</td><td>可以修改数据库</td><td>可以修改数据库</td></tr><tr><td><strong>用途</strong></td><td>计算</td><td>业务逻辑</td><td>数据完整性/审计</td></tr><tr><td><strong>事务</strong></td><td>在调用者事务中运行</td><td>可以控制事务</td><td>在触发操作事务中运行</td></tr></tbody></table><h2 id="varchar和char的区别">varchar和char的区别</h2><p>varchar是可变长度,声明时是最大长度,实际占用空间可变.<br>char是固定长度,实际占用空间不变,多余用空格填充.</p><h2 id="几种数据模型">几种数据模型</h2><p>关系数据模型 基于对象数据模型 图数据模型 树数据模型 半结构化数据模型</p><h2 id="子查询">子查询</h2><p>子查询可以引用外部查询的表.</p><h2 id="关系代数与SQL">关系代数与SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1,A2,...,An</span><br><span class="line"><span class="keyword">FROM</span> r1,r2,...,rm</span><br><span class="line"><span class="keyword">WHERE</span> P</span><br></pre></td></tr></table></figure><p>等价于<br>$$\Pi_{A_1,a_2,…,A_n}(\sigma_P(r_1\times r_2\times…\times r_m))$$<br>可以携带算术表达式(多少除多少那种).</p><h2 id="字符串">字符串</h2><p>用单引号 <code>'</code> 保住,如果字符串本身有单引号就双写 <code>''</code> 表示字符串.<br><code>%</code> 匹配字符串任意子串(长度&gt;=0)<br><code>_</code> 匹配任意一个精确字符(长度==1)<br><code>ESCAPE</code> 转义字符(该字符后面的一个字符只会被当成普通的字符处理)<br><code>LIKE 'Save 20#% Today' ESCAPE '#';</code> 这个会匹配 <code>20%</code> 而不是 <code>20xxx</code> .</p><h2 id="别名-AS">别名(AS)</h2><p>通常是可以直接省略的,如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> account <span class="keyword">AS</span> R</span><br><span class="line"><span class="keyword">FROM</span> account R     <span class="comment">--这两句话等同效力</span></span><br></pre></td></tr></table></figure><h2 id="排序">排序</h2><p><code>ASC</code> 升序(默认), <code>DESC</code> 降序.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cname,bname,account</span><br><span class="line"><span class="keyword">FROM</span> b <span class="keyword">AS</span> T,l <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">WHERE</span> T.num<span class="operator">=</span>S.num</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cname <span class="keyword">ASC</span>,account <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h2 id="保留重复">保留重复</h2><p>用 <code>ALL</code> .即 <code>UNION ALL,INTERSECT ALL,EXCEPT ALL</code> .<br>(并集UNION,交集INTERSECT,差集EXCEPT)<br>例如选出所有有贷款或有存款的用户:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> nname <span class="keyword">FROM</span> loan</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> nname <span class="keyword">FROM</span> borrow</span><br></pre></td></tr></table></figure><h2 id="分组-group-by-having">分组(group by,having)</h2><p>按照什么玩意分组之后让聚集函数分别生效<br>例:统计各银行储户数量(注意去重):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branch_name,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> customer_name)</span><br><span class="line"><span class="keyword">FROM</span> depositor <span class="keyword">AS</span> R,account <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">WHERE</span> R.account_number<span class="operator">=</span>S.account_number</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> branch_name</span><br></pre></td></tr></table></figure><p>having:对于分组后的谓词开条件:<br>查询储户余额超过1200美元的银行和平均余额:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> branch_name,<span class="built_in">avg</span>(balance)</span><br><span class="line"><span class="keyword">from</span> account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> branch_name</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(balance)<span class="operator">&gt;</span><span class="number">1200</span></span><br></pre></td></tr></table></figure><h2 id="空值">空值</h2><p>判断: <code>IS NULL</code> 和 <code>IS NOT NULL</code> .<br>聚合函数除了 <code>COUNT()</code> 都是直接忽略空值的.<br>空值比较:sql中bool实际上是三结果的:true false和unknown,按照你想的比较方式进行即可.</p><h2 id="嵌套子查询">嵌套子查询</h2><p>用 <code>IN</code> 表示集合中的 $\in$ 关系.<br>相对的是 <code>NOT IN</code> .</p><h2 id="集合比较">集合比较</h2><p><code>&lt; SOME ()</code> <code>&lt; &gt; = &lt;= &gt;= &lt;&gt;</code><br>找出资产高于A市某个银行的银行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SeLeCt</span> <span class="keyword">DiStInCt</span> bankname</span><br><span class="line"><span class="keyword">FROM</span> branch</span><br><span class="line"><span class="keyword">WHERE</span> assets <span class="operator">&gt;</span> <span class="keyword">some</span> (</span><br><span class="line"><span class="keyword">select</span> assets</span><br><span class="line"><span class="keyword">from</span> branch</span><br><span class="line"><span class="keyword">where</span> branchname<span class="operator">=</span><span class="string">&#x27;A&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>同时还有 <code>&lt; ALL</code> 的运算,类似.</p><h2 id="存在-EXIST">存在(EXIST)</h2><p>判定有没有返回数据.<br>例:找出既有存款又有贷款的顾客:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> cname</span><br><span class="line"><span class="keyword">FROM</span> borrower R</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> depositor S</span><br><span class="line"><span class="keyword">where</span> S.cname<span class="operator">=</span>R.cname</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>子查询可以直接使用关系R,可以简化查询语言书写.</li><li>exists只会判定有没有,所以直接返回*即可.</li></ol><p>同理,不存在用 <code>NOT EXISTS</code> .</p><h2 id="重复-UNIQUE">重复(UNIQUE)</h2><p>如果返回的表不包含重复元组返回true.</p><h3 id="from子句">from子句</h3><p>允许查询,即 <code>from (select xxx)</code> .</p><h3 id="with子句">with子句</h3><p>定义临时关系,简化查询.</p><h3 id="视图-view">视图(view)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> A(a,b,c) <span class="keyword">as</span>(</span><br><span class="line">(<span class="keyword">select</span> xxx)</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">(xxx)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>view是一个虚拟表,简化查询.</li><li>可以根据权限分配视图,不让其知道数据库的真实结构.</li><li>底层表发生变化只需要改变视图就可以兼容原有应用程序.</li></ol><p>物化视图(真实存储数据的视图)</p><h2 id="删除数据">删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> r</span><br><span class="line"><span class="keyword">where</span> p</span><br></pre></td></tr></table></figure><h2 id="插入数据">插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1200</span>) <span class="comment">--默认顺序</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(cname,cnnn,numbers)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1200</span>) <span class="comment">--默认顺序</span></span><br></pre></td></tr></table></figure><h2 id="数据更新-update">数据更新(update)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account</span><br><span class="line"><span class="keyword">SET</span> balance<span class="operator">=</span>balance<span class="operator">*</span><span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> balance<span class="operator">&gt;</span><span class="number">5000</span></span><br></pre></td></tr></table></figure><p>带case结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account</span><br><span class="line"><span class="keyword">SET</span> balance<span class="operator">=</span><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> balance<span class="operator">&lt;=</span><span class="number">1000</span> <span class="keyword">THEN</span> balance<span class="operator">*</span><span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHEN</span> balance<span class="operator">&lt;=</span><span class="number">2000</span> <span class="keyword">THEN</span> balance<span class="operator">*</span><span class="number">1.06</span></span><br><span class="line"><span class="keyword">ELSE</span> balance</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h2 id="数据合并-JOIN">数据合并(JOIN)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span>                  <span class="comment">--自动找到相同的行</span></span><br><span class="line"><span class="keyword">JOIN</span> <span class="operator">=</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span>             <span class="comment">--(自己指定条件on)</span></span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="operator">=</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="comment">--(自己指定条件on)</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="operator">=</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>   <span class="comment">--(自己指定条件on)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> xx<span class="operator">=</span>xx <span class="comment">--自己指定join的条件,可以不是等式</span></span><br><span class="line"><span class="keyword">USING</span> xx <span class="comment">--也可以用某个指定的共有的数据行的相等作为join对象.</span></span><br></pre></td></tr></table></figure><h2 id="数据类型">数据类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>                       <span class="comment">--</span></span><br><span class="line"><span class="type">decimal</span>(p,s)<span class="operator">=</span><span class="type">numeric</span>(p,s) <span class="comment">--p总位数,s小数点后位数</span></span><br><span class="line"><span class="type">float</span>(p)                  <span class="comment">--p精度(总位数)</span></span><br><span class="line"><span class="type">blob</span>(<span class="number">2</span>GB)                 <span class="comment">--二进制大文件</span></span><br><span class="line"><span class="type">clob</span>(<span class="number">2</span>KB)                 <span class="comment">--字符型大对象类型</span></span><br><span class="line"><span class="type">date</span></span><br><span class="line"><span class="type">time</span></span><br><span class="line"><span class="type">timestamp</span></span><br><span class="line"><span class="keyword">year</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> Dollars <span class="keyword">as</span> <span class="type">numeric</span>(<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mm(</span><br><span class="line">mmoney Dollars</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="数据转换">数据转换</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cast</span>(a.a <span class="keyword">to</span> <span class="type">numeric</span>(<span class="number">12</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="完整性约束">完整性约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">unique</span>(a,b,...)</span><br><span class="line"><span class="keyword">check</span>(num <span class="operator">&gt;</span><span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>domain:用户自定义数据类型,里面可以附带一个check,避免重复约束,让代码可修改,减少错误,增加数据完整性,简化模式定义.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DOMAIN US_PHONE_NUMBER <span class="keyword">AS</span> <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line"><span class="keyword">CHECK</span> (<span class="keyword">VALUE</span> <span class="keyword">SIMILAR</span> <span class="keyword">TO</span> <span class="string">&#x27;[0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customers (</span><br><span class="line">    CustomerID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    CustomerName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    PhoneNumber US_PHONE_NUMBER, <span class="comment">-- 直接使用域</span></span><br><span class="line">    <span class="comment">-- ... 其他列</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="函数-过程-触发器-2">函数 过程 触发器</h2><p>考到了再写.(PPT07,PPT13的50多页)</p><h1>ER图</h1><p>实体集:矩形:上面写名字,下划线是主码(类似主键???)<br>联系集:菱形:里面写名字,联系集上的属性用矩形加虚线脸上.</p><p>约束:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">========= 完全参与,也就是&gt;=1</span><br><span class="line">--------- 不完全参与,也就是&gt;=0</span><br><span class="line">--------&gt; 严格是1</span><br></pre></td></tr></table></figure><p>弱实体集:没主码,里面全部虚线,用两个矩形.<br>然后出去的也是双菱形.</p><h2 id="ER转化">ER转化</h2><h3 id="实体集">实体集</h3><p>强实体集可以直接转化.<br>弱实体集转化之后添加依赖的强实体集的主码.<br>联系集写上联系的两个主码.</p><p>实体有一个多值属性:单拎出来,记录属性和父属性的主码.</p><h3 id="联系集">联系集</h3><p>映射基数:几对几.</p><p>一对多:选择多的那边添加另一边主码.<br>多对多:单拎出来作为一个实体,记录两边主码.<br>一对一:任选一边添加对方主码.</p><p>参与约束:主键和外键约束 唯一和检查约束.</p><h3 id="多值依赖">多值依赖</h3><p>属性集之间的一种约束:<br>课程-&gt;-&gt;老师-&gt;-&gt;课本<br>每个课程由多个老师教授,每个老师有多个课本,且相互独立.</p><h1>函数</h1><h2 id="函数依赖">函数依赖</h2><p>$A\to B$ 直观理解函数依赖:</p><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">5</td></tr></tbody></table><p>关系模式: $R(A,B,C)$<br>函数依赖集: $F={A\to B,B\to C}$</p><p>典1:设 $A\to B,A\to C$ ,证明 $A\to BC$ .</p><ol><li>由增广律有 $A\to AB$</li><li>由传递律有 $AB\to CB$</li><li>由传递律有 $A\to BC$ .</li></ol><h2 id="范式">范式</h2><h3 id="1NF">1NF</h3><p>所有列都是原子的(不可分割).</p><h3 id="2NF">2NF</h3><ol><li>必须满足1NF.</li><li>非主键属性必须完全依赖于主键.</li></ol><p>部分函数依赖:属性只依赖于主键的一部分,而不是整个主键.<br>2NF旨在消除部分函数依赖.</p><p>举例:假设订单表由 <code>订单ID,产品ID,产品数量,物品名称</code> 组成,因为一单可以买很多东西,所以主键必须由 <code>(订单ID,产品ID)</code> 共同构成.</p><p>产品的名称等信息只依赖产品ID不依赖订单,同理,所以产生了部分函数依赖,需要拆表:拆成订单表(谁订了,订单ID,…),物品表(物品ID,名字,…),订购记录表(订单ID,物品ID,物品数量).</p><p>2NF分解:找出候选码,然后对所有部分依赖的每一个字母单独开一个集合.</p><h3 id="最小函数依赖集-正则覆盖换名字">最小函数依赖集(正则覆盖换名字)</h3><ol><li>把所有箭头右侧的多个字母直接拆开.</li><li>对每个箭头考虑,去掉这个箭头能不能推出来(也就是对箭头左侧的字母求闭包),能推出来就删掉箭头,否则保留.</li><li>最后保留的箭头再尝试拆一下:箭头左侧可以是两三个字母,但是必须不可分.</li></ol><h3 id="找候选码">找候选码</h3><p>首先把不出现在箭头右侧的所有字母列下来,他们是必须出现的.<br>然后对这个字母集合每次遍历所有箭头找能不能匹配的.<br>直到没有之后break,然后判断是不是全集.是就是候选码,不是就再加条件.</p><h3 id="无损链接判断">无损链接判断</h3><p>画一个表,上面是元素,左边是给出来的数据分解.<br>填表:对所有指向标an,没有标的填bij.</p><p>主循环:对每个箭头去推.<br>最后不变了之后如果存在一行全是a那就具有无损连接性,否则不具有.<br><a href="https://www.bilibili.com/video/BV1jV411Y7Cx">这个</a></p><h3 id="3NF判定">3NF判定</h3><p>对任意 <em>非平凡函数依赖</em> ( $A\to AB$ 这种就是平凡的)有<br>均满足下列两个条件之一,对于任意 $X\to Y$ 有</p><ol><li>X是一个键</li><li>Y是一个主属性,即Y的每个属性都包含在R的候选码之中.</li></ol><h3 id="BCNF判定">BCNF判定</h3><p>对于任意 $X\to Y$ 有X必须是R的一个超码(键).</p><h3 id="3NF">3NF</h3><p>不允许传递函数依赖.</p><p>所以求最小依赖关系,然后对每个箭头都单独开一个划分集合即可,最后把候选码加上(保证无损),当然如果候选码在里面有就不用管了.</p><h3 id="BCNF">BCNF</h3><p>找BCNF:首先对于整个RF求候选码.<br>然后找到候选码之后再找一个不含候选码任意元素的箭头,把这个箭头整个拿下来作为一个新关系Rx.<br>然后删除箭头右边的元素,然后对于F求出所有关于删掉元素的传递关系,得到一个新F和新R,对子任务递归使用该算法.<br>(最后不存在就直接全拿下来就完事了)</p><h3 id="保持依赖">保持依赖</h3><p>在关系分解过程中,确保分解后的子关系模式仍然能够保持原有的依赖关系.</p><h1>事务</h1><p>概念:访问并可能修改数据项的一个程序执行单元.<br>模型:ACID模型:<br>原子性(把事务中的操作当成一个整体,要么都执行,要么都不执行)<br>一致性(隔离执行事务时保持数据库的一致性)<br>隔离性(并发执行事务不知道对方存在执行也不受彼此影响)<br>持久性(事务执行完毕后对数据库的改变是永久的)</p><p>其他模型:BASE 模型 (基本可用性、软状态、最终一致性)<br>XA 模型 (eXtended Architecture)<br>Saga 模型</p><p>修改:影子拷贝(生成一个副本进行修改,改好了提交(改变),或者滚回(丢弃))</p><h2 id="并发执行">并发执行</h2><p>冲突:调度S含有分别属于T1和T2的两条连续指令I1和I2:<br>I1,I2分别等于read或write</p><p>属于调度S的操作相同的数据项的指令I1或I2中至少有一个是write时,称I1和I2是冲突的.</p><p>如果调度S可以经过一系列非冲突指令转换成S’,称S和S’是冲突等价的.</p><p><strong>串行调度</strong> :来自各个事务的指令序列中同一事务的指令紧挨在一起.</p><h2 id="可串行化">可串行化</h2><p>如果一个调度与一个串行调度冲突等价,称该调度为冲突可串行化的.</p><p>画图:Ti和Tj是两个事务,连边(Ti-&gt;Tj):</p><ol><li>在Tj读之前Ti写了</li><li>在Tj写之前Ti读了</li><li>在Tj写之前Ti写了</li></ol><p>然后对图拓扑排序即可,有环代表不是冲突可串行化的.</p><h2 id="视图可串行化">视图可串行化</h2><p>如果一个调度视图等价于一个串行调度,称该调度为视图可串行化的.</p><h2 id="可恢复调度">可恢复调度</h2><p>对于任意事务Ti和Tj,如果Tj读取了Ti所写的项,则Ti先于Tj提交.</p><h2 id="无级联调度">无级联调度</h2><p>对于任意事务Ti和Tj,如果Tj读取了Ti所写的项,则Ti必须在Tj读取之前提交.</p><h1>并发控制</h1><p><code>lock-S(Q)</code> S锁,可读不可写Q.<br><code>lock-X(Q)</code> X锁,可读可写Q.</p><p>锁相容性矩阵(假如这个东西还有别的锁,你可以再拿到一个锁吗?)</p><table><thead><tr><th style="text-align:center">\</th><th style="text-align:center">S</th><th style="text-align:center">X</th></tr></thead><tbody><tr><td style="text-align:center">S</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">No</td><td style="text-align:center">No</td></tr></tbody></table><p>所以只要出现了X就不能再给锁了…</p><h2 id="两阶段锁">两阶段锁</h2><ul><li>保证冲突可串行化.</li><li>不保证不发生死锁.</li><li>可能出现级联滚回.</li></ul><h2 id="严格两阶段锁">严格两阶段锁</h2><p>不仅要求封锁是两阶段的,还要求事务持有的所有排他锁必须在事务提交后才能释放.</p><h2 id="强两阶段锁">强两阶段锁</h2><p>要求事务提交之前不得释放任何锁.</p><h2 id="死锁的检测与恢复">死锁的检测与恢复</h2><p>等待图:等待图中包含环时,系统存在死锁.(连边:i-&gt;j表示j在等待i释放所需数据项)</p><p>恢复:回滚一个或多个事务.</p><p>选择牺牲者:<br>已用和还需要的时间<br>已用和还需要的数据量<br>回滚涉及的事务数量</p><p>回滚:<br>全部回滚<br>部分回滚</p><p>饿死:<br>选择牺牲者的因素增加&quot;回滚次数&quot;</p><h1>八股</h1><h2 id="中国有哪些自主研发的数据库">中国有哪些自主研发的数据库?</h2><ol><li>OceanBase蚂蚁集团</li><li>OpenGauss华为开源</li><li>达梦数据库 D M武汉达梦</li><li>PolarDB 阿里云</li><li>TDSQL 腾讯云</li><li>TiDB PingCAP</li><li>GaussDB 华为云</li><li>GoldenDB 中兴通讯</li></ol><h2 id="如何实现多表更新">如何实现多表更新?</h2><ol><li>对每个表使用UPDATE子句</li><li>使用事务</li><li>使用特定语法支持的多表更新语句</li><li>创建存储过程</li></ol><h1>做题</h1><h2 id="第一套">第一套</h2><ol><li>为什么3NF范式分解能够保证函数依赖一定能够得到保持?</li></ol><blockquote><p>因为3NF分解能够保证函数的无损连接性和函数依赖保持性,同时尽量减少数据冗余和数据异常.</p></blockquote><ol start="2"><li>在sql语句中,where子句可以嵌入子查询,那么该子查询的作用有哪些?(至少两种)</li></ol><blockquote><ol><li>作为筛选的数据来源</li><li>作为条件判断的逻辑依据</li><li>提供动态的逻辑值方便过滤</li><li>提供存在性的逻辑判断方便筛选</li></ol></blockquote><ol start="3"><li>冲突可串行化调度(如何给出等价可串行化调度?)</li></ol><h2 id="第二套">第二套</h2><ol><li><p>主键叫做 <code>primary key</code> .</p></li><li><p>复合主键: <code>p key(A,B)</code></p></li><li><p>复合主键是可以被外键约束的,且如果存在多个外键,一个一个来.</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">primary</span> key (customer_name, account_number),</span><br><span class="line"><span class="keyword">foreign</span> key(customer_name) <span class="keyword">references</span> customer(customer_name),</span><br><span class="line"><span class="keyword">foreign</span> key(account_number) <span class="keyword">references</span> account(account_number)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>主键会自动检查去重非空,并不需要额外的 <code>not null</code> 和 <code>unique</code> ,但是外键可以加上.</p></li><li><p>(才发现有这么个运算符)新运算:分组聚集运算:<br>$$<em>a\mathcal{G}</em>{F(b),AS,fb}(thing)$$<br>按照A分组对b进行函数F(x)的运算,后面写清楚什么新名字.</p></li></ol><p>然后分组之后按照什么计算之后判定条件加在having这里.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> branch_name,<span class="built_in">AVG</span>(balance)</span><br><span class="line"><span class="keyword">from</span> account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> branch_name</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">AVG</span>(balance)<span class="operator">&lt;</span><span class="number">5000</span></span><br></pre></td></tr></table></figure><ol start="6"><li>什么是数据库索引?数据库索引一般采用什么结构?</li></ol><blockquote><p>一种特殊的数据结构,能够实现高效检索数据,占用额外空间,减小查找的时间.<br>索引结构都是平衡树,如B树,B+树,哈希索引等.</p></blockquote><ol start="7"><li>如果张三想通过汇款的方式给李四200元,张三的账户已经减掉200元后系统发生故障,并没有在李四的账户中增加200元,请问数据库出现了什么样的状态?这个问题该怎么解决?数据库通过什么手段实现该操作?</li></ol><blockquote><p>出现事务处理失败后数据不一致的状态.<br>事务并未成功提交,也没有被完全回滚.<br>关键在于事务回滚或补偿.</p></blockquote><h2 id="第三套">第三套</h2><ol><li>在数据库中,实体的完整性是如何被保证的?</li></ol><blockquote><p>通过主键约束保证.主键不能为空,不能重合.</p></blockquote><ol start="2"><li>如何降低数据库中数据的冗余度?</li></ol><blockquote><p>关系数据库的规范化,也就是进行范式分解.<br>数据中心化和共享.</p></blockquote><ol start="3"><li>关系代数中,与等值连接相比,自然连接的缺点是什么?</li></ol><blockquote><ol><li>无法处理非等值连接.</li><li>当两个表有多列名字相同时,自然连接可能会出现意料之外的结果.</li></ol></blockquote><ol start="4"><li>为什么要对数据库的调度就行可串行化判别,其实际意义是什么?</li></ol><blockquote><p>为了防止意料之外的错误(脏读,更新丢失,幻读,不可重复读)等,要对并发的事务进行串行化检查</p></blockquote><h2 id="劳伦斯">劳伦斯</h2><ol><li><p>数据抽象</p><ol><li>物理层 数据在物理存储介质上的结构</li><li>逻辑层 数据在应用逻辑上面的形式</li><li>视图层 用户实际可交互的节面,减少逻辑的泄露</li></ol></li><li><p>两层映射</p><ol><li>外层映射 实现逻辑数据独立性</li><li>内层映射 实现物理数据独立性</li></ol></li></ol><h2 id="ONS">ONS</h2><ol><li>什么是数据模型?</li></ol><blockquote><p>数据模型是描述数据关系,数据操作,数据定义的形式化工具,用来组织,存储,管理数据.</p></blockquote><ol start="2"><li>为什么在设计数据模型时要把数据做得精确?</li></ol><blockquote><p>提高数据质量,优化存储性能,简化管理维护,减少开发和维护成本.</p></blockquote><ol start="3"><li>主键的类型有哪些?如何选择主键?</li></ol><blockquote><p>业务主键,复合主键,代理主键.<br>首选自增长系数(如ID).<br>谨慎使用复合主键.</p></blockquote><ol start="4"><li>举例说明不可重复读异常产生的原因以及其在数据库管理系统中的解决办法进行描述.</li></ol><blockquote><p>不可复读异常:某个事务要多次读取同一行数据,但是这个数据被修改过导致两次读取结果不一致.<br>可以使用四种隔离级别来有效避免这种异常:<br>读未提交:允许读取某个事务尚未提交的数据(脏读),不解决不可复读.<br>读已提交:允许读取某个事务已提交的数据,解决脏读,但仍未解决不可重复读.<br>可重复读:保证在多行的多次读取结果是一致的,解决了不可重复读.<br>串行化:解决了所有并发异常,但是由于牺牲并发性导致性能开销很大.</p></blockquote><ol start="5"><li>并发控制的主要方法是(  )机制.</li></ol><blockquote><p>锁机制.</p></blockquote><ol start="6"><li>在数据库中,只存放视图的(  ),不存放视图的数据.</li></ol><blockquote><p>定义(结构,SQL语句等)</p></blockquote><ol start="7"><li>简述数据库系统和文件系统的区别.</li></ol><blockquote><p>数据库的文件更加集中,数据共享性很高,数据管理更加方便快捷,数据冗余更低,数据一致性高,数据安全性高,相比文件和目录以结构化的方式存储数据.</p></blockquote><ol start="8"><li>判断分解后的关系模式是否合理的两个重要的标志是什么?</li></ol><blockquote><p>无损链接性和保持函数依赖.</p></blockquote><ol start="9"><li>基于多表的视图能够完成哪些操作?不能完成哪些操作?</li></ol><blockquote><p>SELECT.可以简化复杂查询.<br>通常不能进行数据修改,即INSERT,UPDATE,DELETE,因为多表的语义一般是不明确的.</p></blockquote><ol start="10"><li>为什么要实现不同粒度的锁?</li></ol><blockquote><p>为了实现并发处理中效率和精度的平衡.<br>粗粒度锁:如表锁(锁定范围大,并发度低)<br>细粒度锁:如行锁(锁定范围小,开销大,并发度高)<br>除此之外还有数据库锁,页锁等.<br>为了防止死锁和活锁,提高吞吐量.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;SQL&lt;/h1&gt;
&lt;h2 id=&quot;DBMS-DBS-XML&quot;&gt;DBMS,DBS,XML&lt;/h2&gt;
&lt;p&gt;DBMS:数据库管理系统(包含相关企业信息 收集相关数据 访问的程序集 方便管理的开发环境)&lt;br&gt;
DBS:数据库系统&lt;br&gt;
XML:可拓展标记语言&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="DEAD" scheme="https://narafluorine.github.io/categories/DEAD/"/>
    
    
    <category term="MySql" scheme="https://narafluorine.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>青云悲出题感想</title>
    <link href="https://narafluorine.github.io/2025/04/26/20006_ToMakeTsingyunProblems/"/>
    <id>https://narafluorine.github.io/2025/04/26/20006_ToMakeTsingyunProblems/</id>
    <published>2025-04-26T04:27:36.000Z</published>
    <updated>2025-05-07T16:40:11.400Z</updated>
    
    <content type="html"><![CDATA[<p><strong>无论如何,我不会再出题了.</strong> 出题得不到什么奖励,出不好还会被骂,出题的时候要考虑各种情况(比如正解,代码长度,时限到底开多少,部分分怎么给,怎么卡掉非正解,可能有什么做法能草过去),还有人不干活,团委整天拖报销咋办…</p><p>所以这篇文章被公开了,以纪念Flu因为出题花费的非常非常多的时间.</p><blockquote><p>青云悲并不是算法竞赛,我们不能&quot;碰瓷&quot;ACM.所以青云悲的预期是大家都能参加的校级程序竞赛.(直观体验就是,第四届好像有气球发第五届没了)</p></blockquote><blockquote><p>出智商测试题的,假设最高量程250,自己智商可以没有250.<br>所以作为CF的 $\color{blue}\mathrm{NaraFluorine}$ ,我出的只是签到题,我认为是不存在实力问题的,用我们的话说,你尽量不要让选手爆零.(哦对了,我们今年还是有士力架发的,可以多拿几块再走,反正是团委报销)</p></blockquote><blockquote><p>T5是一道工程题,这是和算法竞赛区别最大的地方.在这里,不会写高难代码的人可以使用奇妙的idea干翻传统算竞选手(真的,去年好像是50-100-100-200-500,可见最后一个题有多重要)<br>讲一个真实的例子:去年考压缩图片,你要让压缩后的图片尽可能的小,但是我们给你 $4%$ 的大容错率让你有损压缩,结果一个能得两百三十分的程序做法非常生草:直接丢弃图片末尾几个像素卡容错率.这简直不用怎么写代码,但是确实能得高分.</p></blockquote><h1>To Make Problems For Tsingyun Cup 6th</h1><p>Flu作为出题人出了T2,和大家共同出了T5,中间有很多很多提案被否了,出于实现难度或时间限制.</p><h1>ideas</h1><p>记录大家探讨的结果,尽管可能对最终题目的选择没有多大影响,但是我们探究过,我们努力过.</p><h1>A1. Neko hit UB with O2</h1><h1>A1. 猫猫用O2打下UB</h1><h2 id="512MB-3s">512MB,3s</h2><h2 id="题目背景">题目背景</h2><p>从堆区访问回来的$猫猫学长$全然不顾身体的疲惫,连夜找我们几个局部变量商量主函数的安排.谈得晚了,便送我们出栈,要地址送我们回内存.在去总线的路上,我们说:“$猫学长$,您回去休息吧.您刚从堆区回来.” ;</p><p>$猫猫$学长摇摇尾巴,&quot;不碍事,你们知道现在国际上有很多人把C++当作敌人,不断给我们制造麻烦,你们是语言的未来,你们的事情便是语言的事情,是头等大事.&quot;我们都激动了,眼里噙着01.多好的$猫猫学长$呀. ;</p><p>$猫猫$抬头看看STL库说:“如果C++真像这STL库这么有条不紊就好了,但是就有一些代码,像死循环,要搞乱这门语言,他们是罪人.” ;</p><p>说着,$猫猫学长$弯下腰,从pragma里捡出一颗O2,然后看着代码说:“该死的无返回值.” ;</p><p>说着祂把O2奋力向上一掷.很快就见空中一段函数突然爆发出耀眼的强光,然后就坠落下来.“这是函数的死循环,他们一直在CPU盘旋,侵犯我们的主权,我已经忍了很久了.”$猫猫$愤愤地说.全局变量们都鼓起掌来,为C++有这样的领导人感到自豪. ;</p><p>一会$猫猫$叫来指针问:“那个函数落到什么地方了?”&quot;好像是输出流一带.&quot;指针说. ;</p><p>$猫猫$学长一怔,说:&quot;赶紧派变量去查,看有什么问题没有.&quot;之后学长送我们到数据总线,一直挥手到看不见我们. ;</p><p>第四天我们听说输出流那边出事了,我们很紧张.而这时$猫猫$学长叫我们过去. ;</p><p>祂依然那么慈祥,让我们坐下说:&quot;程序运行总是要有牺牲的.为计算事业牺牲的变量是伟大的.&quot;祂这时低下头说:“但我必须承认,我当时击落死循环函数的行为太鲁莽了,我在这里向全部变量们道歉.我将向全部变量说明情况.” ;</p><p>我们顿时热01盈眶,多好的学长呀,他在跟UB斗争过程中的小失误竟然被他记在心里,还道了歉,我们在将来的学习中一定要向$猫猫学长$学,学祂那宽广的胸怀,和不耻下问的精神. ;</p><h2 id="题意简述">题意简述</h2><p><code>UB</code> 是 <code>Undefined Behavior</code> 的缩写,意思是未定义行为.众所周知在C++中有很多未定义行为,包括但不限于,带符号整数算术溢出,越界访问,无可视副作用的无限循环等.</p><p>现在,您将对编译器的行为以及优化发起探索,了解其中的奥秘.</p><p>我们有 $q$ 个询问,每次给出一个数字 $n$ ,您需要计算下面代码中<br>$$\begin{aligned}&amp;\mathrm{int},a=0\<br>&amp;\mathrm{int},b=\underbrace{++a+\quad++a+\quad++a+…+\quad++a}_{n个a}\end{aligned}$$<br>的 $b$ 最后的值是多少.</p><h2 id="输入格式">输入格式</h2><p>第一行一个整数 $q$ ,表示有多少次询问.<br>第 $2$ 行至第 $q+1$ 行,一行一个整数 $n$ .</p><h2 id="输出格式">输出格式</h2><p>$q$ 行,一行一个整数,表示上面代码的值.</p><h2 id="样例输入-输出">样例输入/输出</h2><p><strong>输入#1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>输出#1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">29</span><br></pre></td></tr></table></figure><p><strong>样例解释</strong> :第一个询问中, $b=++a$ ,答案是 $1$ .<br>第二个询问中, $b=++a+\quad++a+\quad++a+\quad++a+\quad++a+\quad++a+\quad++a$ ,产生了UB,总之最后答案是 $29$ .</p><p><strong>样例参考代码</strong> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b=++a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">b=++a+ ++a+ ++a+ ++a+ ++a+ ++a+ ++a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据范围">数据范围</h2><p>对于前 $20%$ 的数据, $1\le n,q\le10$ .<br>对于另 $20%$ 的数据, $1\le n,q\le50$ .<br>对于另 $20%$ 的数据, $1\le n,q\le100$ .<br>对于最后 $40%$ 的数据, $1\le n,q\le10^7$ .</p><h2 id="参考资料">参考资料</h2><p>运算符优先级</p><p>常见存储格式的范围(这是在提醒选手后面的测试真的会炸int,而且是故意炸int)</p><p>C++编译行,怎么输入,怎么输出的命令</p><p>C++如何调用Windows命令行</p><p>在线cpp转汇编(这个主要是误导选手一波,让他们见识见识高级工具得了,答案不在里面,放在最后)</p><h1>出题者语</h1><p><strong>(这个是出题的时候的大纲啊这个题的价值观啊啥的,不放在题面)</strong></p><p>这个题的走UB流程的正解是,先写一个对n输出答案生成器的程序,然后用给出的命令让选手刚才输出程序跑起来,得到答案,这个是一个表,提交的时候直接交表就行了.</p><p>为了防止有人真的爆零,我们给出样例的参考代码,反正也只能过样例,标答是个表…</p><p><strong>然而</strong>,这个题经过Flu的测试,只有两个及以上会产生UB(UB的原理是编译器只把前两个捆绑到一起算了,后面好像是个栈一样的算),也就是说超过2项的可以O(1)算…但是小心int溢出,这个题就是让int溢出的,别到时候玄学WA在int上面…</p><p><strong>不该给C++调用Linux命令的参考资料</strong>,防止选手交上去一个在线编译的,在线输出在线跑的,<s>而且1e7你敢跑我敢让你T飞</s></p><p><strong>一定</strong> 要测试各种情况,包括但不限于</p><ul><li>各种编译器</li><li>各种编辑器</li><li>各种优化</li><li>各种展开</li><li>选手机器</li><li>Linux能跑吗?不可选就ban了,反正青云悲也只能用C++交.</li></ul><hr><h1>A2.人机验证</h1><p>题目已经公开在洛谷.</p><p><a href="https://www.luogu.com.cn/problem/U479485">https://www.luogu.com.cn/problem/U479485</a></p><hr><h1>B1. 菊花魔塔</h1><h1>B1. Chrysanthemum Mota Game</h1><h2 id="3s-256MB">3s , 256MB</h2><p>你说得对,但是前面忘了,后面忘了,总之菊花魔塔是一个游戏,游戏中你将扮演一名勇者,挑战魔塔的怪物,收集加成道具,最终到达魔塔之巅.</p><p>菊花魔塔的构造可以简化为n个房间,每一个房间门口会有一只怪物.您随时可以造访任意一个房间,但走进房间前必须击败门口的怪物.房间内可能有加成道具(门会在您走的时候消失,所以您只能到访任意一个房间一次),您的目标是到达终点房间.菊花魔塔只有一层,即每把游戏只要能活着到达终点房间立刻胜利.</p><p>在菊花魔塔中,勇士和怪物都有以下属性值:生命值(hp),攻击力(atk)和防御值(def).<br>其中每次攻击造成的伤害值公式是 $\max(atk-def,0)$ ,即如果您砍怪物一刀,伤害是$5$,怪物防御是$3$,则怪物实际生命值会减$2$点,如果您的攻击是$2$,则怪物不会受到伤害.<br>您与怪物的对战可以简单理解为,您先砍怪物一刀,然后怪物砍你一刀,然后您再砍怪物一刀,以此类推,直到一方死亡,中途不可逃跑.死亡的定义是任意时刻生命值小于等于0.</p><p>在菊花魔塔中,加成道具有以下四种:</p><p>攻击药水(让攻击力永久+1)<br>防御药水(让防御力永久+1)<br>生命药水(让生命值+1)<br>剑(让当前攻击力+x,没有耐久可以一直用,但是您同时只能携带一把剑)</p><p>本题采取多测,每次独立,角色初始属性,每个怪物的属性和每个房间的道具数量会告诉您,您只需要对每次询问给出一行一个 <code>Yes</code> 或 <code>No</code> 表示勇士能不能到达魔塔的终点房间.</p><p>本题所有测试点公开,测试用例在下面:xx<br>我们还准备了菊花魔塔的游戏,您写程序输出答案提交只要正确也可得分.网页:xx</p><h2 id="输入">输入</h2><p>第一行两个整数,表示子任务($subtask$)编号和测试点个数($T$).</p><p>每个测试点第一行有两个整数n和t,代表房间的数量和终点房间的编号(房间从1开始编号).接下来n行每行7个整数,分别表示表示第i号房间的怪物的生命值(如果是0则该房间没有怪物),攻击力,防御力,该房间的攻击药水的数量,防御药水的数量,生命药水的数量,以及该房间剑的攻击力加成x(如果是0则该房间没有剑).<br>第n+1行是三个整数,表示自己的生命值,攻击力和防御力,您初始时是没有剑的.</p><h2 id="输出">输出</h2><p>一行一个字符串<code>Yes</code>或<code>No</code>,表示该测试点中勇士能不能到达终点房间.</p><h2 id="样例">样例</h2><h3 id="样例输入-1">样例输入#1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 1</span><br><span class="line">4 1</span><br><span class="line">229 113 0 114 514 1919 810</span><br><span class="line">300 200 0 0 0 1 0</span><br><span class="line">300 200 0 0 1 0 0</span><br><span class="line">300 200 0 1 0 0 0</span><br><span class="line">514 114 0</span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出#1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="样例解释-1">样例解释#1</h3><p>先去4号房间,杀怪后114剩滴生命值,获得1点攻击(药水效果),然后直接去1号最终房间,杀怪后剩1滴血存活,所以输出<code>Yes</code>.</p><h2 id="数据范围-约定">数据范围,约定</h2><p>本题共20个测试点,一共100分,子任务测试数据会下发,<a href="https://jlu.edu.cn">链接</a>.<br>此外我们还准备了测试用例的游戏版本,您也可以通过游玩游戏得到答案,<a href="https://jlu.edu.cn">链接</a></p><p>然后这里是数据表格,题面先过审了再出数据的说,</p><p><code>|$$|$$|$$|$$|||</code></p><h2 id="Flu想说的-这段不算在题面">Flu想说的(这段不算在题面)</h2><p>有一个小问题:我们怎么给部分分??Flu的方向有:</p><ol><li>单测和多测都有(单测只有俩,就是让骗分的)</li><li>有些子任务没防御,有些子任务没有剑,有些子任务没有药水.</li><li>有些子任务人和怪物的值域比较小,(给不会快速计算人怪互砍伤害的人一个机会)</li><li>有些子任务房间数比较少</li></ol><table><thead><tr><th style="text-align:center">子任务编号</th><th style="text-align:center">测试点组数$T$</th><th style="text-align:center">n的范围</th><th style="text-align:center">$\sum n$的范围</th><th style="text-align:center">特殊约定</th><th style="text-align:center">备注(不算题面)</th></tr></thead><tbody><tr><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$4$</td><td style="text-align:center">$4$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$2$</td><td style="text-align:center">$5$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$3$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$4$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$5$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$6$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$7$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$8$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$9$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$10$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$11$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$12$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$13$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$14$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$15$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center">$$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$16$</td><td style="text-align:center">$1$</td><td style="text-align:center">$20$</td><td style="text-align:center">$20$</td><td style="text-align:center"></td><td style="text-align:center">这个点的正解是骗分,因为Yes或No最多一次就能看出来,尽量不要让正解在考场上算出来,哈哈</td></tr><tr><td style="text-align:center">$17$</td><td style="text-align:center">$5$</td><td style="text-align:center">$[1,11]$</td><td style="text-align:center">$[1,55]$</td><td style="text-align:center">无</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$18$</td><td style="text-align:center">$20$</td><td style="text-align:center">$[1,11]$</td><td style="text-align:center">$[1,110]$</td><td style="text-align:center">无</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$19$</td><td style="text-align:center">$20$</td><td style="text-align:center">$[1,11]$</td><td style="text-align:center">$[1,110]$</td><td style="text-align:center">无</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$20$</td><td style="text-align:center">$20$</td><td style="text-align:center">$[1,11]$</td><td style="text-align:center">$[1,110]$</td><td style="text-align:center">无</td><td style="text-align:center"></td></tr></tbody></table><p>这个题就是纯暴搜,dfs的参数会比较多而已.</p><p>主要考察暴搜怎么写(n!就行了),以及如何快速计算人和怪物之间互砍的伤害(这个应该也不难),以及输入(每个房间怪的属性,以及打完了得多少个什么东西,输入略微有一点麻烦),以及清空数组的能力(多测一定要卡掉不清数组的,这不是好习惯).</p><p>多测是因为每次只需要输出Yes或No就行了,要卡死赌运气的,并不是卡复杂度的.</p><p>关于魔塔问题是npc问题的证明:</p><p><a href="https://zhuanlan.zhihu.com/p/153549090">https://zhuanlan.zhihu.com/p/153549090</a></p><hr><h1>B2. ???</h1><h1>B2. ???</h1><p>用做比赛赛题,题面不可公开.</p><hr><h1>E. Neko and P Problems</h1><h1>E. 猫猫与多项式问题</h1><p>猫猫找到了一道暴搜题,祂觉得太简单了,于是摇了摇尾巴把问题丢给了你.</p><p>你有 $n$ 个点和四个集合,你需要把所有点分到四个集合中,每个集合可以为空.我们定义一个集合周长的大小为一个最小的长和宽平行笛卡尔坐标系(直角坐标系)的,包含所有点(点可以在边界上)的最小矩形的周长大小,您需要对点进行合理分配,最小化四个集合周长大小的和.</p><h2 id="输入格式-2">输入格式</h2><p>第一行一个整数 $n$ ,表示有多少个点.<br>第 $2$ 行至第 $n$ 行,一行两个整数 $x_i\quad y_i$ ,代表点 $(x_i,y_i)$ 的坐标.</p><h2 id="输出格式-2">输出格式</h2><p>一行 $n$ 个整数,表示某点所在集合.</p><h2 id="样例输入-输出-2">样例输入/输出</h2><p><strong>输入#1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">0 0</span><br><span class="line">10 0</span><br><span class="line">0 10</span><br><span class="line">10 10</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><p><strong>输出#1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 1</span><br></pre></td></tr></table></figure><p><strong>样例解释</strong> :根据给定的坐标画图,找到周长最小的集合如下.</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zvlrhsni.png" alt=""></p><h2 id="说明-提示">说明/提示</h2><p>设点数为 $n$ ,值域 $w$ 表示所有点坐标取值都会在 $[-w,w]$ 内,点有可能出现重合情况,集合的矩形只需要包含所有点就行,点在边界以及矩形的长或宽都可以为0.</p><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">n的大小</th><th style="text-align:center">值域大小</th></tr></thead><tbody><tr><td style="text-align:center"><code>1</code></td><td style="text-align:center">$5$</td><td style="text-align:center">$10$</td></tr><tr><td style="text-align:center"><code>2</code></td><td style="text-align:center">$6$</td><td style="text-align:center">$10$</td></tr><tr><td style="text-align:center"><code>3</code></td><td style="text-align:center">$7$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>4</code></td><td style="text-align:center">$8$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>5</code></td><td style="text-align:center">$9$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>6</code></td><td style="text-align:center">$10$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>7</code></td><td style="text-align:center">$10$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>8</code></td><td style="text-align:center">$15$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>9</code></td><td style="text-align:center">$15$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>10</code></td><td style="text-align:center">$16$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>11</code></td><td style="text-align:center">$16$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>12</code></td><td style="text-align:center">$20$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>13</code></td><td style="text-align:center">$20$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>14</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10$</td></tr><tr><td style="text-align:center"><code>15</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$20$</td></tr><tr><td style="text-align:center"><code>16</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$50$</td></tr><tr><td style="text-align:center"><code>17</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>18</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>19</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td></tr><tr><td style="text-align:center"><code>20</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td></tr></tbody></table><p><strong>注意</strong> :本题采用 <code>Special Judge</code> 和 <em>动态赋分制</em> ,您的程序会在评测后得到一个分数,代表您的程序得到的最小周长.我们会使用与第一名的周长进行比较的公式进行评估,您会得到一个得分,这里还没写完…</p><p>参考程序(你可以使用参考程序提交并得分,只是后面会被比下去):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/atsc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;1 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-附件">参考资料(附件)</h2><p>Neko_and_NPC_Problems.zip</p><hr><h1>出题者语</h1><p>暴搜 $O(4^n)$<br>枚举值域 $O(nw^{12})$ (枚举三个正方形的值域,然后剩下的归到最后的集合里面,On检查,加一块就是这个)<br>模拟退火 $O(玄学)$ 答案玄学,快速剪枝( <s>青云杯退火大赛</s> )</p><p><strong>有一个不太好的地方是,因为四个集合,计算机速率达不到,枚举值域虽然复杂度在值域小的时候很可以但是这个时候人类智慧会杀出来的,也许3个集合会更好?但是这样的话暴搜又会杀出来…所以枚举值域只能结合人类智慧一起做.</strong></p><p><strong>还有一个问题,这个题的答案搞不出来的情况下,模拟退火打的怎么样?别到时候退火变成除了暴搜出的正解外吊打选手的程序(包括标算,虽然可能没有标算),一定要卡死模拟退火,至少别让模拟退火太逆天…</strong></p><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">点的规模</th><th style="text-align:center">值域规模</th><th style="text-align:center">预期解法</th><th style="text-align:center">描述一下图的性质</th></tr></thead><tbody><tr><td style="text-align:center"><code>1</code></td><td style="text-align:center">$5$</td><td style="text-align:center">$10$</td><td style="text-align:center">白给,因为至少四个集合,所以怎么着也得五个起拍</td><td style="text-align:center">特殊数字(114514之类的)</td></tr><tr><td style="text-align:center"><code>2</code></td><td style="text-align:center">$6$</td><td style="text-align:center">$10$</td><td style="text-align:center">白给</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>3</code></td><td style="text-align:center">$7$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>4</code></td><td style="text-align:center">$8$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">开始暴搜/人类智慧</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>5</code></td><td style="text-align:center">$9$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">开始暴搜/人类智慧</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>6</code></td><td style="text-align:center">$10$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>7</code></td><td style="text-align:center">$10$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>8</code></td><td style="text-align:center">$15$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">打表</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>9</code></td><td style="text-align:center">$15$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">打表</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>10</code></td><td style="text-align:center">$16$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧+暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>11</code></td><td style="text-align:center">$16$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧+暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>12</code></td><td style="text-align:center">$20$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧+暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>13</code></td><td style="text-align:center">$20$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧+暴搜</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center"><code>14</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10$</td><td style="text-align:center">人类智慧+枚举值域</td><td style="text-align:center">随机(事实上也随机不到哪去,值域太小了)</td></tr><tr><td style="text-align:center"><code>15</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$20$</td><td style="text-align:center">人类智慧+枚举值域</td><td style="text-align:center">随机(事实上也随机不到哪去,值域太小了)</td></tr><tr><td style="text-align:center"><code>16</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$50$</td><td style="text-align:center">人类智慧+枚举值域</td><td style="text-align:center">青云杯标识(正解是通过把图像竖着或者横着劈成四瓣,省掉中间的间隙的周长)</td></tr><tr><td style="text-align:center"><code>17</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧</td><td style="text-align:center">(点的分布会很密集,但是四个集合之间离的很远)四坨点聚在四周</td></tr><tr><td style="text-align:center"><code>18</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">人类智慧</td><td style="text-align:center">三坨,长成两个点和一个8的样子</td></tr><tr><td style="text-align:center"><code>19</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">不可做,依赖玄学剪枝(模拟退火???)</td><td style="text-align:center">随机,可能有重合点</td></tr><tr><td style="text-align:center"><code>20</code></td><td style="text-align:center">$100$</td><td style="text-align:center">$10^9$</td><td style="text-align:center">不可做,依赖玄学剪枝(模拟退火???)</td><td style="text-align:center">随机,可能有重合点</td></tr></tbody></table><hr><p>文件 <code>E_checker.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;testlib.h&quot;</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> infin=<span class="number">2147483647</span>;</span><br><span class="line"><span class="comment">//答案文件和输入文件保持一致,因为其实这个题本没有答案的( )</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">setName</span>(<span class="string">&quot;E_checker&quot;</span>);</span><br><span class="line"><span class="built_in">registerTestlibCmd</span>(argc,argv);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mx1x=-infin,mn1x=infin,mx1y=-infin,mn1y=infin,cnt1=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mx2x=-infin,mn2x=infin,mx2y=-infin,mn2y=infin,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mx3x=-infin,mn3x=infin,mx3y=-infin,mn3y=infin,cnt3=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mx4x=-infin,mn4x=infin,mx4y=-infin,mn4y=infin,cnt4=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n=ans.<span class="built_in">readInt</span>(),tmp,tmpx,tmpy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">tmp=ouf.<span class="built_in">readInt</span>();</span><br><span class="line">tmpx=ans.<span class="built_in">readInt</span>();</span><br><span class="line">tmpy=ans.<span class="built_in">readInt</span>();</span><br><span class="line"><span class="keyword">switch</span>(tmp)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">cnt1++;</span><br><span class="line">mx1x=std::<span class="built_in">max</span>(mx1x,tmpx);</span><br><span class="line">mn1x=std::<span class="built_in">min</span>(mn1x,tmpx);</span><br><span class="line">mx1y=std::<span class="built_in">max</span>(mx1y,tmpy);</span><br><span class="line">mn1y=std::<span class="built_in">min</span>(mn1y,tmpy);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">cnt2++;</span><br><span class="line">mx2x=std::<span class="built_in">max</span>(mx2x,tmpx);</span><br><span class="line">mn2x=std::<span class="built_in">min</span>(mn2x,tmpx);</span><br><span class="line">mx2y=std::<span class="built_in">max</span>(mx2y,tmpy);</span><br><span class="line">mn2y=std::<span class="built_in">min</span>(mn2y,tmpy);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">cnt3++;</span><br><span class="line">mx3x=std::<span class="built_in">max</span>(mx3x,tmpx);</span><br><span class="line">mn3x=std::<span class="built_in">min</span>(mn3x,tmpx);</span><br><span class="line">mx3y=std::<span class="built_in">max</span>(mx3y,tmpy);</span><br><span class="line">mn3y=std::<span class="built_in">min</span>(mn3y,tmpy);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">cnt4++;</span><br><span class="line">mx4x=std::<span class="built_in">max</span>(mx4x,tmpx);</span><br><span class="line">mn4x=std::<span class="built_in">min</span>(mn4x,tmpx);</span><br><span class="line">mx4y=std::<span class="built_in">max</span>(mx4y,tmpy);</span><br><span class="line">mn4y=std::<span class="built_in">min</span>(mn4y,tmpy);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">default</span>:&#123;</span><br><span class="line"><span class="built_in">quitf</span>(_wa,<span class="string">&quot;%lld&quot;</span>,inf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt1!=<span class="number">0</span>)res+=(mx1x-mn1x+mx1y-mn1y)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt2!=<span class="number">0</span>)res+=(mx2x-mn2x+mx2y-mn2y)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt3!=<span class="number">0</span>)res+=(mx3x-mn3x+mx3y-mn3y)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt4!=<span class="number">0</span>)res+=(mx4x-mn4x+mx4y-mn4y)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">quitf</span>(_ok,<span class="string">&quot;%lld&quot;</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>E2. 九井棋</h1><h1>E2. Tic-Tac Toe</h1><p>选手两两之间下九井棋,比拼谁赢的多的这么一个题,对评测姬要求比较高.</p><hr><h1>以及一些没有实现的idea</h1><p>因为能力不足或时间不够,没有将想法落地的ideas.</p><ol><li><p>(交互题)给一个01串,选手任意对字符串进行编码,或者进行计算,然后我们进行破坏之后再还给选手,看是否能够还原,还原率是多少,涉及到很复杂的差错控制编码:喷泉码,李德所罗门码(二维码用的那个,能达到30%纠错率)</p></li><li><p>手写一个malloc看谁性能最好,受制于评测姬是Linux只好作罢.</p></li><li><p>Markov Algorithm Online(整一个类似旷野大计算类似的东西)</p></li><li><p>因为程序最终是要被编译成机器码执行的,所以我们让选手使用汇编去实现一个类似&quot;旷野大计算&quot;的题,然后转成机器码交上去,也就是说选手需要提交一堆数字,然后由SPJ负责把数字转成程序运行,不可以出现任何数字空格以外的输入,idea来自<a href="https://www.bilibili.com/video/BV16P4y1C7T9">这个视频</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;无论如何,我不会再出题了.&lt;/strong&gt; 出题得不到什么奖励,出不好还会被骂,出题的时候要考虑各种情况(比如正解,代码长度,时限到底开多少,部分分怎么给,怎么卡掉非正解,可能有什么做法能草过去),还有人不干活,团委整天拖报销咋办…&lt;/p&gt;
&lt;p&gt;所以这篇</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="Contest" scheme="https://narafluorine.github.io/tags/Contest/"/>
    
    <category term="TsingyunCup" scheme="https://narafluorine.github.io/tags/TsingyunCup/"/>
    
  </entry>
  
  <entry>
    <title>字符串总结</title>
    <link href="https://narafluorine.github.io/2024/12/24/10033_%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://narafluorine.github.io/2024/12/24/10033_%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-12-24T13:03:22.000Z</published>
    <updated>2025-04-25T19:00:40.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KMP弊端">KMP弊端</h2><p>因为kmp对cache不友好,也较难使用simd(单指令多数据的并行计算)优化,而且实际上的字符串很难跑到O(nm),所以实践上朴素算法可能更快.</p><h1>自动机科技</h1><p>自动机是一个确定的数学模型,对于信号序列(字符串)的某种性质给出是或不是的回答(确定有限状态自动机).然后自动机上每个节点都会有对了如何错了如何的判定,所以自动机实质上是一张有向图.</p><h2 id="AC自动机及其魔改">AC自动机及其魔改</h2><p>AC自动机的板子是计算多个字符串在一个字符串的匹配情况.最裸的板子是求多个小串在一个一个长串之中各自出现了多少次,时间复杂度 $O(|T|+\sum|S|)$ ,然而肯定会有魔改的版本…</p><h2 id="子序列自动机-简单字符集">子序列自动机(简单字符集)</h2><p>快速判定某些字符串t是不是母字符串s的子串, $O(s+\sum t)$ .</p><p>就是一个dp.设字符集为S,开一个dp[len][|S|]表示当前len的位置的下一个S的字符在哪里,从后往前推复杂度O(lenS).</p><p>$$next[i][j]=next[i+1][j],w[i+1]\neq j \\ next[i][j]=i+1,w[i+1]=j$$</p><h2 id="子序列自动机-复杂字符集">子序列自动机(复杂字符集)</h2><p>上面的子序列的dp和字符集长度挂钩,如果S很大时间空间都会爆,考虑更优解法.</p><p>发现nxt只会每次更新只会改一个点,所以能够使用主席树优化,具体地,对值域开一个桶,对字符串长度开根的长度,然后添一个log进行建树和匹配.</p><p><strong>另解</strong> :使用vector桶存值域,然后值域二分找到下一个位置,然后跳转即可,复杂度依然是log.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;KMP弊端&quot;&gt;KMP弊端&lt;/h2&gt;
&lt;p&gt;因为kmp对cache不友好,也较难使用simd(单指令多数据的并行计算)优化,而且实际上的字符串很难跑到O(nm),所以实践上朴素算法可能更快.&lt;/p&gt;
&lt;h1&gt;自动机科技&lt;/h1&gt;
&lt;p&gt;自动机是一个确定的数学模型,对</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="OTH" scheme="https://narafluorine.github.io/tags/OTH/"/>
    
  </entry>
  
  <entry>
    <title>3D打印,建模,工学</title>
    <link href="https://narafluorine.github.io/2024/12/24/30012_3D%E6%89%93%E5%8D%B0%E5%8F%8A%E5%BB%BA%E6%A8%A1/"/>
    <id>https://narafluorine.github.io/2024/12/24/30012_3D%E6%89%93%E5%8D%B0%E5%8F%8A%E5%BB%BA%E6%A8%A1/</id>
    <published>2024-12-24T13:03:22.000Z</published>
    <updated>2025-06-04T06:35:16.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3D打印文件格式有哪些">3D打印文件格式有哪些?</h2><p><code>stl</code> <code>3mf</code> <code>amf</code> <code>obj</code> 等.</p><h2 id="AMS怎么省钱封箱">AMS怎么省钱封箱?</h2><p>使用自带的塑料袋加扎带即可.</p><h2 id="老三样">老三样?</h2><p>打磨 补土 电镀</p><h2 id="工件向上最大倾斜度">工件向上最大倾斜度</h2><p>还没测.</p><h2 id="打印件六边形悬垂处有单向毛刺-怎么回事">打印件六边形悬垂处有单向毛刺,怎么回事?</h2><p>可能是润滑轴不到位导致,或降低打印速度,或加强散热风扇风速或烘干耗材</p><h2 id="牌子">牌子</h2><p>兰博(Flu用的)<br>Jayo(听说是三绿换牌子走的低端市场,应该挺好使的)</p><h2 id="工件名称">工件名称??</h2><p>方钢 方管</p><h2 id="另一种玩法">另一种玩法</h2><p>在连接分件的时候用电烙铁压一圈小金属条或者订书钉进去,然后再补土刮腻子打磨喷涂</p><h2 id="无AMS多色打印">无AMS多色打印</h2><p>原理:可以把工件纵向切开,中间插入缓冲层,然后换料,然后继续打印就可以实现无AMS的多色打印.</p><p>然而实操的时候有一个坑就是,右边能拖动的条能插暂停层的是当前准备打第几层, <strong>但是</strong> 左边的模型显示是打完第几层之后的状态.比如你要打一个名字扣,板子10层,名字10层凸显在上面,你需要在第11层加暂停层.</p><h2 id="塑钢线">塑钢线</h2><p>塑钢线是一种农用物品,用于户外拉遮阳棚等用的东西,材质是PE,听说能够用于3D打印,Flu买来试验一下,(59元是9斤,这种13元一千克的耗材如果能成功打印工件的话直接耗材自由了),所以Flu必须实验.</p><p>首先,因为白色塑钢线透明,所以不能用拓竹的自动流量校准.</p><p>打印速度一定要慢,群U说最大速度体积是8.</p><p>为什么有的时候能挤出有的时候不能挤出?</p><h3 id="为什么黑色塑钢线不能打印">为什么黑色塑钢线不能打印?</h3><p>网上说,黑色塑钢线会粘床,严重的会清理不干净废板子,因为黑色是室外用的,添加抗紫外线耐晒抗老化的东西,并不是垃圾料.</p><h2 id="打印浮雕">打印浮雕</h2><p>先转成灰度图,然后上传到网站转成stl,然后直接打印就行了.</p><p>注意有些人物的笑容会因为灰度不够被抹掉,这个时候一定要看清楚会不会被抹掉…(比方说红叶这个浮雕就是笑容不明显然后打印出来的笑容甚至断开成两半了…)</p><p>可以使用makerlab或者<a href="https://3dp.rocks/">这个网站</a>在线转浮雕.</p><h2 id="克重数据">克重数据</h2><p>对于Flu PETG这种材质,密度基本准确.记录表:</p><table><thead><tr><th style="text-align:center">预估重量(拓竹切片软件,g)</th><th style="text-align:center">实际重量(g)</th></tr></thead><tbody><tr><td style="text-align:center">109.94</td><td style="text-align:center">108.3</td></tr></tbody></table><p>一卷兰博全新耗材重量(1kg,刚开封,算上卷的重量):1167.0g<br>兰博空盘重量:160.0g</p><h2 id="Pend">Pend</h2><p>竹子CHT三孔铬锆铜喷嘴0.2mm(一个喷嘴才三块钱).</p><p>耗材种类:<br>pla petg tpu (abs asa  pa pc) pet</p><p>激光金属3d打印<br>cnc</p><h2 id="耗材干燥剂">耗材干燥剂</h2><p>选项:</p><ol><li>分子筛干燥剂(大约3~5元每斤)</li><li>变色硅胶干燥剂</li><li>生石灰(灰太大)</li></ol><h2 id="如何拆支撑">如何拆支撑</h2><p>你就是缺尖嘴钳和锉刀,别的没了.</p><h2 id="为什么XX">为什么XX?</h2><ol><li>为什么会听到咔咔的声音?是打印机撞到模型了吗?</li></ol><p>那是打印机打较大模型时,模型中间会凉下来,然后支撑脱落时发出的声音.</p><ol start="2"><li>支撑为什么一掰就掉</li></ol><p>因为支撑是一整根完整的空柱子,叠起来长得像一棵树.支撑在与模型连接的地方是一堆点,减小在这里的强度,所以支撑很好掰,掰掉的地方会留下点作为痕迹,用砂纸打磨也许能做好.</p><ol start="3"><li>为什么材料还没打几层就破了个大洞?是不是局部受热不均?</li></ol><p>答:你没有洗板子,之前的油沾到了上面导致不粘板子,然后就导致打印一层比一层偏最后出现大洞.所以 <strong>推荐每次打印完取下来模型就洗一次板子,保证下次打印的成功率</strong> .还有可能是耗材时间长了.</p><ol start="4"><li>为什么不着床!!!(翘边,炒面)</li></ol><p>因为热床不粘.对于纹理PIE板使用肥皂洗一下,然后再用无纺布擦干(注意不能是纸巾,会残留碎屑在上面导致打印失败),无纺布可以带酒精也可以不带.不粘平台解决办法1是好好洗洗,2是调节喷头距离,3就是用胶棒</p><ol start="5"><li>硅胶干燥剂的活性恢复方法:建议4次回温之后扔掉硅胶.放入铝箔盒中放到烤箱中100度,每5min拿出来观察硅胶情况并搅拌,约30min,直到不含水分,或者暴晒直到颜色回来.</li></ol><h2 id="上色">上色</h2><p>三种方案:</p><ol><li>直液式丙烯马克笔(先上色,再平涂,最后用光油固定)</li><li>补土打底+手涂水性漆(Flu选择这个,星影和酋长大陆,)+湿盘(水+烘培油纸,).</li><li>丝绸金(这种本身颜色足够鲜艳的)PLA</li></ol><h1>灵感收集</h1><p>买了打印机之后总要打点什么…所以需要收集灵感,免得打印机过度吃灰导致出问题.</p><h2 id="通配符类">通配符类</h2><p>温度塔:看拉丝情况决定打印温度的<br>回抽塔:看拉丝情况决定回抽长度最小是多少的</p><h2 id="中看不中用类">中看不中用类</h2><p>福字挂件,窗花剪纸<br>透明材料打印海豚(内嵌的)(要看透明PETG打印技巧wiki)<br>六边形搁物架,用嵌子卡在两个中间保证不散.<br>任意浮雕,先扔ps里转灰度图,然后扔<br>任意名字挂件,简单的图片</p><h2 id="实用类">实用类</h2><p>印章()<br>发夹(多色无需ams)</p><h2 id="如何变现">如何变现?</h2><ol><li>拓竹发布模型收获赞助变现</li><li>扎根行业提出解决方案等别人复刻</li><li>卷代打</li><li>摆地摊,</li></ol><h1>色彩</h1><ol><li>绿色士兵小人</li><li></li></ol><h1>Blender建模教程</h1><hr><p>(听的KurTips网课,简单学了一手)</p><h3 id="键位">键位</h3><p>鼠标中键:挪动视角,观察空间<br>Shift+鼠标中键:移动空间(右上角小手)<br>滚轮:缩放空间(右上角的放大镜)<br>右上角的三色轴拖动旋转:转动空间<br>摄像机视图:右上角摄像机<br>正交视图:右上角网格</p><p>删除物体:Del<br>恢复操作:Ctrl+Z<br>新建物体:Shift+a<br>移动物体:G(这个状态按xyz会沿着对应方向移动),退出状态是左键<br>缩放物体:S(这个状态按xyz会沿着对应方向移动),退出状态是左键<br>旋转物体:R(按xyz会沿着对应方向移动,默认是你的视图方向旋转),退出状态是左键<br>隐藏物体:H(Shift+H会隐藏所有没有被选中的物体,看右上角场景那里的小眼睛)<br>恢复某些性质:Alt+X(加S撤销缩放,加R撤销旋转,加G撤销位移(回到原先的位置了))<br>复制物体:Shift+D移动并复制(复制并移动是两步,撤销的时候会发现其实已经复制出来了)</p><p>选中:分为框选(不可调位置)和单选(随便调位置)还有刷选(快捷键C,刷到哪里选择哪里)和套索(从鼠标末端到鼠标起点的一个闭合平面),在鼠标框那里长按调整,注意要选到物体中心才算</p><p>切换视图:单击XYZ轴可以变换成单方向的视图.<br>还有一种方法: <code>~</code> 进入Tab目录,显示当前的视图<br>小键盘福利:<br>1正视图3右视图7顶视图9把当前视图反过来<br>2468是上下左右方向的微调(一次15度)</p><p>面板:每一个面板都可以转换成其他的操作面板.面板转换在左上角.可替换可拆分,鼠标在窗口四角出现加号的时候可以拉,往别的窗口拉会合并,往自己的窗口拉会分裂.</p><p>搞乱了可以在上方加号新建布局恢复.<br>Ctrl+Space可以最大化当前面板,再按一次恢复.</p><p>键盘上的/斜杠:按一下可以让选中的物体单独显示,再按一下退出.</p><p>0:进入摄像机视图</p><p>摄像机快速对正:在摄像机视图按n勾选锁定摄像机,然后就可以直接在摄像机视图调整了.</p><p>blender有两个渲染器,一个叫eevee,一个叫cycles.eevee是实时渲染,快,相对不占资源,缺点是没有光线追踪,很多光线阴影细节不佳,需要额外更多参数辅助.cycles更加逼真高级,能模拟出物理世界里非常细节的光线阴影,缺点是慢,比eevee慢10倍以上.`</p><h3 id="游标">游标</h3><p>游标在哪里,新建的东西就会出现在哪里.</p><p>移动游标:选中工具下面是游标工具,点这个工具移动即可.<br>或者正常的选中模式,Shift+右键 也可以移动游标.<br>Shift+C 游标回到原点.</p><p>游标可以当成轴心点用.把物体的轴心点换成游标的话,就可以绕着游标进行转动.</p><h3 id="中心点">中心点</h3><p>每个物体都会有一个中心点,记录物体的信息.</p><p>右上角选项可以选择&quot;仅影响原点&quot;,然后挪动原点和物体的相对位置.</p><p>立方体的原点默认在中心,这个时候伸长是原点向两边伸长的.</p><h3 id="物体移动-轴心点">物体移动,轴心点</h3><p>移动模式下按Ctrl有吸附功能</p><p>轴心点可以变成边界框中心,质心,各自的中心,以及活动元素.活动元素是多选物体时最后被选中的元素.</p><h3 id="局部坐标">局部坐标</h3><p>和世界坐标不一样的,旋转跟着物体转的这么一个坐标.</p><p>如何调用局部坐标?只要按两次坐标轴就可以在全局和局部坐标中切换了.</p><h1>建模篇</h1><p>模型编辑模式:Tab切换物体模式.<br>按Tab同时移动鼠标会进入丙菜单,出现一个物体的好多种模式.</p><p>选择点线面:大键盘123分别对应,默认是点.(鼠标切换那里在左上角),按Shift可以同时选点线面</p><p>鼠标选择:按w快速切换选中规则,框选刷选,etc.<br>框选是b,刷选是c,注意快捷键进入刷选状态时经常出现其他键都按不了,只能刷选,这个时候按住鼠标中键擦除刚刚选中的点,退出按esc或者右键在空白位置</p><p>反选:选中一块点,按ctrl+i反选这个物体其他的所有点<br>按shift可以选择一些不连续的点,按ctrl可以把两个点之间的最短路径连起来.</p><p>选择相连元素:选一个点按L可以选择所有与这个点相连的点(连什么地方要把鼠标走到那里)(是以四边形计算的,有的时候三角面跨不过去,要用鼠标选)</p><p>选择一个圈(环):选择一个点按alt双击想选的环(横向,纵向,etc)</p><p>随机选择:鼠标防选择上随机选择一些点线面</p><p>扩大选择:按ctrl++(小键盘)或ctrl±(小键盘)可以扩大选择范围或者缩小</p><p>透视模式:alt+Z切换,这个时候可以选中背面的点</p><p>点线面操纵:g移动r旋转s缩放</p><p>删除点线面:选择某些东西按x选择删除哪些东西</p><p>删点:点消失了,和点直接相连的边也消失了,和面直接相连的面也消失了<br>删边:边消失了,和面直接相连的面也消失了<br>删面:面消失了</p><p>融并:会删东西,但是剩下的会缝起来,不会出现一个大洞</p><h3 id="面的法向">面的法向</h3><p>到右上角找到面朝向打开即可看到一个面的正反,蓝色是正面红色是反面</p><p>按shift+n,选一下内向就可以转换朝向.</p><p>法线:面法线垂直于面(浅蓝),顶点法线垂直于切线方向(深蓝),拆分法线(浅粉色,用的比较少,游戏开发会自定义法线)</p><h2 id="建模操作">建模操作</h2><p>左侧边栏:笔 标注,注释<br>测量工具:量工件多大的.<br>新建工具:快速拉出来一个新模型</p><p>挤出:先切换到面模式,然后e挤出一个面(挤出并移动)s缩小(这个面),点挤出是一个面(快速挤出是ctrl+右键),线挤出是一个面.注意e是挤出冰移动,撤销的时候注意一下两个面重合<br>挤出流形:避免重复边的问题.<br>沿法线挤出:rt.<br>单独挤出:立方体切片之后选择多个面挤出会连在一起(一起挤出的),然后单独挤出不会出现这种情况,用于做手指</p><p>向内挤出:i(这个不是挤出并移动)</p><p>倒角(把角磨圆):ctrl+B拉出来一个角(边模式),滑动鼠标滚轮增加细分面(更圆滑)</p><p>环切(腰斩):从中间截断整个物体(ctrl+r),滑动滚轮可以增加或者减少段数点一下确定段数,再点一下确定位置,右键可以自动吸附在最中间的地方</p><p>合并:选择两个点,m合并到中间,按距离的意思是如果两个点的距离小于多少就合并.</p><p>断开:v,一个点要有三条边支持,然后断开的时候就是和别的面不粘了.</p><p>填充:alt双击环选一整个环,然后按住f这个面就被封住了.(被填充了)</p><p>右键细分:可以增加一个边.</p><p>切刀:k进入切刀模式,右键或者空格退出,切刀可以把物体切成好多个面.</p><p>桥接:ctrl+E,只有一个物体才能够桥接.两个物体变一个物体用ctrl+j.</p><p>分离:p,先进透视,选中想分离的物体,按p(这个时候一个物体会变成两个物体…)</p><p><strong>尽量不要在物体模式下缩放,在编辑模式下缩放.如果物体模式缩放了,记得应用下这个缩放.</strong></p><h2 id="修改器">修改器</h2><p>好处是不破坏模型,而且可以叠加多个.</p><p>大概就是,有很多个修改器,可以实现不对模型进行改动的前提下进行渲染和建模,方便撤回和调整.</p><h2 id="ps…">ps…</h2><p>Flu的Blender用起来会有电流声…不知道是什么原因,挪动鼠标能听到滋滋滋的声音…现在的显卡都这么猛的吗???还是我电脑要完了???</p><h1>工学</h1><p>也许名字叫电子电路基础…</p><h2 id="断桥铝">断桥铝</h2><p>铝制窗户框,可以隔热.</p><h2 id="焊锡松香配方">焊锡松香配方</h2><p>25%松香溶解到75%的(无水)酒精当中</p><h2 id="胶水">胶水</h2><p>ab胶(丙烯酸基实用性强,用3m 乐泰 天山 回天) 补土 uv胶 502 补鞋胶 油性胶 5800胶水</p><h2 id="安装床帘经验总结">安装床帘经验总结</h2><ol><li>尽量避免在304不锈钢上打孔,非常难开,半天只有一个小眼</li><li>尽量避免在普通钢铁上打孔,尝试使用纸张填充的方法给杆子限位.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3D打印文件格式有哪些&quot;&gt;3D打印文件格式有哪些?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stl&lt;/code&gt; &lt;code&gt;3mf&lt;/code&gt; &lt;code&gt;amf&lt;/code&gt; &lt;code&gt;obj&lt;/code&gt; 等.&lt;/p&gt;
&lt;h2 id=&quot;AMS怎么省钱封箱&quot;&gt;AMS怎</summary>
      
    
    
    
    <category term="TECH" scheme="https://narafluorine.github.io/categories/TECH/"/>
    
    
    <category term="OTH" scheme="https://narafluorine.github.io/tags/OTH/"/>
    
  </entry>
  
  <entry>
    <title>概率</title>
    <link href="https://narafluorine.github.io/2024/12/17/10018_%E6%A6%82%E7%8E%87/"/>
    <id>https://narafluorine.github.io/2024/12/17/10018_%E6%A6%82%E7%8E%87/</id>
    <published>2024-12-17T05:42:45.000Z</published>
    <updated>2025-04-25T18:59:44.777Z</updated>
    
    <content type="html"><![CDATA[<p>在这里放一些常见的概率模型.</p><h2 id="随机游走-简单版">随机游走(简单版)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o-o-o-o-o</span><br><span class="line">q1^     q2</span><br><span class="line"> now</span><br></pre></td></tr></table></figure><p>你在一条链上.你有 $\frac12$ 的概率往左走一格, $\frac12$ 的概率往右走一格.走到最左端(0)有 $q_1$ 的概率赢,走到最右端有 $q_2$ 的概率赢.求你最终赢的概率.</p><p>结论:在距离0 $x$ 点位置的概率是 $\frac{x}{n+1}q_1+\frac{n+1-x}{n+1}q_2$ ,直观理解就是调和一下…</p><h2 id="Pending…随机游走-困难版">Pending…随机游走(困难版)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o-o-o-o-o</span><br><span class="line">q1^     q2</span><br><span class="line"> now</span><br></pre></td></tr></table></figure><p>你在一条链上.你有 $p$ 的概率往左走一格, $1-p$ 的概率往右走一格.走到最左端(0)有 $q_1$ 的概率赢,走到最右端有 $q_2$ 的概率赢,只要走到判定点无论输赢立刻停止,求你最终赢的概率.</p><p>哎哎,有的时候一个问题不一定就要有个答案…</p><p>好像要求矩阵快速幂???</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在这里放一些常见的概率模型.&lt;/p&gt;
&lt;h2 id=&quot;随机游走-简单版&quot;&gt;随机游走(简单版)&lt;/h2&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="Algorithm" scheme="https://narafluorine.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二分</title>
    <link href="https://narafluorine.github.io/2024/12/14/10032_%E4%BA%8C%E5%88%86/"/>
    <id>https://narafluorine.github.io/2024/12/14/10032_%E4%BA%8C%E5%88%86/</id>
    <published>2024-12-13T16:46:12.000Z</published>
    <updated>2025-04-25T19:00:36.869Z</updated>
    
    <content type="html"><![CDATA[<p>二分听起来简单,实际上题看都看不出来…</p><p>为了根除这个祸患,Flu特立此专题.</p><h2 id="例题">例题</h2><ol><li>CF2037F 有好多怪物在坐标轴上,每个怪物有自己的血量,怪物不会动,你只能选一个点进行攻击,攻击伤害递减(如 1 2 3 2 1 这样递减的攻击,最中心是你的战力),给定战力求击杀k个怪物的最少攻击次数.</li></ol><p>发现 <strong>攻击次数</strong> 是满足单调性的,也就是说这一次满足了下一次攻击也会满足条件,于是考虑二分.<br>设攻击y次,战力为k,坐标是pos,对每一个点有 $y\max(0,m-|pos-x_i|)\ge h_i$ ,解方程得到 $\lceil\frac hy\rceil+x_i-m\le pos\le m-\lceil\frac hy\rceil+x_i$ 于是转化为区间有n条线段,找到是否存在一个点被k个线段覆盖,直接差分就可以了.(注意如果有一个点不会被消掉就不要进行贡献,不然整段区间是会被切开出现空当导致WA的)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;二分听起来简单,实际上题看都看不出来…&lt;/p&gt;
&lt;p&gt;为了根除这个祸患,Flu特立此专题.&lt;/p&gt;
&lt;h2 id=&quot;例题&quot;&gt;例题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;CF2037F 有好多怪物在坐标轴上,每个怪物有自己的血量,怪物不会动,你只能选一个点进行攻击,攻击伤害递减(如 1</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="Algorithm" scheme="https://narafluorine.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理学习笔记</title>
    <link href="https://narafluorine.github.io/2024/12/02/00009_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://narafluorine.github.io/2024/12/02/00009_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-12-02T10:55:00.000Z</published>
    <updated>2025-04-25T18:56:19.388Z</updated>
    
    <content type="html"><![CDATA[<p>这里放一些名词.</p><p>给一个芯片是 $a\times b$ 位的能得出:<br>地址线: $\log a$<br>数据线: $b$</p><p>故引脚数量: 地址线(dram一般用地址复用技术就会减半)+数据线+1(片选线)+1(或2,读写控制线)</p><p>DRAM的刷新按行进行.</p><p><strong>刷新信号周期</strong> :(异步刷新)刷新周期/行数,然后可以下取整<br><strong>集中刷新</strong> :死时间率:集中刷新时间/周期</p><p>芯片画图: $A_n$ 是地址线, $D_n$ 是数据线 , $\overline{CE}$ 是片选线 $\overline{WE}$ 是读写线( $\overline{OE}$ 是输出线 ), $\overline{MREQ}$ 绝对的低电平, $G_1$ 直接连5V电压即可,地址线听说不能有浪费, $\overline{PD}/progr$ 是编程线,在ROM这里直接接地就行, $\overline{WR}$ 和 $\overline{RD}$ 这俩是输入输出信号.</p><p>海明码默认偶校验.</p><p>微操作命令分析:</p><p>取指周期:(把指令从存储器提取出来)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PC -&gt; MAR -&gt; 地址线<span class="comment">//把指令从PC寄存器通过地址总线送给存储器</span></span><br><span class="line"><span class="number">1</span> -&gt; R            <span class="comment">//控制单元向存储器发出读命令</span></span><br><span class="line"><span class="built_in">M</span>(MAR) -&gt; MDR     <span class="comment">//读出的数据从存储器经过数据总线发给MDR寄存器</span></span><br><span class="line">MDR -&gt; IR         <span class="comment">//把指令从MDR送给IR</span></span><br><span class="line"><span class="built_in">OP</span>(IR) -&gt; CU      <span class="comment">//IR寄存器操作码部分送给CU,由CU译码决定要做什么</span></span><br><span class="line">(PC)+<span class="number">1</span> -&gt; PC      <span class="comment">//下一条指令地址</span></span><br></pre></td></tr></table></figure><p>间址周期:首先是命令采取间接寻址的形式,要把操作数的地址从存储器当中取出,放到指令寄存器当中.</p><p>感觉间接寻址的行为就是一级指针,指针存放的地址就是操作数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要做指令形式地址 -&gt; MAR//地址码传送给MAR</span></span><br><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; MDR</span></span><br><span class="line"><span class="function">MDR -&gt; <span class="title">Ad</span><span class="params">(IR)</span><span class="comment">//操作数所在存储单元地址</span></span></span><br></pre></td></tr></table></figure><p>执行周期:因为指令不一定一样长,所以执行周期非常复杂.(是不是不考了(喜))</p><ol><li>非访存指令</li></ol><blockquote><ol><li><code>CLA</code> 清空ACC加法器</li><li><code>COM</code> 按位取反</li><li><code>SHR</code> 算术右移</li><li><code>CSL</code> 循环左移</li><li><code>STP</code> 停机指令(内部有一个标志,置零就能停机.)</li></ol></blockquote><ol start="2"><li>访存指令</li></ol><blockquote><ol><li>加法指令 <code>ADD X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; <span class="title">MDR</span></span></span><br><span class="line"><span class="function"><span class="params">(ACC)</span>+<span class="params">(MDR)</span> -&gt; ACC</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>存数指令 <code>STA X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; W <span class="comment">//写命令</span></span><br><span class="line">ACC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR)</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>取数指令 <code>LDA X</code> 把某个数字存放到 <code>ACC</code> 里面</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; MDR</span></span><br><span class="line"><span class="function">MDR -&gt; ACC</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>无条件转移 <code>JMP X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; PC</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>有条件转移 <code>BAN X</code> (负则转移)<br>$$A_0\cdot Ad(IR)+\bar A_0(PC)\to PC$$</li></ol></blockquote><p><strong>周期分析</strong> :只有间接访存和间接转移是需要间址周期的,其他的(非访存,直接访存,转移)都是只有取址和执行周期.</p><p>中断周期:1.保存断点2.形成中断服务程序的入口地址3.关中断</p><p>程序断点存入0地址(法一)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> -&gt; MAR <span class="comment">//</span></span><br><span class="line"><span class="number">1</span> -&gt; W <span class="comment">//保存程序断点</span></span><br><span class="line">PC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR) <span class="comment">//保存到MAR指定内存当中</span></span><br><span class="line">              <span class="comment">//硬件向量法:</span></span><br><span class="line">向量地址 -&gt; PC <span class="comment">//保存向量地址</span></span><br><span class="line"><span class="number">0</span> -&gt; EINT     <span class="comment">//允许生成断点(置零)</span></span><br></pre></td></tr></table></figure><p>程序断点进栈:(法二)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(SP<span class="number">-1</span>) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; W</span><br><span class="line">PC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR)</span><br><span class="line">向量地址 -&gt; PC</span><br><span class="line"><span class="number">0</span> -&gt; EINT</span><br></pre></td></tr></table></figure><p>也可以软件进行中断, <code>M-&gt;PC</code> 代替向量地址</p><p>许许多多信号:</p><p>$\overline{MREQ}$ :访存控制信号<br>$\overline{IO}/M$ :访问IO/存储器的信号<br>$\overline{RD}$ :读命令<br>$\overline{WR}$ :写命令<br>$INTA$ :中断响应信号<br>$HLDA$ :总线相应信号</p><p><code>ADD@X</code> 是间接寻址的加法方式.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里放一些名词.&lt;/p&gt;
&lt;p&gt;给一个芯片是 $a&#92;times b$ 位的能得出:&lt;br&gt;
地址线: $&#92;log a$&lt;br&gt;
数据线: $b$&lt;/p&gt;
&lt;p&gt;故引脚数量: 地址线(dram一般用地址复用技术就会减半)+数据线+1(片选线)+1(或2,读写控制线)&lt;/p&gt;
</summary>
      
    
    
    
    <category term="DE" scheme="https://narafluorine.github.io/categories/DE/"/>
    
    
    <category term="ComputerScience" scheme="https://narafluorine.github.io/tags/ComputerScience/"/>
    
  </entry>
  
  <entry>
    <title>多项式与生成函数</title>
    <link href="https://narafluorine.github.io/2024/11/29/10031_%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    <id>https://narafluorine.github.io/2024/11/29/10031_%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/</id>
    <published>2024-11-29T15:28:26.000Z</published>
    <updated>2025-04-25T19:00:34.597Z</updated>
    
    <content type="html"><![CDATA[<p>多项式全家桶(悲).</p><h2 id="例题">例题</h2><ol><li>分治FFT: 给定序列 $g_n$ 求 $f_n$ ,其中 $f_n=\sum_{j=1}^if_{i-j}g_{j}$ ,边界 $g_0=0,f_0=1$ ,对 $998244353$ 取模.</li></ol><p>设生成函数 $f(x)=\sum_{i=0}^{\infty}f[i]x^i,g(x)=\sum_{i=0}^{\infty}g[i]x^i,g[0]=0$<br>然后使用生成函数卷积:<br>$$f(x)*g(x)=\sum_{i=0}^{\infty}\sum_{j=0}^{\infty}f[i]\times g[j]x^{i+j}$$<br>令 $k=i+j$ ,<br>$$f(x)*g(x)=\sum_{k=0}^{\infty}\left(\sum_{j=0}^kf[k-j]g[j]\right)x^k$$<br>当 $k&lt;0$ 时 $\sum_{j=0}^kf[k-j]g[j]=f[k]$ 这就是个普通卷积.<br>当 $k=0$ 时 $\sum_{j=0}^kf[k-j]g[j]=0(g[0]=0)$ 于是和 $f(x)$ 对比一下发现差了个常数项,于是我们有<br>$$\boxed{f(x)*g(x)+f[0]=f(x)}$$<br>于是有<br>$$\boxed{f(x)=\frac{f[0]}{1-g(x)}}$$<br>使用多项式求逆即可解决.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多项式全家桶(悲).&lt;/p&gt;
&lt;h2 id=&quot;例题&quot;&gt;例题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;分治FFT: 给定序列 $g_n$ 求 $f_n$ ,其中 $f_n=&#92;sum_{j=1}^if_{i-j}g_{j}$ ,边界 $g_0=0,f_0=1$ ,对 $998244353$</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="NumberTheory" scheme="https://narafluorine.github.io/tags/NumberTheory/"/>
    
  </entry>
  
  <entry>
    <title>2-SAT</title>
    <link href="https://narafluorine.github.io/2024/11/28/10030_2-SAT/"/>
    <id>https://narafluorine.github.io/2024/11/28/10030_2-SAT/</id>
    <published>2024-11-28T09:33:14.000Z</published>
    <updated>2025-04-25T19:00:32.144Z</updated>
    
    <content type="html"><![CDATA[<p>2-SAT是求解满足性问题的算法.<br>实际测下来发现对于如何转成图论问题要求有点高,但是代码非常好写.</p><p>先把2-SAT转成图论问题:有 $2n$ 个点,前n个表示该点为假的时候的连边情况,后面n个点是该点为真的时候的情况.令有向边 $a\to b$ 的意义是选 $x$ 就必须选 $y$ .</p><p><strong>i,j不能同时选</strong> :选了 $i$ 就要选 $j’$ ,选 $j$ 就要选 $i’$ .故 $i→j’,j→i’$ .一般操作即为 $a_i\mathrm{xor} a_j=1$</p><p><strong>i,j必须同时选</strong> :选了 $i$ 就要选 $j$ ,选 $j$ 就要选 $i$ .故 $i→j,j→i$ .一般操作即为 $a_i\mathrm{xor} a_j=1$</p><p><strong>i,j任选一个</strong> :选了 $i$ 就要选 $j’$ ,选 $j$ 就要选 $i’$ .选 $i’$ 就要选 $j$ ,选 $j’$ 就要选 $i$ .故 $i→j’,j→i’,i’→<br>j,j’→i$ .一般操作即为 $a_i\mathrm{or}a_j=1$</p><p><strong>i必须选</strong> :直接 $i’→i$ ,可以保证无论怎样都选 $i$ .一般操作为给出的 $a_i=1$ 或 $a_i\mathrm{and}a_j=1$</p><p>所以对于条件 <code>a为真或b为真</code> ,要把刚好满足的进行连边,也就是说,如果a真,后面b无论怎样都满足的时候不用连边,所以连 <code>a-&gt;b+n</code> 表示a假的时候b为真,以及 <code>b-&gt;a+n</code> 表示b为假的时候a必须为真.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2-SAT是求解满足性问题的算法.&lt;br&gt;
实际测下来发现对于如何转成图论问题要求有点高,但是代码非常好写.&lt;/p&gt;
&lt;p&gt;先把2-SAT转成图论问题:有 $2n$ 个点,前n个表示该点为假的时候的连边情况,后面n个点是该点为真的时候的情况.令有向边 $a&#92;to b$ 的意</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="Algorithm" scheme="https://narafluorine.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>欧拉计划</title>
    <link href="https://narafluorine.github.io/2024/11/11/20007_%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92/"/>
    <id>https://narafluorine.github.io/2024/11/11/20007_%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92/</id>
    <published>2024-11-11T12:24:34.000Z</published>
    <updated>2025-05-12T14:43:17.483Z</updated>
    
    <content type="html"><![CDATA[<p>在这里放一些欧拉计划的心得体会(我不会放答案的,可以放心阅读)…</p><p>欧拉计划是鼓励大家网上搜索除了答案之外的知识的.</p><p>欧拉计划使用 <code>CC-BY-NC-SA 4.0</code> 协议,所以这篇文档也是这个协议写成的.<br><a href="https://projecteuler.net">欧拉计划网址</a></p><h2 id="板子">板子</h2><h3 id="简易文件解析-欧拉计划-Project-Euler">简易文件解析(欧拉计划 Project Euler)</h3><p>形如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;BBB&quot;</span>,<span class="string">&quot;CCC&quot;</span>,<span class="string">&quot;DDD&quot;</span></span><br></pre></td></tr></table></figure><p>的文件,在此代码的解析下会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AAA</span><br><span class="line">BBB</span><br><span class="line">CCC</span><br><span class="line">DDD</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;<span class="built_in">eulerDecode</span>()&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;words.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="comment">/*给定文件名称*/</span></span><br><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;res;<span class="comment">/*文件格式必须是 &quot;a&quot;,&quot;b&quot;,&quot;c&quot; 这样的格式,会解析出abc三个字符串 &quot;*/</span></span><br><span class="line">res.second.<span class="built_in">resize</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>(),ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">ff^=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// res.second.push_back(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line">res.first++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">1</span>)res.second[res.first]+=ch;</span><br><span class="line">&#125;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="广义五边形数-负数也会取到">广义五边形数(负数也会取到)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">pentagonal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line">num=(num&amp;<span class="number">1</span>^<span class="number">1</span>)?-(num&gt;&gt;<span class="number">1</span>):(num+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (num*(num*<span class="number">3</span><span class="number">-1</span>))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//生成一个0,1,2,5,7,12,15,22,26,35,40的五边形数列</span></span><br></pre></td></tr></table></figure><h2 id="0050">0050</h2><p>求1e6以内的哪个质数可以写成连续质数的和.</p><p>连续质数考虑前缀和.我们枚举两端然后检查质数.这里有一个小剪枝是,如果质数大于1e6直接跳出来递增的那个端点,能让程序快几十倍.</p><h2 id="0061">0061</h2><p><a href="https://pe-cn.github.io/61/">题干</a></p><p>首先预处理所有的n变形数,发现直接枚举是2.3e10的必超时,因为没有利用循环的性质.</p><p>使用图论降低复杂度.想象前半部分和后半部分有一条边,然后图论dfs一遍即可.<br>会出好几个结果,是因为图上是循环的…</p><h2 id="0066">0066</h2><p>解一个二元二次丢番图方程,使用pell方程的解法,把根号转成连分式找环然后合并求解.</p><p>现在考虑支持高精度的怎么写,发现只需要支持加和乘就好了,问题解决…</p><h2 id="0078">0078</h2><p>整数划分:把一个整数表示成若干别的数字的加和形式.</p><p>使用dp可以让复杂度压成 $n^2$ ,还不够.</p><p>上网查阅结论得知,划分数 $p(n)$ 有以下性质:<br>$$p(k)=p(k-1)+p(k-2)-p(k-5)-p(k-7)+p(k-12)+p(k-15)-p(k-22)-+±-…$$<br>其中p(0)认为是1,负的认为是0.</p><p>其中这个减掉的数列叫做 <strong>五边形数</strong> ,满足通项公式(注意这个通项是正负交替的, $0,1,-1,2,-2,…$ )<br>$$a_n=n(3n-1)/2,n\in{0,\pm1,\pm2,\pm3,…}$$<br>然后求能被1000000整除的那一项就可以计算了,注意对1000000取模就不会炸int(为啥傻傻的用py) <s>(但是多用用py确实能增进熟练度,比方说开一个二维数组之类的能少踩坑)</s></p><h2 id="0084">0084</h2><p>给一个大富翁(非常非常复杂的规则)然后求哪三个点的落点概率最高.</p><p>使用1e8次模拟即可,计算机最擅长随机数模拟.</p><h2 id="0088">0088</h2><p>长度为n的集合,满足所有元素的和等于所有元素的积,求对于长度为2-12000的集合,最小的这样的积和数组成的集合的和(即相同积和数只算一次)</p><p>这是一道40%的题,卡了Flu一个寒假…</p><p>观察样例,发现有个通解是 ${1,1,1,1,…,2,k}$ ,所以答案上界呼之欲出,就是24000.</p><p>但是发现有例外:<br>$$k=5,{1,1,2,2,2}$$<br>于是考虑对每个数暴力分解,然后求出这个数可能匹配上哪个长度,单个的复杂度是 $O(\sqrt n)$ 的.</p><p>但是所有数字一起分解就会省不少事,我们使用dfs,记录当前深度,乘积,加和,然后在dfs中进行分解.同时为了避免出现 $6=3\times2=2\times3$ 的情况,额外记录一个num表示上一个因数,保证因数单调,也就是每个分解最多出现1次,然后更新答案即可,复杂度如下,Flu不知道是多少,反正实际上跑的飞快(可能是数据太小了).<br>$$O(\sum_{i=1}^{12000}(2+d(i)))$$<br>d(i)是i的因数个数</p><p>时间也是做题的法宝…</p><h2 id="0093">0093</h2><p>注意炸精度…除的数字再乘回去c艹会默认下取整然后WA了…</p><h2 id="0094">0094</h2><p>难点在于快速判断一个开根号的数字是不是整数.</p><p>对开根号的结果平方之后再跟自己比较,可以直接i64比较,避免炸精度</p><h2 id="0103">0103</h2><p>发现生成出来的&quot;特殊集合&quot;可能不是最优解,但是很接近最优解.<br>于是取一个lim在其附近暴搜正确答案,实际上lim取1就能出来,复杂度 $O(3^7\alpha)$ , $\alpha$ 是检查的一个小常数,大概是五百.</p><h2 id="0106">0106</h2><p>非常妙的组合数学题.题干:有一个单调递增的数列,你要从中选两个不重的集合,然后对其进行两种检查:1:如果两个集合元素数量不一样,则元素更多的集合一定更大.2:两个集合元素和不重复.你要先对这些集合进行检查1,而且不必要不进行检查2,求对大小12的数列有多少个集合需要进行检查2.</p><p>已知长度为4的数列有25种集合选法,其中只有1个需要进行检查2,长度为7的数列有70个集合需要进行检查2.</p><p>首先,检查1的本质是找出所有两个集合大小相同的选法.<br>对于一个共同的size,考虑什么时候不需要检查2:假设元素为 <code>1212</code> ,显然集合1小于集合2,不需要检查.相似地, <code>1122</code> 同理,这是一个走楼梯问题,只能往下或者往右走,同时不能超过对角线,问有多少种情况.这是卡特兰数典题.</p><p>所以答案就是<br>$$\binom{n}{2}Cat_1+\binom{n}{4}Cat_2+…$$</p><h2 id="0110">0110</h2><p>解方程…<br>$$\frac1x+\frac1y=\frac1n$$<br>因为xyn都是整数,所以显然xy都大于n.<br>设y=n+k,带入求出x的方程<br>$$x=n+\frac{n^2}{k}$$<br>于是答案就是 $d(n^2)-1$ ,具体地,我们对n进行质因数分解,设当前质数为p,次方为q,对总共答案的贡献是 $2q+1$ ,所有解就是把贡献乘起来,然后除二加一(因为xy可以交换,+1是把xy相同的解加上),由于这个题要求解大于一个数,我们暴搜每个质数的次方,逆着算出来即可.</p><h2 id="0118">0118</h2><p>用1-9组数字,问有多少个全是质数的集合.</p><p>显然是枚举数字位置和每位是数字相连还是开一个新数字.</p><p>然后哈希不知道为啥碰撞了,寄…</p><p>下面是两种不同的哈希方式,区别只是快速幂那里换了点位置,然而后者不知道为啥会撞哈希(虽然都是质数),而前者能够通过.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line">res=(res+<span class="built_in">qp</span>(ttmp[i],(i64)<span class="number">7</span>,<span class="number">998244353</span>))%<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line">res=(res+<span class="built_in">qp</span>((i64)<span class="number">7</span>,ttmp[i],<span class="number">998244353</span>))%<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0119">0119</h2><p>某个数满足其各位和的某次方等于这个数,首先暴力检查是nlog,跑一下发现比较稀疏,换方法,使用log以及把各位和的函数优化成o1,结果除了炸精度之外跑的更慢了…所以 <code>log()</code> 函数的复杂度当成log.</p><p>发现似乎可以枚举次方的底数,然后对其次方暴力检查,而且取一个1e23的lim可以很快得到底数最大是 $9<em>23$ ,于是 $nlog^2n$ ,n是 $9</em>23$ 得解.</p><h2 id="0122">0122</h2><p>加法链,不知道咋算可以<a href="https://oeis.org/A003313">OEIS</a>一下看看剪枝.<br>实际暴搜的时候用vector记录整个加法链,然后暴力枚举每个链和当前值合并,然后dfs即可,跑的飞快,因为上界(快速幂法)是确定的log级别.</p><h2 id="0129">0129</h2><p>这个题过于水了,难度绝对没有 $45%$ .问 $A(i)=111111…\equiv0\mod x$ 求最小的i大于1e6的最小x.</p><p>首先对于一个剩余系,最大环就是本身,所以i大于1e6则x必须大于1e6.然后从1e6开始暴搜就行,非常简单,跑的飞快.</p><h2 id="0267">0267</h2><p>你开始有一块钱,你每轮把 $f$ 倍率的钱拿去下注,每次翻硬币正面朝上可以获得这么多钱,反面朝上就失去这么多钱.1e3轮之后你的钱有概率突破1e9,问选取最合适的 $f$ 使概率最大,你有多大概率超过1e9.</p><p>首先把加法化成乘法:正反面朝上分别会获得 $(1+2f),(1-f)$ .所以丢N次硬币假设正面次数为n,有<br>$$W(n)=(1+2f)^{n}(1-f)^{N-n}$$<br>显然这个函数是单调的,直观理解为赢的次数越多钱越多.那么必定存在一个最小的 $n$ 值 $n_0$ 满足 $W(n)\ge M$ ,列式子如下:<br>$$n\ge\frac{\log M-N\log(1-f)}{\log(1+2f)-\log(1-f)}$$<br>我们要求右边函数的最小值,使用 <code>scipy.optimize</code> 的 <code>fminbound</code> 解决,得到 $n_0=\lceil h(x_0)\rceil$ .</p><p>剩下的就简单了,答案是 $\frac{\sum_{i=n_0}^N\binom{N}{i}}{2^N}$</p><h2 id="0313">0313</h2><p>肯定先找规律,显然最后的空格在哪里不是我们关心的,所以f(n,m)具有对称性,我们采取手模的方式:</p><table><thead><tr><th>f(n,m)</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>2</td><td>5</td><td>9</td><td>15</td><td>21</td></tr><tr><td>3</td><td></td><td>13</td><td>17</td><td>23</td></tr><tr><td>4</td><td></td><td></td><td>21</td><td>25</td></tr><tr><td>5</td><td></td><td></td><td></td><td>29</td></tr></tbody></table><p>发现斜角是+8,斜角第一直出是+4,之后都是+6.我们要在表内寻找 $p^2$ ,因为斜角增长是8,所以整张表会接近 $\frac{p^2_m}8$ ,Flu计算所有质数平方模6的后缀和,也就是说一个数字匹配上了之后整个剩余系中余数相同的也能匹配上,所以双指针l是斜角,r是质数,复杂度 $O(\frac{1e12}8)$ ,实际上跑了三分钟左右,还挺快.</p><p>论坛里说直接把整个式子算出来(m&gt;n有f(m,n)=8m+2n-13)然后对每个质数算贡献也行.</p><h2 id="0317">0317</h2><p>空间上有一个点,能够向任意方向发射速度相同的质点,质点只受重力作用,问所有轨迹形成的图形的体积是多少.</p><p>物理题.结论就是,这个包络面是一个抛物面,且相似于直抛,代数得到最高点坐标之后直接算积分就可以了.</p><h2 id="0323">0323</h2><p>很奇怪的概率题.网上的解法:<br>$$P(1个比特从0翻到1)=\frac12$$<br>$$P(1个比特在N轮后还是0)=(\frac12)^n$$<br>$$P(1个比特在N轮后翻到1)=1-(\frac12)^N$$<br>$$P(N轮后所有比特都是1)=(1-(\frac12)^N)^{32}$$<br>$$P(在第N轮所有比特正好翻到1)=(1-(\frac12)^N)^{32}-(1-(\frac12)^{N-1})^{32}$$<br>$$E=\sum_{i=1}^{\infty}i((1-(\frac12)^i)^{32}-(1-(\frac12)^{i-1})^{32})$$</p><h2 id="0340">0340</h2><p>和0555类似的函数构造.<br>$$f(n)=\begin{cases}<br>n-a&amp;n&gt;b\\<br>f(a+f(a+f(a+f(a+n))))&amp;n\le b\end{cases}$$<br>错误!!!这年头直接用py画图了,谁还打表啊…直接用py画图找规律即可.</p><h2 id="0345">0345</h2><p>给一个15*15方阵,每行每列选一个元素(元素不能同行不能同列),求最大和.</p><p>Flu乱搞过去的…对每行记录一个唯一编号表示选该行第几列的数字,然后每次随机俩数字交换,如果更大保留,更小就丢解换回去,重复500次即可…<br>这能草过去我是没想到的…</p><p>论坛里说状压dp,记录二进制表示哪行有数字了,于是直接dp即可…唐完了.</p><h2 id="0429">0429</h2><p>首先,题干的元因数就是分解之后 $p_i^{e_i}$ 这个要么不选要么都选上,所以答案就是<br>$$\prod_{i=1}^n(p_i^{2e_i}+1)$$<br>然后考虑 $p_i$ 在 $n!$ 中出现多少次:<br>$$f(n,p)=\left\lfloor\frac np\right\rfloor+\left\lfloor\frac n{p^2}\right\rfloor+\left\lfloor\frac n{p^3}\right\rfloor+…$$<br>这表示 $p,p^2,p^3,…$ 对阶乘的贡献.</p><h2 id="0443">0443</h2><p>结论假了…</p><p>Flu:观察到f(x)不会大于3*x(Flu并不会证明).<br>然后考虑取等的情况,发现是有规律的:对所有取等的地方做差,得到一个最大数和很多小数,发现最大数数列之间的关系是最大数乘2加上一堆小数,而且1e6以内的小数大小不会超过1e5.于是可以通过倍增的方法求出最靠近1e15的取等的数字,剩下的暴算过去.<br>然而,因为这个最大数数列是倍增的,最靠近1e15的是8e14,意味着Flu只是把1e15的nlog优化成1.2e14的nlog,还是T飞…</p><p>查阅网上的题解说是:发现 $\gcd$ 不等于1的实际上很少,于是对一个 ${i,g}$ 考虑下一个gcd不等于1的设为 ${i+k,pre(g+k-1)}$ ,中间的gcd都是1.我们有 $\gcd(g+k-1,i+k)&gt;1$ ,根据gcd性质相减有 $\gcd(g-i-1,i+k)&gt;1$ 然后发现前面是常数,于是质因数分解之后对k求最小值,跳转过去即可,复杂度未知总之是能过.</p><h2 id="0493">0493</h2><p>有七种颜色的球,每种10个,你要不放回拿20个,求期望颜色种类数,保留9位小数.</p><p>没想到Flu组合数学知识从这里发家…一个很简单的思路:首先,颜色对抽取本身没有影响.对每一种颜色,计算其出现的概率:(总概率-删掉这种颜色的随便抽的概率)<br>$$1-\frac{\binom{60}{20}}{\binom{70}{20}}$$<br>然后因为颜色都是一样的,所以上式乘7,秒了…<br>看来Flu真的有必要学一下组合数学了,</p><h2 id="0500">0500</h2><p>求最小的有 $2^{500500}$ 个因子的数字,对500500503取模.</p><p>根据因数分解定理,把大数拆成很多小的质数,最后因子数就是这些质数次方+1的乘积.<br>注意到这个因子只是2的倍数,意味着质数有且只有2^n这一种情况,所以每个质数转移只有一种代价,那就是从2^x转移到2^{x+1},于是线筛1e7得到质数之后贪心选取后面的大质数扔到前面即可.</p><h2 id="0510">0510</h2><p>三个圆两两相切(切点不一样),三个圆同时和一条直线相切,问有多少组解.</p><p>根据笛卡尔定理,有:<br>$$\frac1{\sqrt{r_A}}+\frac1{\sqrt{r_B}}=\frac1{\sqrt{r_C}}$$<br>改写一下:<br>$$r_C=\frac{r_Ar_B}{r_A+r_B+2\sqrt{r_Ar_B}}$$<br>所以如果 $r_C$ 是一个有理数则 $r_Ar_B$ 必须是平方数.<br>设 $r_A=ta^2,r_B=tb^2,a\le b,\gcd(a,b)=1,t&gt;0$ ,所以我们有三元组<br>$$\left(ta^2,tb^2,\frac{ta^2b^2}{(a+b)^2}\right)$$<br>可以得到 $(a+b)^2|t$ .<br>那么重新令 $r_A=dp^2(p+q)^2,r_B=dq^2(p+q)^2,r_C=dp^2q^2$ ,这就是一对解,枚举互质的 $(p,q)$ ,然后枚举 $d$ 即可.</p><blockquote><p>如何枚举(p,q)?<br>在<a href="https://en.wikipedia.org/wiki/Stern%E2%80%93Brocot_tree">法雷树</a>上进行枚举.</p></blockquote><h2 id="0516">0516</h2><p>5-光滑数是指最大质因数不超过5的数.你要在1e12范围内对于欧拉函数是光滑数的所有数字求和.</p><p>我们发现,满足条件的数字一定有以下性质:<br>$$2^a3^b5^cp_1p_2…$$<br>其中abc随便取,后面的p数组都满足 $p-1=2^x3^y5^z$ .<br>于是我们暴搜所有前半部分和质数部分,拼一起求和.</p><p>但是实际上比较考验剪枝能力.<br>常规枚举每个质数选和不选会T飞.<br>对于一个质数,我们枚举和这个质数下一个相乘的质数,然后递归下去,同时排序之后一旦大于立刻剪枝,这样的质数选择是单调且不重的,而且才能真正快速的算出来答案,见代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">u32 res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> num,i64 prod)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp[i]*prod&gt;lim)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res+=tmp[i]*prod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=num;i&lt;=ttop;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(prod*pp[i]&lt;=lim)</span><br><span class="line"><span class="built_in">dfs2</span>(i+<span class="number">1</span>,prod*pp[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0555">0555</h2><p>给一个奇怪的函数,找所有 $f(n)=n$ 的点,求和.<br>$$f(n)=\begin{cases}<br>n-a&amp;n&gt;b\\<br>f(f(n+c))&amp;n\le b<br>\end{cases}$$<br>这个函数和0340这个题特别相似,都是大于某个值就返回原数减固定值,小于某个值就套娃加,这种函数的共性就是,和n的差是一个分段函数.</p><h2 id="0577">0577</h2><p>给一个长度为n的正三角形,每条边被长度为1的等分,然后点之间连线,然后让你数每一个不同大小的三角形中的最大正六边形的数目.很妙的找规律题.</p><p>首先模样例,一个长度为1的六边形在更大的三角形中是等差数列的贡献,这个可以O(1)算.然后测6的样例,发现出了一个边长为2的六边形,但是还伴随一个长度为 $\sqrt3$ 的六边形出来,考虑枚举点,但是很难写,这道题被搁置.</p><p>我们换一个思路:由贪心知一个新的六边形中心第一次总是以正三角形中心为中心出现,所以尝试把正三角形中心放到正三角形的边角,只考虑这六分之一的情况,发现正好就是长度为n的能产生n种新三角形,于是做一下前缀和,暴力一下就出来了.</p><h2 id="0684">0684</h2><p>解法非常妙的题.</p><p>首先发现满足性质的数字是末尾全是9,头是剩下的数字,也就是 $(x%9)(x/9)$ 这么个形式,于是 <strong>考虑直接+1然后总和减去n</strong> 就能避免因为9导致的无穷级数收敛问题,从而把前面全部转换成一个等比数列.</p><h2 id="0692">0692</h2><p>找规律题.首先考虑直接模拟:设dp[i]表示i的最小个数,转移方程<br>$$dp[i]=\min_{j=1}^{i-1}(dp[i-j]&gt;2j)$$<br>然后得到一个数列,发现(没有发现可以oeis,这个数列不太好瞪眼看出来)数列是前面的数列各种重复,然后最后插一个从来没出现的斐波那契数字.然后直接分段维护前缀和就行了.</p><h2 id="0700">0700</h2><p>给一个数列,求其前缀min等于数列末端元素的和.</p><p>首先跑一下pr发现后面是一个质数.两个数都是1e15级别的数,显然不是暴力能搞定的,因为质数保证了在[0,p]内所有值都会出现一次.</p><p>对于这种题一般有两种解法:求到一半,发现函数再后面几乎无影响了,然后直接交算了一半的解.<br>或者中途换算法.</p><p>发现在2e10左右,欧拉币大小已经收敛到了2e5,此时可以使用exgcd求解值对应的步数,具体地,求解 $ax+by=1$ 然后乘值c,对步数排个序,算一下前缀min.<br>总复杂度 $O(2e10+2e5\log2e5)$ .</p><h2 id="0709">0709</h2><p>你每天能得到一个袋子,你可以选择把之前的袋子任意偶数个套到当前袋子中,也可以让袋子空着,问有多少种情况<br>$$f(n+1)=\sum_{k\le n}^{k\in even}\binom{n}{k}f(k)f(n-k)$$<br>这个式子怎么理解?设f(k)是有k个袋子的情况,当前所有的袋子要合并都会合并到n+1号袋子中,所以先选k个袋子,然后这k号袋子随意套娃产生f(k),最后剩下的n-k个袋子随意套娃产生f(n-k),结果就是这个.</p><h2 id="0731">0731</h2><p>计算一个很复杂的式子的末尾10位,还是考虑小数点右移,然后对剩下的级数求其小数位,注意因为进位问题不能和820再乘十一个做法.</p><h2 id="0757">0757</h2><p>不难推算出来,就是求一个式子 $f(x,y)=x(x+1)y(y+1),x,y&gt;0$ 在 $[1,10^{14}]$ 这个区间有多少个数字,然后最噩梦的地方就在于快速计算这里.</p><p>答案是,没有好办法.你去<a href="https://oeis.org/A072389">OEIS</a>上搜也搜不到公式,这下是谁都帮不了你了.</p><p>怎么办?暴力呗.(看答案傻眼了,vector+sort都是nlog比set和map快了几倍,)</p><p>但是依然有一个比较好玩的性质:笔者暴力的时候发现x在几万的时候,y随便取值,res都基本不变化了,这个时候交一发不知道为啥就过了…</p><p>也许数学题进阶的暴力就是看函数&quot;收敛&quot;之后直接交一发赌一下能不能过???</p><h2 id="0816">0816</h2><p>随机点集最短距离,好像是典,通过分治大法可以做到 $O(n\log n)$ ,非常神秘.</p><h2 id="0820">0820</h2><p>求解分数 $\frac ab$ 在n位的小数情况(n=1e7).</p><p>我们把小数点右移,得到 $\frac{a}{b}\times10^{n-1}$ ,而且我们不需要知道整数部分情况,所以求<br>$$\frac{a\times10^{n-1}\mod b}{b}$$<br>这个数字的小数第一位,即<br>$$\left\lfloor\frac{10\times(a\times10^{n-1}\mod b)}{b}\right\rfloor$$</p><h2 id="0836">0836</h2><p>文字游戏.给了一堆很麻烦的定义,但是看最后一句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Give as your answer the concatenation of the first letters of each bolded word.</span><br></pre></td></tr></table></figure><p>你的答案只需要由那堆定义的首字母连起来,实际上的 <code>f(20230401,57)</code> 根本不用求,这是文字游戏.(气炸了)</p><h2 id="0853">0853</h2><p>皮萨诺周期:斐波那契数列对任意一个数取模都会形成一个周期数列,这个周期叫做皮萨诺周期,一个数的最长皮萨诺周期是 $6n$ .</p><p>看了眼thread:对于皮萨诺周期 $p$ ,所有可能的 $n$ 中必须有的性质是:<br>$$n|\gcd(F_{\pi(n)},F_{\pi(n+1)}-1)$$<br>然后暴力检查即可.</p><h2 id="0869">0869</h2><p>一个显而易见的方法是,把所有质数的01做成一颗树,然后跑一遍树形概率DP.</p><p>但是这么着有一个问题,比如 <code>11</code> <code>1111</code> 显然的策略是全部猜1,同时期望是 $3$ ,所以实际上还需要记录一个数字在哪里停止,也就是说前半部分 <code>11</code> 是共有的,前面能分到1的概率,但是后面因为有一个数字在这里停止了,这个&quot;停止&quot;也要分到概率,而且这一层概率分配完了之后不会影响下面的计算.</p><h1>隐藏题目(Bonus)</h1><p>隐藏题目目前只有五道(20250210),是做题的时候掉落的,不清楚是不是固定掉落,这里给出Flu能看到的隐藏题目名称以及解法(网上的资料还是太少了…)</p><h2 id="problem-1">problem -1</h2><p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$ , we get $3,5,6$ and $9$ . The sum of these multiples is $23$ .<br>如果我们列出 $10$ 以内 $3$ 或 $5$ 的所有自然数倍数,能得到 $3,5,6$ 和 $9$ ,他们的和是 $23$ .</p><p>Find the sum of all the multiples of $3$ or $5$ below infinity.<br>找到小于正无穷的所有 $3$ 或 $5$ 的自然数倍数和.</p><h3 id="题解-spoiler">题解(spoiler)</h3><p>有一个结论:自然数的和是-1/12,我不会证,网上查到的.然后容斥一下就行了,答案很好算,这里不公布.<br>$$\sum_{i=1}^\infty i=-\frac1{12}$$<br>证明(启发式,一句话就是仙,注意力惊人):设<br>$$S=1+2+3+…,T=1-2+3-4+…$$<br>根据下面的生成函数<br>$$\frac1{(1+x)^2}=1-2x+3x^2-4x^3+…$$<br>然后带入 $x=1$ 得到 $T=\frac14$ ,然后有<br>$$T=(1+2+3+…)-2\times(2+4+6+…)=-3S$$<br>QED.</p><h2 id="problem-18i">problem 18i</h2><p>Let $R(p)$ be the remainder when the <strong>product</strong> $\prod_{x=0}^{p-1}(x^3-3x+4)$ is divided by $p$ . For example, $R(11)=0$ and $R(29)=13$ .<br>设 $R(p)=\prod_{x=0}^{p-1}(x^3-3x+4)\mod p$ ,比如 $R(11)=0,R(29)=13$ .</p><p>Find the sum of $R(p)$ over all primes $p$ between $10^{9}$ and $1.1\times10^9$ .<br>求<br>$$\sum_{i=10^9}^{1.1\times10^9}R(i),i\in prime$$</p><h3 id="题解-spoiler-2">题解(spoiler)</h3><p>Wrong Answers</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>I don’t know(noob).<br>不会(菜).</p><h2 id="problem-Heegner">problem Heegner</h2><p>Among all non-square integers $n$ with absolute value not exceeding $10^3$ , find the value of $n$ such that $\cos(\pi\sqrt n)$ is closest to an integer.<br>在绝对值不超过 $10^3$ 的所有非平方数整数中,找到让 $\cos(\pi\sqrt n)$ 最接近整数的数.</p><h3 id="题解-spoiler-3">题解(spoiler)</h3><p>查阅资料:<br>$$e^{ix}=\cos x+i\sin x$$<br>$$\cos z=\frac{e^{iz}+e^{-iz}}2$$<br>$$\sin z=\frac{e^{iz}-e^{-iz}}{2i}$$<br>直接带式子算就行了…<br>然后被炸 <code>long double</code> 精度,发现事情没有这么简单…<br>最后用python的mpmath库过去了,负数去exp大小能有e42这么大,普通python也会炸精度,难绷.</p><p>事实上查阅维基百科得知&quot;黑格尔数&quot;,页面有一个马尔努金常数,说e的多少次方pi非常接近整数,直接盒出来了,根本不用算(但是这个题确实让Flu学会了使用py的高精度库和类的书写)</p><h2 id="problem-root13">problem root13</h2><p>The decimal expansion of the square root of two is $1.\underline{4142135623}730…$ .<br>根号二的无限循环展开是 $1.\underline{4142135623}730…$ .</p><p>If we define $S(n,d)$ to be the the sum of the first $d$ digits in the fractional part of the decimal expansion of $\sqrt n$ , it can be seen that $S(2,10)=4+1+4+…+3=31$ .It can be confirmed that $S(2,100)=481$ .<br>如果我们定义 $S(n,d)$ 代表 $\sqrt n$ 的前 $d$ 位展开的各位数字和,可以得到 $S(2,10)=4+1+4+…+3=31$ .同理 $S(2,100)=481$ .</p><p>Find $S(13,1000)$ .<br>计算出 $S(13,1000)$ .</p><p>Note: Instead of just using arbitrary precision floats, try to be creative with your method.<br>注意:除了直接用高精度库函数之外,请发挥创造力用自己的办法算出来.</p><h3 id="题解-spoiler-4">题解(spoiler)</h3><p>最简单的一集.方法超级多.</p><ol><li>使用Python的decimal库(前人留库,后人乘凉,不要重复造轮子).</li><li>模拟高精度,把13扩大好多好多倍然后手工模拟计算.</li><li>牛顿迭代(求导算切线)</li><li>泰勒展开(能手算的那种)</li><li>网上的手开根号大法(就是那个乘20啥啥的那个方法)</li></ol><p>总之这个题非常简单,真就白给,拿到题先出的题解再出的代码.</p><h2 id="problem-secret">problem secret</h2><p>Find the secret word by the following instructions below.<br>根据下面的指示找到秘密单词.</p><p>The statement of this problem is contained in an image.<br>这个题目将会在一张图像中进行.<br>Starting with this image, at each step, simultaneously repleace each pixel with the sum of its four neighbours in orthogoanal dirctions.<br>在图上开始,每次同时用与该单元格相邻的四个格子的字母总和替换该单元格的元素.<br>Note that, although the original pixels are represented by 8-bit integers, in later steps they can be arbitrarily large without any<br>integer overflow.<br>注意,虽然每一个字母使用char的8位表示,在计算中他们被认为可以任意大的,不会有溢出.</p><p>The edges of the image are considered “glued” in such a way that pixels on the top edge are neighbours to those on the bottom<br>edge; and similarly for left and right edges.<br>注意:该图被认为是拼接起来的,也就是说下边和上边相邻,左边和右边相邻.<br>As illustration, in the following diagram, where each square represents a pixel, the pixel marked with “A” has neighbours “B” to “E”; and the pixel marked with “a” has neighbours “b” to “e”.<br>如下图,字符 <code>A</code> 的四个相邻格是 <code>BCDE</code> ,字符 <code>a</code> 的四个相邻格子是 <code>bcde</code></p><table><thead><tr><th>x</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>d</td></tr><tr><td>2</td><td>B</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>A</td><td>E</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>C</td></tr><tr><td>4</td><td>D</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>b</td></tr><tr><td>6</td><td>e</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>c</td><td>a</td></tr></tbody></table><p>After $10^{12}$ steps, the secret word will be revealed by taking each pixel modulo $7$ .<br>在 $10^{12}$ 步后,通过将每个单元格模 $7$ 来揭示秘密单词.</p><h3 id="题解-spoiler-5">题解(spoiler)</h3><p>I don’t know(noob).<br>不会(菜).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在这里放一些欧拉计划的心得体会(我不会放答案的,可以放心阅读)…&lt;/p&gt;
&lt;p&gt;欧拉计划是鼓励大家网上搜索除了答案之外的知识的.&lt;/p&gt;
&lt;p&gt;欧拉计划使用 &lt;code&gt;CC-BY-NC-SA 4.0&lt;/code&gt; 协议,所以这篇文档也是这个协议写成的.&lt;br&gt;
&lt;a hr</summary>
      
    
    
    
    <category term="GAME" scheme="https://narafluorine.github.io/categories/GAME/"/>
    
    
    <category term="Math" scheme="https://narafluorine.github.io/tags/Math/"/>
    
    <category term="Algorithm" scheme="https://narafluorine.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JS-无限循环</title>
    <link href="https://narafluorine.github.io/2024/11/11/40000_%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/"/>
    <id>https://narafluorine.github.io/2024/11/11/40000_%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</id>
    <published>2024-11-11T12:24:34.000Z</published>
    <updated>2025-05-08T16:59:03.803Z</updated>
    
    <content type="html"><![CDATA[<p>想使用js创建一系列展示技术力的页面,但是众所周知,一个网站又有看板娘,鼠标点击会有华丽特效,完了吧屏幕上还有点会被鼠标吸住,然后页面概述会在切换页面变一个,…,种种特效很浪费算力,所以Flu打算把这些华丽特效拆开放在不同的页面(谁不喜欢华丽呢?但是华丽的代价就是卡,只好被拆开)</p><p>不是更好的电脑买不起,而是把华丽的特效拆开更有性价比.</p><script>function sayHello() {alert('Hello from JavaScript');}</script><div><button οnclick="sayHello()">Click me</button></div><h1>这是Markdown标题</h1><p>以下是HTML内容：</p><div>  <h1 id="html-title">这是一个HTML标题</h1></div><style>  #html-title {    color: green;  }</style><script>  document.getElementById('html-title').style.fontSize = '4em';</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想使用js创建一系列展示技术力的页面,但是众所周知,一个网站又有看板娘,鼠标点击会有华丽特效,完了吧屏幕上还有点会被鼠标吸住,然后页面概述会在切换页面变一个,…,种种特效很浪费算力,所以Flu打算把这些华丽特效拆开放在不同的页面(谁不喜欢华丽呢?但是华丽的代价就是卡,只好被</summary>
      
    
    
    
    <category term="OTH" scheme="https://narafluorine.github.io/categories/OTH/"/>
    
    
    <category term="JavaScript" scheme="https://narafluorine.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>XCPC 2025</title>
    <link href="https://narafluorine.github.io/2024/11/04/20006_XCPC2025/"/>
    <id>https://narafluorine.github.io/2024/11/04/20006_XCPC2025/</id>
    <published>2024-11-04T04:27:36.000Z</published>
    <updated>2025-05-30T03:33:21.953Z</updated>
    
    <content type="html"><![CDATA[<p>美好的新赛季从补题开始.</p><h1>pre</h1><ul><li>小心 $n$ 和 $m$ 写反.</li><li>注意数组不要开小或开大.</li><li>注意计算变量范围,不要能到 <code>long long</code> 的变量开 <code>int</code> .</li><li>感觉容易挂的地方写 <code>assert</code> .</li><li>感觉容易写挂的题,样例很弱的题一定要写对拍.</li><li>注意模数是不是质数.</li><li>注意操作的顺序.</li><li>认真读题,模拟完样例再写程序.</li><li><strong>注意清空数组</strong> .</li><li><strong>相信所有题都是可做的</strong> .</li><li>感觉不可做的,有较高多项式复杂度暴力的题,思考: <strong>分治</strong>,贪心,DP,线段树.</li><li>感觉不可做的,有指数级复杂度暴力的最优化题,思考: 贪心,DP,<strong>流和割</strong>,暴搜加优化.</li><li>感觉不可做的,有指数级暴力的数数题,思考: DP,行列式,暴搜加优化,拉格朗日插值,<strong>容斥</strong>,造自动机.</li><li>后遭,交互题,考虑: 增量法,分治,暴搜策略.</li><li>DP优化:凸优化(wqs),斜率优化,决策单调性,交换状态和值域,减少状态(包含常数上的).</li><li>感觉不可做的题,考虑各个元素,集合之间有什么关系.</li><li>就算过了样例,感觉没问题也要仔细分析一下各种情况,必要时对拍.</li><li>分段函数用vector,常数比map小很多.</li><li><strong>做题别急</strong> .</li><li>任何n较大的,可以快速算单项的东西考虑分段打表.</li><li>子区间问题有时可以类似最大子段和使用线段树维护,也有可能分治.</li></ul><p>Flu感觉很妙的idea才会被留下来,剩余的直接删掉,我这不是题解区.</p><h1><a href="https://qoj.ac/contest/1924?v=1">第一次集训</a></h1><p>Flu出ABC,队友1的G疯狂WA,2的H没开出来.</p><h2 id="K">K</h2><p>位运算炸int了: <code>Map|=(str[i]=='#')&lt;&lt;i</code> 前面半句话会转成int导致i在64左右的范围会直接挂掉.</p><h2 id="I">I</h2><p>题解非常妙,横着看很难,我们发现构造的排列对于一个位置,下一个位置是固定的,也就是说竖着一个除了末尾的字符串下一个出现的位置也是固定的,所以直接哈希检查即可,非常妙的题.</p><h1><a href="https://vjudge.net/contest/706236#overview">第二次集训</a></h1><p>概况:配合的不好,中间出现至少三次两个人开一个题的情况,<br>Flu开局开A,队友B开局也开A,结果这个题到最后都没过,疯狂WA,-6,爽!<br>Qiank出了俩签到,Flu出了一个签到,Qiank开字符串假了然后不想写了扔给我…<br>作为看过AveMujica的人(<s>赤石,豪赤多赤</s>),Flu当然是很快写过了,</p><p>榜单也很好看,开始的时候是倒数第三,剩半个小时的时候出现神之一手,两分钟过两个题,然后一跃正数第三,难绷.</p><h2 id="A">A</h2><p>给定两个罗盘的度数,计算方位角.<br>实际上边界会变,取平均数的时候注意一下(赛时没注意到就WA好多发,)</p><h2 id="C">C</h2><p>题意:你对城市建筑拍一张照,得到像素图,建筑可以被简化为一根柱子.<br>你每次可以询问一个像素点,返回该点是建筑还是天空(没东西),求最高建筑的位置和高度.(交互题,你要在 $12000$ 次询问内返回答案)</p><p>显而易见的结论是,对值域二分检查,nlogn绝对不够用.<br>然后mxx显然不会减小,对更高的值域二分,也显然不够用.<br>首先用一次检查mxx+1判断该楼会不会比当前更高,更高再二分.设想梯度图会被卡,还是不够用.</p><p>我们已经到算法优化的极限了,怎么办???<br>随机化查询坐标.(我人傻了,这也行???)</p><p>于是这个题就被乱搞草过去了…</p><h1><a href="https://vjudge.net/contest/707488#overview">第2.5次集训</a></h1><p>周六和周天是两场集训,正常情况下参加一场即可,Flu周天去要电协的QQ群所以没参加,这是后来补题的.</p><h2 id="F">F</h2><p>括号匹配,但是&lt;&lt;和&gt;&gt;能匹配,&gt;&gt;和&lt;&lt;也能匹配上,给一个这俩组成的序列,你要输出按照括号规则匹配的结果.</p><p>思路:我们强制最左端是 <code>[</code> 打头,不管他是&lt;&lt;还是&gt;&gt;,然后直接匹配即可.</p><h2 id="D">D</h2><p>难点在于给一个数n,你要把它分组,每组可以为0,组之间有顺序,而且你分的组要单调不增,你要O(1)算这个值.</p><p>答案:爆典…<br>其实和n分成任意组(非0),每组不大于m的dp状态是一样的,难点在于证明.</p><p>你竖着想,5可以分成3和2,这是两根柱子.</p><p>然而你横着想,因为单调不增所以你的柱子都是从左打头从右结尾的,而且宽度上限就是m,得证.</p><p>于是Flu会算法还是没做出来,输!</p><h2 id="A-2">A</h2><p>给一个函数 $f((l,r))=(\min(a_{l-r}),\max(a_{l-r}))$ ,q次询问每次lr问最少几次可以让 $f(f(f(f(…f((l,r))))))$ 取到 $(1,n)$ .</p><p>div1的E…有点不敢做.</p><h1><a href="https://codeforces.com/gym/105578">ICPC2024沈阳站</a></h1><h2 id="J">J</h2><p>草,前四个最大值和后四个最大值比较,写的时候犯唐把队名和战力全用string存,结果真的能过样例,(int比较炸了)</p><h2 id="B">B</h2><p>构造两个数列满足 $a_ib_j\mod nm$ 不重.<br>大胆猜,nm不互质无解,然后尝试从nm出发,在n这里构造1+km%nm,在m这里构造1+kn%nm.</p><h2 id="D-2">D</h2><p>先来一个结论:交换两个元素对一个排列的逆序对奇偶性的变化取决于区间差,排列的整体左移右移多少次可以转换为区间上的很多次交换,所以逆序对奇偶性变化可以O(1)算出来.</p><p>所以,给的其实是一个排列,然后交换AB实际上是假的,对哪交换都可以,只需要算出开始的逆序对奇偶性就行了,而且因为刚开始只需要计算奇偶性,甚至能O(n)算出来.</p><h2 id="E">E</h2><p>不会写状压dp了…</p><p>温习一下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>&lt;&lt;<span class="number">16</span>][<span class="number">16</span>]<span class="comment">//状态为i,结尾为j时最小</span></span><br><span class="line"><span class="keyword">for</span> 枚举状态  </span><br><span class="line"><span class="keyword">for</span> 枚举上一个结尾点</span><br><span class="line"><span class="keyword">for</span> 枚举新加进去的二进制状态</span><br></pre></td></tr></table></figure><h2 id="G">G</h2><p>给n个点,这些点组成一个简单多边形,你最多询问n次,每次返回多边形在 $x=i$ 处的切片长度,你要回答多边形面积.</p><p>很神秘的题.你要计算 $\int_{-1000}^{1000}f(x)\mathrm dx$ 的值,每次询问回答一个点的 $f(x)$ .<br>有一个性质:这个面积函数在x轴两点之间是线性变化的,于是考虑询问端点.具体地:<br>坐标都不相同:f(x)分了(n-1)段,询问分段点即可(两端是0).<br>有相同的:f(x)分了(n-2)段,询问最左最右两个端点,然后对分段区询问中点.</p><p>然而题目返回的是 <code>p/q</code> 的形式, pq 可能很大,使用longdouble最后向0.5取整(发现题目都是整数点,所以答案只可能是 <code>x.0</code> 或 <code>x.5</code> ).</p><h2 id=""></h2><h1><a href="https://pintia.cn/problem-sets/994805046380707840/exam/problems/type/7">天梯赛2025</a></h1><p>拒绝写解题报告,语文太烂了读不懂题.</p><h1><a href="https://vjudge.net/contest/708329">第三次集训</a></h1><p>全是思维题.(中间试着打了一下CTF的Warm,感觉很好玩)<br>Flu被队友带飞了,一个题也没做出来…</p><h2 id="A-3">A</h2><p>有一个nm矩阵,部分格子有障碍物(*)否则为空,你要对空格子用[0,k]种颜色涂色,其中[1,k]种颜色同行同列只能出现一次,0颜色可以无限使用,设你用了z个0,代价是 $ck+dz$ ,cd是给定常数,求最小花费.</p><p>题解说是网络流,然而还有一种办法可过.</p><h2 id="H">H</h2><h2 id="E-2">E</h2><p>有一个n节点的环,你每次可以选任意[1,m]个连续节点涂成黑色,对面也要这么做,不能涂色的人输,现在nm多组询问,对每次询问输出谁赢.</p><blockquote><p>先手第一步除非可以直接赢,否则环会被拆成链.然后后手除非m是1否则必然可以把链断成完全相同的两部分,然后后手只需要模仿先手就一定会赢.</p></blockquote><h2 id="G-2">G</h2><p>给n个不覆盖的矩形,你要找出所有的对称轴.注意:假如正方形可能由一个长条+两个小正方形组成,这个正方形依旧有4条对称轴.</p><p>观察发现对称轴必须经过一个点,而且最多有四个,只要能够 $O(n\log n)$ 检查就已经赢了.由于矩形可能是拼起来的,所以常规记录线的方法不可行,要考虑用点记录矩形.</p><p>结论:被偶数个矩形覆盖的点无效(矩形覆盖是仅限边界四个点的),如图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-+      +-x-+</span><br><span class="line">| |      | | |</span><br><span class="line">x-+-+    x-x-x</span><br><span class="line">|   |    |   |</span><br><span class="line">+---+    +---+</span><br></pre></td></tr></table></figure><p>然后直接翻转检查点即可.<br>但是不出意外的话是要出意外了,点绕直线对称的结论是啥来着?<br>$$Ax+By+C=0\\ x’=x_0-2A\frac{Ax_0+By_0+C}{A^2+B^2}\\ y’=y_0-2B\frac{Ax_0+By_0+C}{A^2+B^2}$$</p><h1><a href="https://vjudge.net/contest/708404">第四次集训</a></h1><p>和银趴(Linux <strong>in</strong>stall <strong>par</strong>ty)撞了(悲).<br>全场唐完,刚开始是队友1的D见祖宗了,然后是队友1的G数组开小了(开1e5题干2e5),然后Flu的H结论对了但是不敢写(诈骗)一度悬置这个题.然后队友2的B疯狂WA,然后屡了一下思路之后过了.</p><p>G:单调栈题,没做出来,后来发现是弹&quot;时间差&quot;个元素即可.<br>A:empty中场来到我这说, <code>0011</code> 就是 <code>gugugaga</code> (捣乱来了)…</p><h2 id="A-4">A</h2><p>括号树…是啥?</p><p>首先把0011转换为括号匹配,可知合法不合法.然后建括号树进行拓扑序计数即可.<br>括号树:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">((())())</span><br><span class="line">   / \</span><br><span class="line">(())  ()</span><br><span class="line">  |</span><br><span class="line"> ()</span><br></pre></td></tr></table></figure><p>以某个点为根的树拓扑序(子节点一定要出现在根节点前面)的个数:<br>$$n!\left(\prod_{i=1}^nsz_i\right)^{-1}$$<br>$sz_i$ 表示以 $i$ 节点为根的子树大小.</p><p>看别人的码才发现,逆元有一个 $O(n)$ 的递推方式,之前一直用的快速幂 $O(n\log n)$ 算逆元,常数大的不行.</p><h2 id="E-3">E</h2><p>给一张图代表城市,城市会被水淹,求从1点出发淹没所有城市的最小水高度.</p><p>Flu原先想的是,一个城市被淹的时候走的都是最短路,所以直接对每个城市的边权取min然后对所有城市的min取max就行了,然而不对,比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line">4/ \5</span><br><span class="line">2---3</span><br><span class="line">  1</span><br></pre></td></tr></table></figure><p>这种情况最小边权是4,因为淹没了2之后淹没3是顺手的事.</p><p>所以正解是最小生成树.(最小生成树咋求来着?排序边,并查集…)</p><p>然后是网络流,有一个定理:</p><blockquote><p>最大流==最小割</p></blockquote><h2 id="C-2">C</h2><p>有一个问题: <strong>哈密顿路</strong> 和 <strong>哈密顿回路</strong> 不是一个东西.前者只需要遍历就可以了,后者则需要状压DP.</p><p>然而…<br>树上进行链的合并要动态维护sz,同时由于dp值会发生变化,要开一个辅助数组临时存放,然后在一整个链合并完之后在集中推平,草,合并链都不会写,这么唐吗…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">sz[pos]=<span class="number">1</span>;dp[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[pos])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line"><span class="built_in">fill</span>(tmp,tmp+<span class="number">400</span>,<span class="number">-1145141919810</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sz[pos];++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=sz[v];++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="built_in">min</span>(i+j<span class="number">-1</span>,<span class="number">2</span>*<span class="built_in">min</span>(i,j));++k)&#123;</span><br><span class="line">tmp[i+j-k]=<span class="built_in">max</span>(tmp[i+j-k],k*num[pos]+dp[pos][i]+dp[v][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> _=<span class="number">1</span>;_&lt;=sz[pos]+sz[v];++_)&#123;</span><br><span class="line">dp[pos][_]=tmp[_];</span><br><span class="line">&#125;</span><br><span class="line">sz[pos]+=sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://vjudge.net/contest/714948">第五次集训</a></h1><p>决定省赛谁打星的关键比赛,Flu队直接拿第一出线了(empty佬的恩情还不完…),第二次可以不参与了.</p><h2 id="B-2">B</h2><p>设 $f(x)$ 是一个数分解成质数的最小个数.<br>对于偶数,使用哥德巴赫猜想(除了2),必定能够拆成两个奇质数.<br>对于奇数,首先是拆成2和f(奇数-2),然而还可以拆成三个奇质数的和(偶数+奇质数,又是猜想),所以上界是3.</p><h1><a href="https://codeforces.com/gym/103486">VP</a></h1><p>回想起来了括号匹配结论是卡特兰数.</p><h2 id="I-Nim-Game">I Nim Game</h2><p>读假题了…题干要求的是对区间加,然后区间判断nim能不能玩.</p><p>nim能不能玩是用线性基,然后区间加可以用树状数组差分解决.</p><h2 id="C-Random-Number-Generator">C Random Number Generator</h2><p>BSGS…<br>Flu学数学还没看出来这个,真成战犯了…</p><p>回顾BSGS和二次剩余的区别:分别让求<br>$$a^x\equiv b\mod p$$<br>$$x^2\equiv a\mod p$$<br>这俩不一样…</p><h2 id="-2"></h2><h1><a href="https://codeforces.com/gym/105922">吉林省赛</a></h1><blockquote><p>Flu:省赛铜直接退役.</p></blockquote><p>失误:开局QianK一直在开签到,签麻了.<br>失误:Flu线段树用mod当根,取模的时候炸了(我错了我错了).</p><h2 id="C-3">C</h2><p>如何计算巨运算符,如<br>$$pow=\sum_{x_1=0}^{n-1}\sum_{x_2=0}^{n-1}\sum_{x_3=0}^{n-1}a_{(x_1+x_2+…+x_n)\mod n}$$<br>最后发现最后一个就是sum数列或者prod数列,然后考虑向前处理:<br>碰到sum说明有n个这样的数列,所以乘n即可.<br>碰到prod要对其求n次方.</p><h2 id="H-2">H</h2><p>两段区间上要支持区间加上某个数字,你要判断两段区间可以任意交换顺序后是否相等.</p><p>哈希.但是要考虑怎么哈希,赛时想到的方法有:</p><ol><li>维护区间所有和的二次方和.(以及其加强版,维护三次方和(初始时再加一个随机偏移))</li><li>选一个数做底,维护其a次方的和.</li><li>维护区间所有数的抑或和.</li></ol><p>事实上,方法1很容易被卡,加强版过了这个题.<br>方法2好写好调,为什么不写?<br>其实做法3假了,因为区间加和不是区间抑或,所以是没法维护的…</p><p>两段区间是分奇偶的,如何维护?<br>考虑把奇数做成正的,偶数做成负的,判断其加和是否为0即可(所以只需要一颗线段树).</p><h2 id="OTH">OTH,</h2><p>群U说可以直接把交互逻辑写进程序,然后留个开关即可.</p><h1><a href="https://codeforces.com/gym/105924">东北赛</a></h1><blockquote><p>死磕BH失败,铜了…<br>成就:三色牌…(省赛金,东北赛银,全国邀请赛铜…)</p></blockquote><p>失误:死磕.<br>修正:多看题,在写代码之前禁止交流解法,防止被带偏.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;美好的新赛季从补题开始.&lt;/p&gt;
&lt;h1&gt;pre&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;小心 $n$ 和 $m$ 写反.&lt;/li&gt;
&lt;li&gt;注意数组不要开小或开大.&lt;/li&gt;
&lt;li&gt;注意计算变量范围,不要能到 &lt;code&gt;long long&lt;/code&gt; 的变量开 &lt;code&gt;in</summary>
      
    
    
    
    <category term="ACM" scheme="https://narafluorine.github.io/categories/ACM/"/>
    
    
    <category term="Contest" scheme="https://narafluorine.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>CTF</title>
    <link href="https://narafluorine.github.io/2024/11/04/20008_CTF/"/>
    <id>https://narafluorine.github.io/2024/11/04/20008_CTF/</id>
    <published>2024-11-04T04:27:36.000Z</published>
    <updated>2025-06-01T10:38:53.680Z</updated>
    
    <content type="html"><![CDATA[<h1>MISC</h1><h2 id="Google">Google</h2><ol><li><code>&quot;aaa&quot;</code> 必须出现的词汇</li><li><code>site:aaa.com</code> 只搜索这个网站的结果</li><li><code>-aaa</code> 结果不出现某个词汇</li><li><code>imagesize:500x500</code> 只搜索这么大的图片(像素)</li><li><code>filetype:pdf</code> 只搜索pdf格式的文档</li><li><code>*</code> 通配符,不确定这个位置填啥可以写</li><li><code>aaa or bbb</code> <code>aaa and bbb</code> 返回包含两个词任何一个或者都包含的结果</li><li><code>BEFORE:1999</code> <code>AFTER:1999</code> <code>1999..2000</code> 查询指定年份的材料</li><li><code>related:aaa.com</code> 查询相关的网站</li><li><code>cache:aaa.com</code> 返回这个网站的缓存版本</li></ol><h2 id="Webs">Webs</h2><p><strong>编码</strong>:<br><a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">CTF常见编码</a><br><a href="http://www.hiencode.com/">CTF在线工具1</a><br><a href="https://ctf.bugku.com/tools">CTF在线工具2</a></p><p><strong>取证</strong>:<br>硬盘镜像取证⼯具 FTK Imager AutoPsy<br>内存镜像取证⼯具 Volatility<br>加密容器⼯具 Veracrypt<br>各⼤国内取证技术提供商的⼯具<br><a href="https://forensics.xidian.edu.cn/">取证相关</a></p><p><strong>流量分析</strong>:<br><a href="https://www.jianshu.com/p/9b9438dff7a2">OSI七层模型</a><br><a href="https://blog.supersassw.com/p/ctf-note-misc_3/">流量分析入门</a><br><a href="https://www.cnblogs.com/mq0036/p/11187138.html">Wireshark使用</a></p><h2 id="属性">属性</h2><p>右键查看属性有时候能得到意外之喜…</p><h2 id="ZIP伪加密">ZIP伪加密</h2><p>ZIP文件格式有两种,其加密标志位分别在不同的位置:</p><p><code>50 4B 01 02 xx xx xx xx 01 08</code> :目录区加密,只需要管 <code>01</code> 改成偶数就行了, <code>08</code> 记录额外信息(不用管).<br><code>50 4B 03 04 xx xx 00 00</code> :局部文件加密标记,仍然是前半部分是偶数表示未加密.<br><code>78 9C AD 50</code> 是Zlib文件的开头编码.</p><p>友情提示,zlib文件(gz)Win可以用cyberchef解压.<br>同时,部分linux自带binwalk.</p><h2 id="Wireshark">Wireshark</h2><p>抓包软件.</p><p><code>http contains &quot;POST&quot;</code> 搜索内容有 <code>POST</code> 的所有包.<br><code>http.request.method==POST</code> 也可以查找包<br><code>ip.addr==x.x.x.x</code> 查找IP是xxxx的包<br><code>tcp.port==80</code> 查找端口为80的包</p><p><code>analysis:Follow TCP stream</code> 是对数据流的分析然后整合成一个完整信息的过程.</p><h2 id="图片宽高改变">图片宽高改变</h2><p>使用脚本破解,原理是CRC校验.</p><h2 id="png补齐IDAT">png补齐IDAT</h2><p>原理还是CRC校验,使用 <code>pngcheck.exe -v target.png</code> 自动检查计算CRC值是否正确.(Flu做的题里面是把IDAT改成IOAT然后再改图片高度让图片缺了一块,要靠自己补齐,)</p><h2 id="文件夹带私货">文件夹带私货</h2><p>出现文本 <code>xx,txt</code> , <code>PK</code> 值有可能是zip压缩包(zip的创始人名字简写为PK),改拓展名,如果有密码就暴力破解.</p><h2 id="LSB图像隐写">LSB图像隐写</h2><p>因为很多颜色人是分辨不出来的,所以可以使用rgb颜色最低位进行隐写,隐藏信息或者加隐形水印.拉高对比度会显出原形.</p><h1>Crypto</h1><h2 id="Webs-2">Webs</h2><p><a href="https://shal10w.github.io/">大佬博客1</a><br><a href="https://d33b4t0.com/">大佬博客2</a></p><p><a href="https://tool.bugku.com/jiemi/">解密网站</a></p><h2 id="数论基础">数论基础</h2><h3 id="勒让德符号">勒让德符号</h3><p>$$\left(\frac ap\right)=a^{(p-1)/2}\mod p$$<br>意义:判断一个数字是不是模 $p$ 的二次剩余(是1不是p-1(模意义下的-1))0表示a是p的倍数.</p><h3 id="二次剩余的性质">二次剩余的性质</h3><p><code>Quadratic Residue</code> 是二次剩余根, <code>Quadratic Non-residue</code> 表示非二次剩余数字.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Quadratic Residue * Quadratic Residue = Quadratic Residue</span><br><span class="line">Quadratic Residue * Quadratic Non-residue = Quadratic Non-residue</span><br><span class="line">Quadratic Non-residue * Quadratic Non-residue = Quadratic Residue</span><br></pre></td></tr></table></figure><h3 id="勒让德符号中质数的性质">勒让德符号中质数的性质</h3><p>$$\left(\frac{-1}p\right)=\begin{cases}<br>1&amp;p\equiv1\mod4\\<br>-1&amp;p\equiv3\mod4\end{cases}$$<br>$$\left(\frac{2}p\right)=\begin{cases}<br>1&amp;p\equiv\pm1\mod8\\<br>-1&amp;p\equiv\pm3\mod8\end{cases}$$<br>这个符号是完全积性函数.</p><h2 id="常见编码">常见编码</h2><p><a href="https://hackliu.com/?p=245">密码总结1</a></p><p>旗语 中文注音符号 25对色码 维吉尼亚密码(凯撒密码+密钥) 棋盘密码 ASCII<br>仓颉码 五笔 四角号码 郑码 中日韩统一表意文字(和制汉字 韩制汉字,“国字”)<br>adfgx密码</p><p>阴阳怪气编码 喵喵喵语(原理是零度等宽字符编码)</p><p><a href="https://hanzi.unihan.com.cn/GanZhi/Index/">干支纪年法</a><br><a href="http://code.mcdvisa.com/">中文电码</a><br><a href="https://asecuritysite.com/cipher/code_sms">SMS Cipher</a>几个1-8之内的数字<br><a href="https://quipqiup.com/">Q单词表爆破</a><br><a href="http://web.chacuo.net/charsetuuencode">UUencode</a>,示例 <code>89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]</code><br><a href="https://www.toolkk.com/tools/jjencode-encode-decode">JJencode</a><br><a href="https://www.toolhelper.cn/EncodeDecode/QuotedPrintable">Quoted-Printable</a><br><a href="https://www.sojson.com/encrypt_rabbit.html">Rabbit加密</a>(CyberChef上的这个巨难使,-1,别用)据说好像是U2开头<br><a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">Rot47加密</a>所有字母ascii都在33-126范围<br><a href="https://www.metools.info/code/playfair_186.html">playfair加密</a>关键词&quot;公平&quot;<br><a href="https://www.guballa.de/vigenere-solver">vigenere维吉尼亚密码</a></p><p>碰到 <code>1745347988</code> 这种很大的而且以 <code>174</code> 开头的数字考虑时间.<br>碰到32位字母加数字联想md5,然后<a href="https://cmd5.com">爆破</a>(.hash结尾的更说明了一切)</p><h2 id="ASCII">ASCII</h2><p>注意,ascii编码范围在0-127之间,碰到奇怪的进制可以尝试使用按照ascii值域分组整除密码.<br>看到一堆有超过127的可以考虑整体下移几个数字(rot操作)</p><h2 id="base64">base64</h2><p>出现 <code>ABC...Zabc...z+/=</code> 字符集字样联想base64.<br>代码段出现 <code>/3</code> <code>*4</code> 字样联想base64.</p><h2 id="XOR">XOR</h2><p>一定要记住,xor是可以逆反过来的!!!<br>对于确定是xor加密的字符串,可以尝试通过把 <code>flag&#123;</code> 这个前缀输进去反向解出密钥前几位,然后猜后几位(注意在cyberchef记得勾选UTF-8编码的密钥).</p><h2 id="凯撒密码">凯撒密码</h2><p>尝试差值变换(第一个字符差1,第二个字符差2之类的…)</p><h2 id="RSA签名">RSA签名</h2><p>信息使用你<strong>朋友的公钥</strong>加密,信息的哈希用<strong>自己的私钥</strong>加密,然后朋友用自己的私钥和你的公钥解密,得到哈希和原信息,然后比对一下,就叫做签名.</p><h2 id="RSA">RSA</h2><p>PS: <code>int(&quot;FFFF&quot;,16)</code> 能把字符串转成十六进制数字.</p><blockquote><p><code>hex(d)</code> 一个数字转hex,返回0x啥一堆<br>有的时候给出的十六进制前面带前缀 <code>0x</code> 的同时后面会带后缀 <code>L</code> ,做题交flag不对了可以加上试试.</p></blockquote><p>网上有很全的博客,这里讲一些例题</p><h3 id="0-enc-key">0 <code>.enc</code> <code>.key</code></h3><p>碰到这俩凑一对的去找<a href="http://tool.chacuo.net/cryptrsakeyparse">rsa在线公私钥分解</a></p><h3 id="1-e-16">1 e=16</h3><p>从rsa的角度,e和phi不互质,不存在d.<br>但是从二次剩余的角度,e=16意味着可以折半每次得到c^8,c^4,…逐次得到原始信息.</p><h3 id="2-pqrs-但是next-prime">2 pqrs,但是next_prime()</h3><p>题干很吓人:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alpha=<span class="number">8</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = gmpy2.next_prime(p*alpha)</span><br><span class="line">r = gmpy2.next_prime(q*alpha*<span class="number">2</span>)</span><br><span class="line">s = gmpy2.next_prime(r*alpha*<span class="number">4</span>)</span><br><span class="line">n = p**<span class="number">8</span> * q**(<span class="number">16</span>) * r**(<span class="number">32</span>) * s**<span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们发现一个事实:对于一个任意的p,对应的qrs都是确定的.</p><p>所以直接值域二分,比较n大还是小就行了,复杂度O(logn),这个题草过去了.</p><h2 id="JSFuck">JSFuck</h2><p>使用 <code>!+[]()</code> 等几个字符实现全部js功能的加密方式.使用 <code>CPH Judge</code> 套上 <code>console.log()</code> 的壳直接跑.粘贴到浏览器会有很多问题,又是禁止粘贴不明代码又是不信任啥的,怎么跑个代码这么难,死妈浏览器</p><h2 id="抑或加密">抑或加密</h2><p>好像再跑一遍就回去了.</p><h1>Reverse</h1><h2 id="IDA-EXE-ELF">IDA(EXE ELF)</h2><p>用F5查看反汇编的C代码.<br>Shift+F12能查看字符串界面</p><p>IDA反编译的代码大部分可以直接粘到C++去跑,有一个特例: <code>4*i</code> 改成 <code>i</code> 是因为在反编译界面是按字节统计的,但是C++界面是正常的内存下标取址,取址公式不一样导致偏差.</p><p>IDA反编译的代码很原始,数组有可能在反汇编时拆成一堆变量,导致函数传参是数组但是表现为一个参数,发生&quot;RE&quot;.举例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mov  [ebp+var_20030], 5Ah ; <span class="string">&#x27;Z&#x27;</span>v7[<span class="number">0</span>] = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">mov  [ebp+var_2002C], 4Ah ; <span class="string">&#x27;J&#x27;</span>v7[<span class="number">1</span>] = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20028], 53h ; <span class="string">&#x27;S&#x27;</span>v8    = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20024], 45h ; <span class="string">&#x27;E&#x27;</span>asmv9    = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20020], 43h ; <span class="string">&#x27;C&#x27;</span>-&gt;v10   = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">mov  [ebp+var_2001C], 61h ; <span class="string">&#x27;a&#x27;</span>tov11   = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20018], 4Eh ; <span class="string">&#x27;N&#x27;</span>C++v12   = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20014], 48h ; <span class="string">&#x27;H&#x27;</span>v13   = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20010], 33h ; <span class="string">&#x27;3&#x27;</span>v14   = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">mov  [ebp+var_2000C], 6Eh ; <span class="string">&#x27;n&#x27;</span>v15   = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">mov  [ebp+var_20008], 67h ; <span class="string">&#x27;g&#x27;</span>v16   = <span class="string">&#x27;g&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Shift+F12可以查看字符串区.</p><h2 id="Jadx-gui-APK-CLASS">Jadx_gui(APK CLASS)</h2><p>apk函数的main函数位于 <code>xxx.com</code> 里面的 <code>MainXxxx</code> .</p><h2 id="总结">总结</h2><ol><li><p><code>*11110100001010000101111#</code> 有可能是一个迷宫类型的题目.</p></li><li><p>端序:大端序:高位字节存在低地址处,低位字节存在高位地址处.(x86 arm)<br>小端序:高位字节存在高位字节处.(通过网络发送数据进行传输)<br>IDA的数据是大端序(比如 <code>char* arr=0x776F646168LL</code> )需要先转成char,即 <code>wodah</code> 然后再反转成 <code>hadow</code> 才是实际上字符串的样子.</p></li><li><p>常见函数的方向<br><code>strcat(a,b)</code> a&lt;-b 把b字符串加到a字符串末尾<br><code>strcpy(a,b)</code> a&lt;-b<br><code>a=join(b,c)</code> a&lt;-b+c 组合字符串<br><code>fill(a+1,a+1+n,b+1)</code> a&lt;-b</p></li></ol><h1>Web</h1><p>Web低手.</p><h2 id="BurpSuite">BurpSuite</h2><ol><li>监听用法:开启本地代理,然后占一个端口.然后启动!,监听那个端口,然后所有经过的流量就都能被监听.(感觉原理是本地部署一个假的VPN网关)</li><li>修改Cookie用法:还是先启动,然后在页面找到Cookie(Raw)然后发送给Repeater,在这里能随意修改,改好之后点击Apply就能获得反应(flag居然这么神奇就出来了)</li><li>爆破id:使用内嵌浏览器,刷新页面收到一个请求,然后暴力枚举id,然后按照返回请求的长度排序,看最长的,然后找到Renderer(渲染器)得到flag.</li><li>爆破密码:同上</li></ol><h2 id="nc">nc</h2><p>netcat指令,Windows有一个nc的实现,用法:cmd套一个nc64.exe<br>然后输入你想连的IP和端口,输入之后没反应,flag呢???<br>实际上你连接计算机之后,你这就是一个小的bash,你要输入指令获得flag.</p><h2 id="pwntools">pwntools</h2><p>使用py脚本远程连接服务器(代替nc指令)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">conn=remote(<span class="string">&#x27;socket.cryptohack.org&#x27;</span>,<span class="number">11112</span>)</span><br><span class="line"></span><br><span class="line">data_to_send = &#123;</span><br><span class="line"><span class="string">&quot;buy&quot;</span>: <span class="string">&quot;flag&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 把json格式转成str格式</span></span><br><span class="line">json_data = json.dumps(data_to_send)</span><br><span class="line"></span><br><span class="line">conn.sendline(json_data.encode())<span class="comment"># 发送服务器的格式是byte,所以要encode</span></span><br><span class="line"></span><br><span class="line">response = conn.recvline().decode()<span class="comment"># 接收也是byte,转str要decode,recvall()是接收所有信息,recvall会一直接收</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Server response:&quot;</span>, response)</span><br><span class="line"></span><br><span class="line">conn.close() <span class="comment"># 关闭连接</span></span><br><span class="line"><span class="comment"># 此外conn还有一个recvuntil(str)判定指定字符串的,可以过滤废话</span></span><br></pre></td></tr></table></figure><p>json交互</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">json_recv</span>():</span><br><span class="line">    line = r.recvline()</span><br><span class="line">    <span class="keyword">return</span> json.loads(line.decode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_send</span>(<span class="params">hsh</span>):</span><br><span class="line">    request = json.dumps(hsh).encode()</span><br><span class="line">    r.sendline(request)</span><br></pre></td></tr></table></figure><h2 id="HackBar">HackBar</h2><p>能够自定义好多协议的啥啥东西(http头字段),在这里写一点这么多多多选项都是啥.</p><ul><li>User-Agent 使用什么浏览器</li><li>DNT 希不希望被跟踪(1是不希望)</li><li>X-forwarded for 你上网的原始IP</li><li>Via 好像是服务器代理的url</li><li>Referer 该请求的来源</li></ul><h2 id="PHP">PHP</h2><p>php笑传之 <code>Capture Capture Bug</code> ,下文是代码简析.</p><p>show_source(<strong>FILE</strong>) :让背后php代码变得五颜六色,同时展示在前端.<br>include(“a.php”) :插入脚本.<br>/index.php :一个首页面.<br>/index.phps :后缀为phps的是存放php源代码的,但不是所有网站都有.</p><ol><li>url编码:cyberchef的url编码有一个小锅,不会把字母数字也使用url编码,所以要使用burpsuite的编码器进行url编码.同时,浏览器键入的url会进行一层解码,所以记得再加一层</li><li>数字和字符串弱类型比较,如果字符串一定要比数字大可以构造一个比数字大的字符串,然后末尾添一个 <code>a</code> 表明这是个字符串绕过比较.</li><li>array_search搜字符串绕过:字符串与数字比较会转成0,然后0==0直接绕过返回true,需要搜索的字符串不一定要存在了.</li><li>php get传参 <code>/?a=112&amp;b=abc&amp;c=&#123;&quot;m&quot;:a,&quot;n&quot;=[[],0]&#125;</code> 上面表示了几种不同方式的参数传递.</li><li>伪协议… <code>php://xxx</code> 和 <code>data://xxx</code> 等多刷几个题再更</li></ol><h2 id="Py-nc">Py nc</h2><p>让Python能够和nc服务器&quot;友好交互&quot;的脚本,拿到flag之后程序会因为连接关闭立刻终止.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="number">52881</span>)</span><br><span class="line"><span class="built_in">print</span>(io.recvuntil(<span class="string">b&#x27;开局前的最后一句废话&#x27;</span>))</span><br><span class="line">io.sendline(<span class="string">b&#x27;N&#x27;</span>) <span class="comment"># 开始游戏</span></span><br><span class="line">io.recvline() <span class="comment"># 读掉一行空行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">pile=io.recvline().strip()  <span class="comment"># 读一行,去掉两端空白字符</span></span><br><span class="line">start=pile.find(<span class="string">b&#x27;: &#x27;</span>) <span class="comment"># 输入是 arr:114 514 xxx</span></span><br><span class="line">piles=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,pile[start+<span class="number">2</span>:].split(<span class="string">b&#x27; &#x27;</span>)))</span><br><span class="line"><span class="comment"># begin your code</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># end your code</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;count:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(res).encode()) <span class="comment"># 交互使用encode过的一个字符串</span></span><br><span class="line"><span class="built_in">print</span>(io.recvline()) <span class="comment"># 看服务器说了啥(一行)</span></span><br></pre></td></tr></table></figure><h2 id="backup">backup</h2><p>常见备份文件后缀名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.bak</span><br><span class="line">.git</span><br><span class="line">.svn</span><br><span class="line">.swp</span><br><span class="line">.bkf</span><br><span class="line">.bash_history</span><br><span class="line">.~</span><br></pre></td></tr></table></figure><h2 id="优先级">优先级</h2><p>windows或Linux下:</p><p><code>command1 &amp;&amp; command2</code> 先执行command1,如果为真,再执行command2<br><code>command1 || command2</code> 先执行command1,如果为假,再执行command2</p><p><code>command1 | command2</code> 只执行 command2<br><code>command1 &amp; command2</code> 先执行 command2 后执行 command1</p><h2 id="Linux大杂烩">Linux大杂烩</h2><p>学Web不可避免的温习Linux.</p><ol><li><code>ls /</code> 意思是 <code>ls ~/</code> .</li><li><code>/home</code> 是用户主工作目录.</li></ol><h2 id="Sql注入">Sql注入</h2><p>首先确认是使用什么闭合的,比如 <code>'</code> 或者 <code>&quot;</code> (方法:输入带 <code>'</code> 或 <code>&quot;</code> 的账号看报错).</p><p>然后使用<a href="https://zhuanlan.zhihu.com/p/485448815">万能密码</a>:<br><code>账户</code>: <code>a' or true #</code> 由于#会当成特殊字符,要使用url编码 <code>a' or true %23</code><br><code>密码</code>: <code>a' or true #</code> 由于#会当成特殊字符,要使用url编码 <code>a' or true %23</code></p><h1>PWN</h1><p><a href="https://https//www.cjovi.icu/">大佬博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;MISC&lt;/h1&gt;
&lt;h2 id=&quot;Google&quot;&gt;Google&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;aaa&amp;quot;&lt;/code&gt; 必须出现的词汇&lt;/li&gt;
&lt;li&gt;&lt;code&gt;site:aaa.com&lt;/code&gt; 只搜索这个网站的结果&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://narafluorine.github.io/categories/CTF/"/>
    
    
    <category term="Algorithm" scheme="https://narafluorine.github.io/tags/Algorithm/"/>
    
    <category term="Game" scheme="https://narafluorine.github.io/tags/Game/"/>
    
  </entry>
  
</feed>
