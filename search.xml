<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flag{...}</title>
      <link href="/2024/12/31/30013Flag/"/>
      <url>/2024/12/31/30013Flag/</url>
      
        <content type="html"><![CDATA[<p>ようこそ！！！</p><p>Flu想在博客里面放点东西,于是整了一个flag在这里.你只需要提交 <code>flag&#123;...&#125;</code> 然后Flu会手动判,<s>答对的有奖励,答错的有惩罚,</s> 答对的Flu会请你一瓶可乐(5元打你账上).废话少说,我们开始!</p><p><code>Valid:1</code></p><p>(为了确保不是一个人刷好几次,每次有人答对了Flu都会换题,上面的Valid就是当前题面是否有效的标志)</p><p>首先你需要吃一点点开胃小菜:</p><h2 id="PWN">PWN</h2><p>解密以下文字:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例:</span><br><span class="line">64&#x27;32&#x27;4|16&#x27;+4|2|1&#x27;16&#x27;==64&#x27;_4|2|1&#x27;16&#x27;^+2+32&#x27;4|16&#x27;^-2</span><br><span class="line">谜题:</span><br><span class="line">2|52&#x27;7|16&#x27;^-2+2|16&#x27;1&#x27;^-1== flag&#123;   ?   &#125;</span><br></pre></td></tr></table></figure><p>把算出来的式子填在问号那里然后和flag一起交上去就行.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D打印及建模经验总结</title>
      <link href="/2024/12/24/30012%E5%BB%BA%E6%A8%A1%E5%8F%8A3D%E6%89%93%E5%8D%B0/"/>
      <url>/2024/12/24/30012%E5%BB%BA%E6%A8%A1%E5%8F%8A3D%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>RT,这里是放Flu自己建模以及打印工件的经验总结.</p><h2 id="工件向上最大倾斜度">工件向上最大倾斜度</h2><h2 id="无AMS多色打印">无AMS多色打印</h2><p>原理:可以把工件纵向切开,中间插入缓冲层,然后换料,然后继续打印就可以实现无AMS的多色打印.</p><h2 id="耗材干燥剂">耗材干燥剂</h2><p>选项:</p><ol><li>分子筛干燥剂(大约3~5元每斤)</li><li>变色硅胶干燥剂</li><li>生石灰(灰太大)</li></ol><h2 id="如何拆支撑">如何拆支撑</h2><h2 id="为什么XX">为什么XX?</h2><ol><li>为什么会听到咔咔的声音?是打印机撞到模型了吗?</li></ol><p>那是打印机打较大模型时,模型中间会凉下来,然后支撑脱落时发出的声音.</p><ol start="2"><li>支撑为什么一掰就掉</li></ol><p>因为支撑是一整根完整的空柱子,叠起来长得像一棵树.支撑在与模型连接的地方是一堆点,减小在这里的强度,所以支撑很好掰,掰掉的地方会留下点作为痕迹,用砂纸打磨也许能做好.</p><ol start="3"><li>为什么材料还没打几层就破了个大洞?是不是局部受热不均?</li></ol><p>答:你没有洗板子,之前的油沾到了上面导致不粘板子,然后就导致打印一层比一层偏最后出现大洞.所以 <strong>推荐每次打印完取下来模型就洗一次板子,保证下次打印的成功率</strong> .还有可能是耗材时间长了.</p><ol start="4"><li>为什么不着床!!!</li></ol>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率</title>
      <link href="/2024/12/17/10018%E6%A6%82%E7%8E%87/"/>
      <url>/2024/12/17/10018%E6%A6%82%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>在这里放一些常见的概率模型.</p><h2 id="随机游走-简单版">随机游走(简单版)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o-o-o-o-o</span><br><span class="line">q1^     q2</span><br><span class="line"> now</span><br></pre></td></tr></table></figure><p>你在一条链上.你有 $\frac12$ 的概率往左走一格, $\frac12$ 的概率往右走一格.走到最左端(0)有 $q_1$ 的概率赢,走到最右端有 $q_2$ 的概率赢.求你最终赢的概率.</p><p>结论:在距离0 $x$ 点位置的概率是 $\frac{x}{n+1}q_1+\frac{n+1-x}{n+1}q_2$ ,直观理解就是调和一下…</p><h2 id="Pending…随机游走-困难版">Pending…随机游走(困难版)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o-o-o-o-o</span><br><span class="line">q1^     q2</span><br><span class="line"> now</span><br></pre></td></tr></table></figure><p>你在一条链上.你有 $p$ 的概率往左走一格, $1-p$ 的概率往右走一格.走到最左端(0)有 $q_1$ 的概率赢,走到最右端有 $q_2$ 的概率赢.求你最终赢的概率.</p><p>好像要求矩阵快速幂???</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2024/12/14/10032%E4%BA%8C%E5%88%86/"/>
      <url>/2024/12/14/10032%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>二分听起来简单,实际上题看都看不出来…</p><p>为了根除这个祸患,Flu特立此专题.</p><h2 id="例题">例题</h2><ol><li>CF2037F 有好多怪物在坐标轴上,每个怪物有自己的血量,怪物不会动,你只能选一个点进行攻击,攻击伤害递减(如 1 2 3 2 1 这样递减的攻击,最中心是你的战力),给定战力求击杀k个怪物的最少攻击次数.</li></ol><p>发现 <strong>攻击次数</strong> 是满足单调性的,也就是说这一次满足了下一次攻击也会满足条件,于是考虑二分.<br>设攻击y次,战力为k,坐标是pos,对每一个点有 $y\max(0,m-|pos-x_i|)\ge h_i$ ,解方程得到 $\lceil\frac hy\rceil+x_i-m\le pos\le m-\lceil\frac hy\rceil+x_i$ 于是转化为区间有n条线段,找到是否存在一个点被k个线段覆盖,直接差分就可以了.(注意如果有一个点不会被消掉就不要进行贡献,不然整段区间是会被切开出现空当导致WA的)</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理学习笔记</title>
      <link href="/2024/12/02/00009%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/02/00009%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这里放一些名词.</p><p>给一个芯片是 $a\times b$ 位的能得出:<br>地址线: $\log a$<br>数据线: $b$</p><p>故引脚数量: 地址线(dram一般用地址复用技术就会减半)+数据线+1(片选线)+1(或2,读写控制线)</p><p>DRAM的刷新按行进行.</p><p><strong>刷新信号周期</strong> :(异步刷新)刷新周期/行数,然后可以下取整<br><strong>集中刷新</strong> :死时间率:集中刷新时间/周期</p><p>芯片画图: $A_n$ 是地址线, $D_n$ 是数据线 , $\overline{CE}$ 是片选线 $\overline{WE}$ 是读写线( $\overline{OE}$ 是输出线 ), $\overline{MREQ}$ 绝对的低电平, $G_1$ 直接连5V电压即可,地址线听说不能有浪费, $\overline{PD}/progr$ 是编程线,在ROM这里直接接地就行, $\overline{WR}$ 和 $\overline{RD}$ 这俩是输入输出信号.</p><p>海明码默认偶校验.</p><p>微操作命令分析:</p><p>取指周期:(把指令从存储器提取出来)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PC -&gt; MAR -&gt; 地址线<span class="comment">//把指令从PC寄存器通过地址总线送给存储器</span></span><br><span class="line"><span class="number">1</span> -&gt; R            <span class="comment">//控制单元向存储器发出读命令</span></span><br><span class="line"><span class="built_in">M</span>(MAR) -&gt; MDR     <span class="comment">//读出的数据从存储器经过数据总线发给MDR寄存器</span></span><br><span class="line">MDR -&gt; IR         <span class="comment">//把指令从MDR送给IR</span></span><br><span class="line"><span class="built_in">OP</span>(IR) -&gt; CU      <span class="comment">//IR寄存器操作码部分送给CU,由CU译码决定要做什么</span></span><br><span class="line">(PC)+<span class="number">1</span> -&gt; PC      <span class="comment">//下一条指令地址</span></span><br></pre></td></tr></table></figure><p>间址周期:首先是命令采取间接寻址的形式,要把操作数的地址从存储器当中取出,放到指令寄存器当中.</p><p>感觉间接寻址的行为就是一级指针,指针存放的地址就是操作数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要做指令形式地址 -&gt; MAR//地址码传送给MAR</span></span><br><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; MDR</span></span><br><span class="line"><span class="function">MDR -&gt; <span class="title">Ad</span><span class="params">(IR)</span><span class="comment">//操作数所在存储单元地址</span></span></span><br></pre></td></tr></table></figure><p>执行周期:因为指令不一定一样长,所以执行周期非常复杂.(是不是不考了(喜))</p><ol><li>非访存指令</li></ol><blockquote><ol><li><code>CLA</code> 清空ACC加法器</li><li><code>COM</code> 按位取反</li><li><code>SHR</code> 算术右移</li><li><code>CSL</code> 循环左移</li><li><code>STP</code> 停机指令(内部有一个标志,置零就能停机.)</li></ol></blockquote><ol start="2"><li>访存指令</li></ol><blockquote><ol><li>加法指令 <code>ADD X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; <span class="title">MDR</span></span></span><br><span class="line"><span class="function"><span class="params">(ACC)</span>+<span class="params">(MDR)</span> -&gt; ACC</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>存数指令 <code>STA X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; W <span class="comment">//写命令</span></span><br><span class="line">ACC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR)</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>取数指令 <code>LDA X</code> 把某个数字存放到 <code>ACC</code> 里面</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; <span class="function">R</span></span><br><span class="line"><span class="function"><span class="title">M</span><span class="params">(MAR)</span> -&gt; MDR</span></span><br><span class="line"><span class="function">MDR -&gt; ACC</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>无条件转移 <code>JMP X</code></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Ad</span>(IR) -&gt; PC</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>有条件转移 <code>BAN X</code> (负则转移)<br>$$A_0\cdot Ad(IR)+\bar A_0(PC)\to PC$$</li></ol></blockquote><p><strong>周期分析</strong> :只有间接访存和间接转移是需要间址周期的,其他的(非访存,直接访存,转移)都是只有取址和执行周期.</p><p>中断周期:1.保存断点2.形成中断服务程序的入口地址3.关中断</p><p>程序断点存入0地址(法一)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> -&gt; MAR <span class="comment">//</span></span><br><span class="line"><span class="number">1</span> -&gt; W <span class="comment">//保存程序断点</span></span><br><span class="line">PC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR) <span class="comment">//保存到MAR指定内存当中</span></span><br><span class="line">              <span class="comment">//硬件向量法:</span></span><br><span class="line">向量地址 -&gt; PC <span class="comment">//保存向量地址</span></span><br><span class="line"><span class="number">0</span> -&gt; EINT     <span class="comment">//允许生成断点(置零)</span></span><br></pre></td></tr></table></figure><p>程序断点进栈:(法二)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(SP<span class="number">-1</span>) -&gt; MAR</span><br><span class="line"><span class="number">1</span> -&gt; W</span><br><span class="line">PC -&gt; MDR</span><br><span class="line">MDR -&gt; <span class="built_in">M</span>(MAR)</span><br><span class="line">向量地址 -&gt; PC</span><br><span class="line"><span class="number">0</span> -&gt; EINT</span><br></pre></td></tr></table></figure><p>也可以软件进行中断, <code>M-&gt;PC</code> 代替向量地址</p><p>许许多多信号:</p><p>$\overline{MREQ}$ :访存控制信号<br>$\overline{IO}/M$ :访问IO/存储器的信号<br>$\overline{RD}$ :读命令<br>$\overline{WR}$ :写命令<br>$INTA$ :中断响应信号<br>$HLDA$ :总线相应信号</p><p><code>ADD@X</code> 是间接寻址的加法方式.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>留档</title>
      <link href="/2024/12/01/30011%E7%95%99%E6%A1%A3/"/>
      <url>/2024/12/01/30011%E7%95%99%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>如果说杂项这里存放的是一些比较经常使用的东西,那么这个留档存放的是一些不常用的东西,可能是知识型的.注,博客所有内容都是Flu个人看法.</p><h2 id="为什么要对犯罪嫌疑人打码">为什么要对犯罪嫌疑人打码?</h2><p>并不是保护犯罪嫌疑人,而是保护和他长得像的人.避免被误会,全国十几亿人,有长得像的也不奇怪.</p><h2 id="一种可能的思政考试秘诀">一种可能的思政考试秘诀</h2><p>吉大的思政卷子是卷一一张(选择)卷二一张(大题),然后他们是印在一张大纸上的,然后被折成两半,但是选择真正的成绩是涂卡出来的,答题用试卷上的地方判(选择大题一起交).</p><p>所以Flu猜测,马原这种思政卷子有隐藏分,就是,老师判你卷二之前,会先看一下你的卷一打的咋样,如果很糟糕也许会手下留情多给你几分,如果打的很好也许就正常判了.</p><p>如果假说成立,那么卷一可以使用密文答题,涂卡的时候老老实实涂,涂完了解密,故意错几个,拉低自己的隐藏分让老师觉得你很可怜,从而卷二获取相对高分??</p><h2 id="为什么美国摄像头少">为什么美国摄像头少?</h2><p>因为美国都有枪,摄像头容易成为靶子被莫名打爆,后来就慢慢变成人工搞违章处理了…听说郊区的路牌都会被当成靶子打,摄像头自不必说.</p><h2 id="宇宙免责声明-叠甲用的">宇宙免责声明(叠甲用的)</h2><p>我是一名中华人民共和国公民，我发自内心地认可中国特色社会主义理论，坚持中国共产党领导，反对资本主义、帝国主义、霸权主义、封建主义等腐朽落后的思想。</p><p>我自觉遵守宪法和法律，反对网络暴力，自觉遵守哔哩哔哩社区规范，做到不恶语相向，文明交流。</p><p>本人双亲健在，家庭圆满；如有辱骂攻击行为将依法处理，若发现“开盒”等网络暴力行为将报警处理。</p><p>以上所有本人消息仅代表个人意见，不代表他人、任何游戏、组织、公司、国家、社会团体，并不代表任何游戏的玩家群体。</p><p>以上所有本人消息主观上没有偏袒任何一方的行为，仅针对事情本身，对事不对人。</p><h2 id="不知者无罪应用标准">不知者无罪应用标准</h2><p>先说答案，在某些情况下，不知者是可以无罪的。<br>不知者无罪分为两大类情况。</p><h4 id="一是法律认识错误。">一是法律认识错误。</h4><p>法律认识错误细分为</p><ol><li>我以为犯罪了，其实按照法律规定没有犯罪。<br>这种情况下， <strong>不知者无罪</strong><br>举个例子：有些人比较迷信，他以为用巫术、扎小人、诅咒等方式可以伤害其他人，假设张三讨厌李四，晚上张三扎小人，诅咒李四，结果正好李四刚好出门被车撞死了。张三以为和自己有关系。实际上，在刑法中，张三并没有犯罪，李四的死亡与张三的行为没有因果关系。</li><li>我不懂法，我以为我没犯罪<br>这种情况下， <strong>不知者有罪</strong><br>这样的情况很常见，在接待当事人的时候，很多人说，我只是在公司里做行政，做会计，为什么说我诈骗呢？我不懂法律，我不知道我没有具体实施诈骗行为，但我为其他人诈骗行为提供了帮助，同样构成诈骗罪，法律意识淡薄，不懂法，不能成为无罪的理由。</li><li>对自己的行为所犯的罪和罪刑轻重有误解<br>这种情况下， <strong>不知者有罪</strong><br>举个例子，张三在路上捡到一张银行卡，他去银行ATM机试一试，结果一输密码123456，银行卡打开了，把余额都取出来了，张三以为自己犯的是盗窃罪，其实他是信用卡诈骗罪。那法院最终会定信用卡诈骗罪，不会按照张三的想法来定罪。</li></ol><h4 id="二是事实认识错误。">二是事实认识错误。</h4><p>可以细分为以下五种情况</p><ol><li>客体认识错误</li><li>对象认识错误</li><li>行为认识错误</li><li>工具认识错误</li><li>因果关系认识错误</li></ol><p>其中，事实认识错误有些情况，是不知者无罪的。<br>举个栗子：天价葡萄案</p><p>2003年8月7日凌晨，北京海淀警方在巡逻时发现4名男子抬着一个可疑的编织袋，打开一看是一袋子葡萄。警方盘查后得知，这47斤葡萄是从北京农林科学院林业果树研究所葡萄研究园偷摘来的。这下坏了！林科院介绍说，这些葡萄是他们投资40万元、历经10年培育研制的科研新品种。其中的20余株试验链中断，损失无法估量。<br>因为这些葡萄价值昂贵，海淀警方指控这4名男子构成盗窃罪。海淀警方根据科研所提供的资料，委托北京市物价局价格认证中心对被偷的葡萄进行估价，被偷葡萄的直接经济损失为11220元。<br>按当时规定，北京地区盗窃财物价值10000元以上的财物，是盗窃犯罪中的“犯罪数额巨大”情节，一般要处以3年以上10年以下有期徒刑。几名民工将面临三年以上的有期徒刑！</p><p>这里还要提到一个法律概念： <strong>期待可能性</strong> ！<br>简单来说，就是站在最普通人的视角，普通人的认知是什么样的，普通人会做出何种选择。<br>普通人的认识这里就是几串葡萄的葡萄，他们与其他葡萄园里的葡萄从外表看不出区别，法律不强人所难，不能站在上帝的视角去审判。<br>4民男子这里就是对象认识错误，他以为偷的是普通的葡萄，没想到偷的是天价的葡萄。<br>2004年1月5日，涉案葡萄经有关部门重新评估，得出涉案标的价格仅为376元。2004年2月4日，3名民工被取保候审，另一位为未成年人，早前已释放。自8月7日案发刑事拘留至取保候审已有半年的时间。<br>2005年2月21日，3名民工已先后收到北京市海淀区人民检察院的决定不起诉书。<br>至此，涉案民工彻底无罪。</p><h2 id="怀旧的成本-韩少功-高中留存的很棒的文章">怀旧的成本(韩少功,高中留存的很棒的文章)</h2><p>房子已建好了，有两层楼，七八间房，一个大凉台，地处一个三面环水的半岛上。由于我鞭长莫及无法经常到场监工，停停打打的施工便耗了一年多时间。房子盖成了一个红砖房，也成了我莫大遗憾。</p><p>在我的记忆中，以前这里的民宅大都是吊脚楼，依山势半坐半悬，有节地、省工、避潮等诸多好处。墙体多是石块或青砖组成，十分清润和幽凉。青砖在这里又名“烟砖”，是在柴窑里用烟“呛”出来的，永远保留青烟的颜色。可以推想，中国古代以木柴为烧砖的主要燃料，青砖便成了秦代的颜色，汉代的颜色，唐宋的颜色，明清的颜色。这种颜色甚至锁定了后人的意趣，预制了我们对中国文化的理解：似乎只有青砖的背景之下，竹桌竹椅才是协调的，瓷壶瓷盅才是合适的，一册诗词或一部经传才有着有落，有根有底，与墙体得以神投气合。</p><p>青砖是一种建筑象形文字，是一张张古代的水墨邮票，能把七零八落的记忆不断送达今天。</p><p>大概两年多以前，老李在长途电话里告知：青砖已经烧好了，买来了，你要不要来看看？这位老李是我插队时的一个农友，受托操办我的建房事宜。我接到电话以后抓住一个春节假，兴冲冲飞驰湖南，前往工地看货，一看竟大失所望。他说的青砖倒是青的砖，但没有几块算得上方正，一经运输途中的碰撞，不是缺边，就是损角，成了圆乎乎的渣团。看来窑温也不到位，很多砖一捏就出粉，就算是拿来盖猪圈恐怕也不牢靠。而且砖色深浅驳杂，是杂交母猪生出了一窝五花崽——莫不是要给炮兵们盖迷彩工事？</p><p>老李看出了我的失望，惭愧自己的大意，很不好意思地说，烧制青砖的老窑都废了，熟悉老一套的窑匠死的死了，老的老了，工艺已经失传。他买的这窝五花崽，还是在邻县费尽了口舌才请窑匠特地烧出来的。</p><p>老工艺就无人传承么？</p><p>他说，现在盖房子都用机制红砖，图的是价格便宜，质量稳定，生产速度快。红砖已经占据了全部市场，凭老工艺自然赚不到饭钱。</p><p>我说，那就退货吧。</p><p>他更急了，说退货肯定不行，因为发货时已经交了钱，人家吃到肚里的钱还肯吐出来？</p><p>建房一开局就这样砸了锅，几万块砖钱在冒牌窑匠那里打了水漂。我只得吞下这口苦水，只得权宜变通，吩咐工匠们拿这些砖去建围墙，或者铺路，或者垫沟。伪劣青砖既然成了半废物，附近有些村民也就闻风而来，偷偷搬了些去修补猪圈或者砌阶基——后来我在那里看得眼熟，只是不好说什么。</p><p>我记得城里有些人盖房倒是在采用青砖，打电话去问，才知道那已经不是什么建筑用料，而是装饰用料，撇下运输费用不说，光是砖价本身已经让人倒抽一口冷气。我这才知道，怀旧是需要成本的，一旦成本高涨，传统就成了富人的专利，比如穷人爱上了富人的红砖之时，富人倒爱上了穷人的青砖；穷人吃上富人的鱼肉之时，富人倒是点上了野菜；穷人穿上了富人的皮鞋之时，富人倒是兴冲冲盯上了布鞋……市场正在重新分配趣味与习俗，让穷人与富人在美学上交换场地。</p><p>我曾经在一个座谈会上说过：所谓人性，既包含情感也包含欲望。情感多与过去的事物相连，欲望多与未来的事物相连，因此情感大多是守旧，欲望大多是求新。比如一个人好色贪欢，很可能在无限春色里见异思迁——这就是欲望。但一个人思念母亲，绝不会希望母亲频繁整容千变万化。即使母亲到手术台上变成个大美人，也纯属不可思议，因为那还是母亲吗？还能引起我们心中的记忆和心疼吗？——这就是情感，或者说，是人们对情感符号的恒定要求。</p><p>这个时代变化太快，无法减速和刹车的经济狂潮正铲除一切旧物，包括旧的礼仪、旧的风气、旧的衣着、旧的饮食以及旧的表情。从某种意义上来说，这使我们欲望太多而情感太少，向往太多而记忆太少，一个个都成了失去母亲的文化孤儿。</p><p>然而，人终究是人。人的情感总是要顽强复活，不知什么时候就会有冬眠的情感种子破土生长。也许，眼下都市人的某种文化怀旧之风，不过是商家嗅到了情感的商业价值，迅速接管了情感，迅速开发着情感，推动了情感的欲望化、商品化、消费化。他们不光是制造出了昂贵的青砖，而且正在推销昂贵的字画、牌匾、古玩、茶楼、四合院、明式家具等等，把文化母亲变成高价码下的古装贵妇或古装皇后，逼迫有心归家的浪子们一一埋单。</p><p>对于市场中的失败者来说，这当然是双重打击：</p><p>他们不但没有实现欲望的权利，而且失去了感情记忆的权利，只能站在价格隔离线之外，无法靠近昂贵的母亲。</p><h2 id="我感受到内心的某些意识正在觉醒-霜月落-阅读穿行">我感受到内心的某些意识正在觉醒(霜月落,阅读穿行)</h2><p><strong>01.“创造”：工作的乐趣都去哪儿了？</strong></p><p>有一个古老励志故事：两个工人在工地里搬石头，老者去问，你们在干什么？一人回答，我在搬石头，另一人回答，我在修教堂。若干年后，一人仍在搬石头，另一人则事业有成。</p><p>这个故事一般被解读为如何从看似无意义的工作中找到热忱与价值，但是在现代社会，把兴趣爱好作为职业已经成为了一种奢望，因为对于大多数人来说，工作仅仅是一种赚钱糊口的手段，和乐趣无关。从什么时候开始，我们把生活所有的乐趣与价值都寄托在了八小时之外，而不再对占据人大部分时间的工作抱有期待了呢？</p><p>在基督教的传统中，上帝最重要的身份是一名创造者，人类在塑造上帝的过程中，将&quot;创造&quot;这一人类的原始本能投身在了上帝的形象上。在马克思的观念中，人内在有着不可取消、不可压抑的一种创造的冲动，人在创造中获得的满足与尊严，是生而为人最根本的追求。</p><p>然而，在资本主义建立的生产关系下，无论是工人还是白领，都被编组进了分工生产的流水线中，成为了依附于庞大生产体系的&quot;可替换零部件&quot;。每个人只需要负责生产衣服的一个纽扣、活动的一篇文稿、订单的一次流转、职场的一次会谈，虽然生产的效率大大提高了，但任何一个人都不再是成果的创造者，我们不知道自己的在造什么，造出来的东西也与我无关，最根本的，我们反而成为了被这个时代创造出来的&quot;工具人&quot;，从创造者被转化为了受造物。</p><p>&quot;工匠精神&quot;和&quot;手作&quot;这些年越来越受到重视，在工业流水线出现前，一件产品是手工业者完整制造的，即便是一根针，也要从头到尾用铁杵打磨出来，&quot;某某制造&quot;代表的信誉和品质，饱含着创造者倾注的热情、技艺与自豪。正是因为创造者与产品之间密不可分的强烈联系，才凝结了日剧《半泽直树》中主人公父亲那种&quot;是这颗螺丝支撑着全日本&quot;的视产品如生命的工匠精神。</p><p>当人与他的工作成果失去这种联系之后，人不再是在主动创造，只是作为一个环节、一个零件，在配合社会大机器进行没有灵魂的被动生产，也无怪乎工作必然无聊、产品缺少灵魂了。</p><p>当我们在日复一日的搬砖中丢失了创造的乐趣后，人的快乐又该从何而来呢？为了让打工人的生活不那么&quot;无聊&quot;，资本主义给了我们补偿，那就是将创造者悄悄代换为了消费者的身份。</p><p>工作不是很无聊吗？那就在双十一疯狂剁手。只要998，我们就可以通过买 iPhone 、机票和私教课来&quot;创造&quot;我是一个什么样的人，来获得同款的&quot;满足感&quot;，以及又能元气满满地投入到被老板压榨的社畜日常中去了。</p><p>但消费者身份是一种我们在工作上彻底丧失创造性之后被替换的身份，同时也是最具欺瞒的创造，消费给了我们一种假象，似乎在被剥夺了创造的自由后，我们还有人人平等的购买的自由，但实际上我们&quot;创造&quot;的，只不过是一张又一张莫得感情的订单，以及原本并不存在的需求而已。</p><p>无论是卑微的打工人还是小赚一个亿的大佬，人只有依靠成就和尊严，才能像一个人一样活下去，而要有成就和尊严，必须具备创造者的身份。消费本身并不会产生任何价值，只有在创造中，我们才能找到真正的自由。</p><p><strong>02.“价值”：白景琦的棉袄值多少？</strong></p><p>电视剧《大宅门》中有这么个桥段，富家子弟白景琦因为犯错被逐出家门，落魄之下，他拿着唯一一件过冬的棉袄去当铺换钱，白景琦心里估价15两银子，但是当铺只出5两，气的他一顿怒骂奸商，但是走了好几家当铺都没有超过这个价的，无奈之下只得含泪贱卖。</p><p>在这个围绕白景琦和一件棉袄发生的故事里，人与物之间产生了两种关系：一是棉袄作为属于白景琦的物品，是用来御寒过冬的必需品，同时也寄托着对家乡的思念和大户人家的身份地位；二是棉袄作为白景琦去当铺换钱的商品，分别有两种市场价格。即便白景琦内心不想卖，也觉得棉袄不止这个价，但由于形势所迫，即便家财万贯如他也只能屈从于市场的裁判。显然，决定我们认为一个东西是&quot;值&quot;还是&quot;不值&quot;的，无疑是价格这个变量，人和物的关系都是围绕价格﹣﹣也就是钱发生的。那么问题来了，假设我们像鲁滨逊一样漂流到一个荒岛上，钱变得一文不值，那又该怎么判断一个东西是&quot;值&quot;还是&quot;不值&quot;呢？</p><p>在《资本论》第一卷的开篇中，马克思就围绕价格和价值的关系进行了探讨。在马克思所设想的哲学开端中，物品首先存在的不是价格，而是和人发生的一种明确的使用关系，比如我要有一件棉袄来过冬，一把锄头来耕地，一个手机来刷抖音，它们对于我来说只有明确的使用价值。</p><p>在这个价值的原点里，任何一样东西对我都有不可取代的直接意义，它们对我的使用价值无法量化、也不需要被量化，更不存在价值的高低之分。这种特定的使用价值，是人与物品保有的唯一且绝对的本质关系。</p><p>后来，由于我有两只手机，你有五件棉袄，我们之间产生了物物交换的需要，我用了一只使用价值不高的手机，交换了三件可以过冬的棉袄，你则用多余的棉袄换了手机，美滋滋地刷起了抖音，这样物品对于我们双方的使用价值都增加了，可谓皆大欢喜。</p><p>然而在刚才，手机和棉袄对我的价值明明还是是一样的，但是在彼此交换中，我却用一只手机换了三件棉袄。于是在交易的过程中，物品的使用价值被转换成了交易价值，物品也就变成了商品，同时，作为交易媒介的货币也出现了。</p><p>人类社会从自然经济发展到商品经济，特别是资本诞生后，货币出现了异化。异化是马克思的思想中非常重要的概念，货币的异化影响了人与物的关系，进而产生了很多相关的经济社会现象：</p><p>首先，交易价值取代了使用价值，价值被价格异化了。</p><p>其次，商品取代了物品，人与物的关系被异化了。</p><p>最后，金钱的量化取代了价值的判断，人的欲望被异化了。</p><p>我们活在一个万物皆为商品的市场经济的环境里，也必然习惯了用价格来构建我与物、与人、与世界的关系，因为在我们所接受的市场经济学的共识里，价值就等同于价格，价值的多少是由货币来衡量的，但在马克思眼里，这是一种可怕的堕落。</p><p>马克思坚信，人在被异化前，与世界存在着一种独立的、有机的发生直接关系生活方式，而经济就是将我们从这种纯粹的关系中拉开的力量。钱原本只是人类创造出来用于交易的工具，但在&quot;有钱能使鬼推磨&quot;这种极端的拜物主义的信仰下，金钱变成了主人，并透过交易系统宰制了所有人，人类反而成为了奴仆，这不是荒谬的吗？</p><p>当然，现在的我们不可能完全脱离商品经济，过一种自给自足的原始人生活，但是读马克思，能促使我们跳出既有的观念和价格的世界，用哲学的态度来思考&quot;物欲横流&quot;背后的潜在逻辑，以及在解开价格的障眼法后，我们能否重新体认到物品的价值，从而建立起一种更真实的、更纯粹的、更本质的物我关系呢?</p><p>在&lt;大宅门&gt;里白景绮卖棉袄的桥段中还有个插曲,当铺掌柜在低价收购了棉袄之后,吆喝了句&quot;虫吃鼠咬，光板没毛，破面烂袄一件！&quot;白景琦的自尊心立马就绷不住了，马上翻脸要换一家当铺，但别家也都是同样的操作，白景琦兜转转一圈只能妥协，但他提了条底线，决不能那样瞎嚷嚷。因为在他眼里，好衣服就是好衣服，大丈夫就是大丈夫，也许市场的逻辑会认为你一文不值，但是自己却不会因一时的穷困潦倒而丢掉青云之志。</p><p>尽管市场和金钱的力量是如此之大，但是对于每个人来说，依然有很多没法实、也绝对不能卖的东西。</p><p>也许对某件物品寄托的独特情感，也许是与人相处中的冷暖自知，也许是大自然慷慨的馈赠，也许是内心不容践踏的尊严，它们无法被明码标价，但是却有独一无二的价值，这是我们活于人世间所要追寻的意义所在，也是生而为人不容抹杀的根本坚持。</p><p><strong>03.“工具”：你是作为目的还是手段活着？</strong></p><p>这两年&quot;工具人&quot;这个词很火，它指的是为了达成特定目的而被别人作为工具使用的人，这个词对于工作之苦的描述，听上去比&quot;打工人&quot;要扎心多了，毕竟人类的历史就是一部利用工具的历史，可现在人怎么就沦为了和镰刀锄头一样的工具呢？</p><p>在人作为工具这个角度上，马克思有过系统性的思考和批判。众所周知，黑格尔哲学对马克思有着非常重要的影响，在解释&quot;世界是谁造就的&quot;这个问题上，黑格尔认为，世界变化的源头是一种精神，它类似于上帝的存在，有着对世界的完美设计蓝图，历史就是这股力量在通过辩证的变化实现自身目的的过程。</p><p>而马克思在吸收黑格尔哲学的同时对其进行了革命性的修正，他认为推动历史的不是诸如上帝之类玄乎的精神性事物，而是生产力等物质性的因素，人在实践生活中产生的变化才是驱动历史发展的动力，这就是唯物史观的观点。</p><p>马克思对于黑格尔所代表的唯心史观的批判点在于，上帝是人的创造物，我们将梦想和对美好的追求投射在上帝这个&quot;最真实的人&quot;身上，目的是能够变得和上帝一样，获得人类生活最纯粹、最理想、最真实的状态。</p><p>但在现实中，上帝却被异化成了人类要去顶礼膜拜、盲目服从的对象，受造物主宰了人间，创造者成了奴仆﹣﹣上帝是明明人类为了实现梦想创造的&quot;工具人&quot;，然而这个&quot;工具人&quot;却堂而皇之变成人类命运的裁判者，就像科幻作品中的机器人统治了地球一样，这不是本末倒置吗？(更多内容可收听《你好，马克思先生：＜资本论＞及其创造的世界》第58集：投射论与反转论：为什么我们创造了上帝，却成了上帝的奴仆？)</p><p>上帝的异化是典型的目的和手段的倒置，原先为了达成目的而设计的手段变成了目的本身，就抹杀了我们实现目的的可能性。因此，马克思坚信人的目的性，认为人是作为目的而不是手段而活着，人在作为目的活着的时候，可以在风花雪月中体会爱情的美好，在壮游四方中领悟生命的多元，在表达创造中获得价值的认同……总之，人可以决定自己想要创造什么、体验什么、怎么度过一生，这是马克思对于人的崇高定义。</p><p>而人作为手段而活着的时候呢？在资本主义生产体系下，生产者无法拥有生产工具，成为了贩卖自己劳动力的劳动者，在工厂工作时，人是在服从配合机器、而不是运用机器在生产，这意味着当我们通过贩卖劳动来换取别的东西的时候，就不再作为一个目的而活着，而是变成了一种手段、一个工具，人就变成了“工具人”。</p><p>而从资本家的视角来看，资本主义要求劳动者过的是一种“劳动力再生产”的生存方式，资本家购买了劳动力，他只需要考虑付多少的薪水，让你能明天回来继续搬砖就好了，而人作为手段之外的目的性，资本家不会考虑，更不会鼓励你去追求任何让生命变得丰富和有意义的东西，不思不考、粗鄙庸俗的“工具人”才是资本主义最需要的螺丝钉。马克思就这样通过对手段和目的错乱的思考，指出了资本主义劳动制度造成劳动者堕落的必然性。</p><p>想一想，我们平时有多少时间是作为一个目的而活着，有多少时间只是一个“工具人”，在带薪拉屎的摸鱼空隙才能撕掉面具下的伪装？长此以往，我们既然没办法为自己而活，就会逐渐放弃人的目的性，在资本主义的生产结构与消费模式下变得越来越粗糙与庸俗。</p><p>目的和手段的错乱，在我们的生活中比比皆是，比如消费是提高生活质量的手段，结果一天不剁手就空虚寂寞；手机只是丰富信息渠道的手段，结果五分钟不看屏就浑身难受……其中最典型的，是金钱的异化。货币原本只是人类进行交易的手段，通过交易增加物品的使用价值才是目的，这是一个“商品—金钱—商品”的过程。然而我们现在去买房，不是为了改善居住条件，而是为了投资获利，于是交易的逻辑变成了“金钱—商品—金钱”，在这个颠倒的公式中，原本作为工具的金钱，反而成为了目的本身。从此，评判经济生活的标准不再是人们是不是通过交易变得更幸福了，而是产生了多少抽象的数字，进而诞生了巴尔扎克笔下的葛朗台这种“穷的只剩下钱”的守财奴。</p><p>为什么在现代社会，目的和手段的错乱是如此的普遍呢？归根结底，是因为工业革命以来，人类发明的改造世界的工具实在太强大了。19世纪的另一位著名的“马克思”——马克思·韦伯将人的理性分为工具理性和价值理性两类，其中工具理性是找到解决问题的最优方式，也即找到“怎么办”，而价值理性是考虑权衡做事的目的，也即追问“为什么”。</p><p>在现实中，价值的分歧很难达成共识，而用工具计算的结果都有标准答案，因此在现代社会中，“不问过程，只管结果”式的工具理性大行其道，最典型的，是以官僚体制为代表的那种严密的组织关系、明确的任务分工和严格的规章流程渗透到了各个领域，将全社会打造为一个高度理性、严丝合缝、效率至上的庞大机器。</p><p>工具理性的不断扩张在极大提高社会生产力的同时，也逐渐淹没了价值理性，其结果是对手段的追求全面压倒了对目的的追求，整个人类社会变成了一刻不停运转的巨大试验场，每天都在研究“如何更有效地从山脚到山顶”的解决方案，也许是大数据、新能源、元宇宙、互联网思维、扁平式管理、系统化重塑……可是我们要不要去山顶，去山顶的目的是什么，工具理性不关心、也不会给出答案。</p><p>1917年，韦伯在《学术与志业》这次著名的演讲中讲到：</p><p>“所有自然科学提供的答案，都是回答一个问题：如果我们希望在技术层面支配生活，我们应该怎么做。至于我们是否应该以及是否真的希望在技术层面支配生活，以及这样做有无终极意义，自然科学或是完全略而不提，或是依照它们本身的目标来预设答案”。</p><p>18世纪后，人类陆续发明了蒸汽机、电、计算机，用理性解决了饥饿、贫困、疾病等困扰人类数千年的问题，但同时也亲手锻造了困住自己的“铁笼”。机器、数据、规章等既是最有效率、也是不带任价值判断的生产工具，在工作中，人被简化成一串诸如KPI等“非人化”指标体系，作为零部件共同维系着社会这个大工具的精准、稳定与高效，不再追寻目的、意义、价值这种低效率的问题；在生活中，技术的日新月异让我们能不去菜场美团外卖管饱、数字钱包扫码随付随到、足不出户VR游遍全球，每天面对的都是冷冰冰的由数字构成的世界，模糊了我们对真实世界的感知与热情。当人类对于手段的追求彻底压倒了对于目的的追寻，整个社会不可避免地成了机械坚硬、冷酷无情的机器，人的“工具化”也就在所难免了。</p><p>这些年“财富自由”这个词很火，年轻人拼命工作、投资理财到头秃，就是为了有朝一日能有钱支配自己的生活，可是实现“自由”之后呢？德国哲学家齐美尔说道，“金钱只是通往最终价值的桥梁，而人是无法栖居在桥上的”。现代人的贫困往往不再是经济的贫困，而是一种意义的贫困，一种普遍的价值迷失与真空状态，人一刻不停地在“桥”上狂奔，资本主义与现代社会高度发达的工具理性造就了桥边繁花似锦的错觉，但桥的尽头却往往是一片贫瘠与荒凉——这是“工具人”的悲叹，也是人类理性的至暗。</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式与生成函数</title>
      <link href="/2024/11/29/10031%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
      <url>/2024/11/29/10031%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>多项式全家桶(悲).</p><h2 id="例题">例题</h2><ol><li>分治FFT: 给定序列 $g_n$ 求 $f_n$ ,其中 $f_n=\sum_{j=1}^if_{i-j}g_{j}$ ,边界 $g_0=0,f_0=1$ ,对 $998244353$ 取模.</li></ol><p>设生成函数 $f(x)=\sum_{i=0}^{\infty}f[i]x^i,g(x)=\sum_{i=0}^{\infty}g[i]x^i,g[0]=0$<br>然后使用生成函数卷积:<br>$$f(x)*g(x)=\sum_{i=0}^{\infty}\sum_{j=0}^{\infty}f[i]\times g[j]x^{i+j}$$<br>令 $k=i+j$ ,<br>$$f(x)*g(x)=\sum_{k=0}^{\infty}\left(\sum_{j=0}^kf[k-j]g[j]\right)x^k$$<br>当 $k&lt;0$ 时 $\sum_{j=0}^kf[k-j]g[j]=f[k]$ 这就是个普通卷积.<br>当 $k=0$ 时 $\sum_{j=0}^kf[k-j]g[j]=0(g[0]=0)$ 于是和 $f(x)$ 对比一下发现差了个常数项,于是我们有<br>$$\boxed{f(x)*g(x)+f[0]=f(x)}$$<br>于是有<br>$$\boxed{f(x)=\frac{f[0]}{1-g(x)}}$$<br>使用多项式求逆即可解决.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-SAT</title>
      <link href="/2024/11/28/10030_2-SAT/"/>
      <url>/2024/11/28/10030_2-SAT/</url>
      
        <content type="html"><![CDATA[<p>2-SAT是求解满足性问题的算法.<br>实际测下来发现对于如何转成图论问题要求有点高,但是代码非常好写.</p><p>先把2-SAT转成图论问题:有 $2n$ 个点,前n个表示该点为假的时候的连边情况,后面n个点是该点为真的时候的情况.令有向边 $a\to b$ 的意义是选 $x$ 就必须选 $y$ .</p><p><strong>i,j不能同时选</strong> :选了 $i$ 就要选 $j’$ ,选 $j$ 就要选 $i’$ .故 $i→j’,j→i’$ .一般操作即为 $a_i\mathrm{xor} a_j=1$</p><p><strong>i,j必须同时选</strong> :选了 $i$ 就要选 $j$ ,选 $j$ 就要选 $i$ .故 $i→j,j→i$ .一般操作即为 $a_i\mathrm{xor} a_j=1$</p><p><strong>i,j任选一个</strong> :选了 $i$ 就要选 $j’$ ,选 $j$ 就要选 $i’$ .选 $i’$ 就要选 $j$ ,选 $j’$ 就要选 $i$ .故 $i→j’,j→i’,i’→<br>j,j’→i$ .一般操作即为 $a_i\mathrm{or}a_j=1$</p><p><strong>i必须选</strong> :直接 $i’→i$ ,可以保证无论怎样都选 $i$ .一般操作为给出的 $a_i=1$ 或 $a_i\mathrm{and}a_j=1$</p><p>所以对于条件 <code>a为真或b为真</code> ,要把刚好满足的进行连边,也就是说,如果a真,后面b无论怎样都满足的时候不用连边,所以连 <code>a-&gt;b+n</code> 表示a假的时候b为真,以及 <code>b-&gt;a+n</code> 表示b为假的时候a必须为真.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉计划</title>
      <link href="/2024/11/11/20007%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92/"/>
      <url>/2024/11/11/20007%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>在这里放一些欧拉计划的心得体会(注意,我这里放的只是体会,也就是过程,不会放答案,可以放心阅读)…</p><p>欧拉计划是鼓励大家网上搜索除了答案之外的所有东西的.</p><h2 id="板子">板子</h2><h3 id="文件解析">文件解析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;<span class="built_in">eulerDecode</span>()&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;words.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="comment">/*给定文件名称*/</span></span><br><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;res;<span class="comment">/*文件格式必须是 &quot;a&quot;,&quot;b&quot;,&quot;c&quot; 这样的格式,会解析出abc三个字符串 &quot;*/</span></span><br><span class="line">res.second.<span class="built_in">resize</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>(),ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">ff^=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// res.second.push_back(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line">res.first++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">1</span>)res.second[res.first]+=ch;</span><br><span class="line">&#125;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五边形数">五边形数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">pentagonal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line">num=(num&amp;<span class="number">1</span>^<span class="number">1</span>)?-(num&gt;&gt;<span class="number">1</span>):(num+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (num*(num*<span class="number">3</span><span class="number">-1</span>))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//生成一个0,1,2,5,7,12,15,22,26,35,40的五边形数列</span></span><br></pre></td></tr></table></figure><h2 id="0050">0050</h2><p>求1e6以内的哪个质数可以写成连续质数的和.</p><p>连续质数考虑前缀和.我们枚举两端然后检查质数.这里有一个小剪枝是,如果质数大于1e6直接跳出来递增的那个端点,能让程序快几十倍.</p><h2 id="0066">0066</h2><p>解一个二元二次丢番图方程,使用pell方程的解法,把根号转成连分式找环然后合并求解.</p><p>现在考虑支持高精度的怎么写,发现只需要支持加和乘就好了,问题解决…</p><h2 id="0078">0078</h2><p>整数划分:把一个整数表示成若干别的数字的加和形式.</p><p>使用dp可以让复杂度压成 $n^2$ ,还不够.</p><p>上网查阅结论得知,划分数 $p(n)$ 有以下性质:<br>$$p(k)=p(k-1)+p(k-2)-p(k-5)-p(k-7)+p(k-12)+p(k-15)-p(k-22)-+±-…$$<br>其中p(0)认为是1,负的认为是0.</p><p>其中这个减掉的数列叫做 <strong>五边形数</strong> ,满足通项公式(注意这个通项是正负交替的, $0,1,-1,2,-2,…$ )<br>$$a_n=n(3n-1)/2,n\in{0,\pm1,\pm2,\pm3,…}$$<br>然后求能被1000000整除的那一项就可以计算了,注意对1000000取模就不会炸int(为啥傻傻的用py) <s>(但是多用用py确实能增进熟练度,比方说开一个二维数组之类的能少踩坑)</s></p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码蹄集补题记录</title>
      <link href="/2024/11/04/20006%E7%A0%81%E8%B9%84%E9%9B%86%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/11/04/20006%E7%A0%81%E8%B9%84%E9%9B%86%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>码蹄集补题记录.</p><h2 id="子矩阵抑或和">子矩阵抑或和</h2><p>给一个矩阵,求出其所有子矩阵元素抑或和的和.</p><p>先考虑问题的一维版本,一个数列区间抑或和可以使用前缀和快速求出 $pre_{r}\oplus pre_{l-1}$ ,这个时候问题转换为任意两个前缀和相乘的加和结果.统计整个区间0和1的个数,答案就是 $cnt_0cnt_12^{pos}$ .</p><p>现在考虑矩阵版本,子矩阵先做前缀和,然后问题变成了矩阵任意两行,任意两列,交叉出来这四个数的抑或和的加和.模拟一维的做法,先枚举二进制位,然后枚举两行和一列,然后把这两行压成一行(直接抑或就行),然后剩下的和一维一样处理即可.</p><h2 id="数学图">数学图</h2><p>有n个点,每个点的值为 $a_i$ .建图方式如下:<br>如果 $a_i=a_j$ ,则i和j之间有一条权值为0的边.<br>如果 $\gcd(a_i,a_j)\neq1$ ,则i和j之间有一条权值为1的边.<br>如果 $a_i$<code>^</code>$a_j\le k$ ,则i和j之间有一条权值为1的边.<br>问从s点出发到达所有点的最小花费.<br>$$n&lt;2e5,k&lt;5,a_i&lt;1e6$$<br>这个题点权的大小比较离谱,考虑中转点.对于情况1,对所有值相同的点都开一个中转点即可.对于情况二,首先, $\gcd(a_i,a_j)\neq1$ 表示这俩数有公共因子,所以对于一个数,我们对这个数的所有质因子都连边即可,每个质因子都是一个中转点.对于第三种情况,发现k的值特别小,于是对于一个数,暴力枚举所有k对应的数,然后和情况1中的值中转点连边.</p><p>这个题还有一个特殊的性质: <strong>边权只可能是0或1</strong> ,所以我们建立双端队列代替dijk的堆跑最短路.</p><p>于是这个题做完了.<br><s>做完个屁,记得不可达输出-1,某人WA了四发调了好几个小时才发现不是算法的问题,是特判-1的问题,唐完了</s></p><h2 id="质因数分解和">质因数分解和</h2><p>给定数列a,计算<br>$$\sum_{i=1}^n\sum_{j=1}^n\gcd(i,j)a_ia_j\mod1e9+7$$<br>其中 $n\le2e6,a_i\le1e9$ .</p><p>居然是道莫反题,没做出来真惭愧.</p>]]></content>
      
      
      <categories>
          
          <category> Contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言课程设计笔记</title>
      <link href="/2024/10/31/00008C%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/31/00008C%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>C语言程序设计是Flu上的最爽的一节课了,没有之一,因为自己写程序真的很爽.<br>本着开源精神,Flu放出来了自己对于课设的研究.<br>(Flu这门课是6班第一,非常幸运)</p><h1>课设介绍</h1><p>写一个教务系统,支持学生的增删查改,选课的增删查改,以及成绩的管理云云,Flu写的最后甚至能发通知,非常好玩的程序,因为可以写好多好多别人想不到的点子.</p><h2 id="新语法">新语法</h2><p>Flu没见过的操作(某些语法糖或者函数而已)</p><ol><li>有人 <code>#define _CRT_SECURE_NO_WARNINGS 1</code> 能正常跑.</li><li>一堆奇奇怪怪的头文件名</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;easyx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;io.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建自定义结构体变量语法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> aaa&#123;</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>printf</code> 一些奇奇怪怪的性质(下面这句话听说是,长度为5字符串右对齐,左边有空的位置补空格)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%- 5s&quot;</span>,str);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>\t</code> 是 <code>Tab</code> 的意思.</li><li><code>scanf(&quot;%[^\n]&quot;,&amp;ch)</code> 好像能读入一个除了换行之外的字符.</li><li><code>rewind(stdin)</code> 谜之函数不会用.</li></ol><h2 id="战后总结">战后总结</h2><p>23级6班4组的课设终于结束了…事情也告一段落了,是时候写点总结了.<br>在为我的的逆天程序庆祝的时候,别忘了反思反思:<br>我们组为何吊打所有6班其他的组?为什么老师中意我们的程序?<br>这篇文章不仅仅是为了总结,还有未来遇到相似的大情景自由设计的环境时我们该怎么办?</p><p>所以,为了更好的启发Flu将来写出更牛逼的程序,Flu给自己留下了一个后记,启发未来的Fluorine.</p><p>我必须承认,四名组员都有各自的作用.曾翰页面设计机器学习直接帮大忙,剩下的两名组员提出了什么激发了Flu的创作和程序?<br>学生:名字,性别,学号,选几门课,选课名称<br>老师:名字,性别,工号,教几门课,教课名称,电子邮件,所在学院,办公地址,<br>管理:名字,账号,密码(管理很少,不需要记多少东西)<br>课程:名字,课程的序列号,平时分考试分比例,所有学生的名字,学号,平时分,考试分</p><p>我认为有以下几点:</p><ol><li><p>我们可以导出Excel表格(.csv),多少组不能导出的难道从数据里面节选吗哈哈哈哈</p></li><li><p>我们可以让老师发通知(还可以撤销)(通知很多看着不烦吗,所以只能发一个了,绝对不是我懒),这个功能是有比没有强,不需要多华丽,代表你思考到了就行</p></li><li><p>我们的历史日志一个月一记录自动分文件</p></li><li><p>我们写的十字链表,在数据结构上本来就有巨大优势</p></li><li><p>我们不偷懒,课程,竞赛等能写链表的就写链表</p></li><li><p>我们的数据都是活的可变的,绩点计算是随时可以改变的</p></li><li><p>我们的课程可以自由更改平时分考试分比例</p></li><li><p>我们的系统会自动区分课程类型</p></li><li><p>我们的文件处理操作整的好(刚开始建立,操作都是在链表上进行,结束时重写所有文件)</p></li><li><p>我们可以设定系统维护(小功能,很好写)</p></li><li><p>Flu写的竞赛绩点计算时间复杂度是O(n)的,复杂度正确,使用了位运算和lowbit状压等小小的黑科技,而且满足同档竞赛覆盖的原则</p></li><li><p>对啊,我们查询支持双关键字,名字或学号查找学生,好人性化啊(Flu感慨)</p></li><li><p>老师说&quot;直接对文件操作是危险的&quot;,何出此言?</p></li><li><p>我们的猛男写法(直接分成三个文件编写)有没有坏处?</p></li><li><p>Flu非常喜欢使用goto,某种意义上因为rep分段需要自己对程序非常熟悉,Flu会不会就是在goto上露马脚了,就是,程序连接性相当强,不像是几个人写出来的,然后老师推断本组其实只有组长和Flu在发力剩下俩人都在摆烂?</p></li></ol><p>所以,Flu可不可以写循环式的程序来避免上述情况?</p><ol start="15"><li><s>可靠的名字来源:OIerDb(划掉)</s></li><li><s>动听的音乐:D大调卡农(划掉)</s></li><li><s>Flu写的排序函数,一个排序一堆比较标准很优雅,真的太优雅了,Flu最引以为豪的部分(划掉)</s></li></ol><h2 id="关于姜洪涛组程序的解析">关于姜洪涛组程序的解析</h2><p>(解析过程还是比较快的,因为他们没给样例…)<br>启发如下:<br>论文可以考虑加上一作二作三作,通讯作者,发表时间,期刊卷,期刊期,发表时间,论文号,起始页结束页,<br>指导老师,项目名,项目标号,起始时间,结束时间,竞赛举办单位,学生学院<br>总体排名(百分比)这个很有意思啊<br>大创竞赛论文三项分布<br>多行宏编译Flu其实是不会的<br>随机生成验证码(干啥用的有必要理清楚)</p><h2 id="关于王桓宇组课设的解析">关于王桓宇组课设的解析</h2><p>好像看到了一些其他的东西,先说其他的亮点吧:<br>一键清除所有信息(free其实Flu实现的不是特别好,因为竞赛从来不用free,程序结束了就是结束了,没啥后果,对下一次启动程序也留不下任何信息,所以Flu其实挺轻视free的,malloc也许会有点用)<br>及格率,优秀率,选课人数(这个其实给个输出窗口就好了)<br>靠他直接禁止用户名相同了,牛掰,Flu只是禁止学号相同的说…</p><p>define 一个长名字,然后啥也不写,默认值是多少???</p><p>但是我不是很明白他为什么要整好多个学院,首先是竞赛绩点计算会出问题,其次是每个学院保研率都不一样他的数据量很小是怎么敢的,而且数据量很大的话为什么不建字典树呢…</p><h2 id="关于曾翰机器学习的解析">关于曾翰机器学习的解析</h2><p>失败.<br>别装了,不会就是不会,承认自己菜很难吗?</p><h2 id="关于曾翰页面设计的解析">关于曾翰页面设计的解析</h2><p>失败.<br>王桓宇的源码搞到了,再制作课设的时候直接上Easyx交互了,谁还需要页面设计?</p><p>Flu自己发现的坑(潜在优势)的概要:</p><ol><li>如何让密码输入就变成星号?如何旁边设置一个按钮,点一下就变成原来的密码,再点一下恢复星号?</li><li>C++程序真的不能自己创建文件夹吗?</li><li>时间表示如何变成几月几日(Flu没有认真学习时间库,随便套了一个英文输出的时间就点到为止了)?好好学学</li><li>各种防hack措施仍然需要写…</li><li>如何让程序输出BMP图像?有必要学习导出饼状图或者条形图(学会了这个是不是就无敌了我焯)</li><li>如何多文件使用模板(template)?</li></ol><p>我们可不可以加上生日,为学生庆祝生日(像通知一样)?<br>我们可不可以加上课程独有的作弊标记?作弊可是要跟一辈子的(和是否重修放在一起,就是那个挂科标记)<br>我们可不可以加上最大分最小分平均分和方差中位数众数的统计?Flu最初可是说要&quot;设计一款数学分析软件&quot;来着,最后跑题了<br>我们为什么不可以处理转专业的情况?可不可以加上几班,学院?<br>我们可不可以让学生评价老师?(塞个指针在课程学生结构体里面,嗯就这样,十字链表是吧,真tm有你的这么能凹是吧)<br>有没有什么别的能够优化的地方?比如按照学院构建一棵大字典树,然后学生都是节点(但是那会上升到全校的选课,我估计你但凡能写出来直接满了吧),但是是不是计算机系竞赛会影响绩点计算<br>我们可不可以加广告?(划掉,这不是啥好东西,而且没人给你钱)<br>可不可以给人几次机会然后账户锁定???能不能这么玩???<br>加上样例输入,比方说&quot;例如ABC,例如98&quot;</p><h1>Flu的代码奉上</h1><p>数据不放了,毕竟是一堆真名字和假成绩,自己看着输入做,很好搞的.</p><h2 id="数据格式-txt">数据格式.txt</h2><p>看好了,真正写程序之前必须规定数据格式,不然一个人写个人的咋输入都搞不定.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">所有学生的数据也有我来制造吧。</span><br><span class="line">所有文件在./data/xxx.txt里面，规定格式进行IO操作。</span><br><span class="line"></span><br><span class="line">首先要明确一点，data存放的是内部文件，不应该让用户看到，密码不用加密，主打的就是一个公开透明。这也就意味着内部文件全部是正确的，否则程序压根跑不了，链表建不起来就会爆炸。比如添加学生输个<span class="number">114</span>分不合法的应该直接指出，并且让用户重来。</span><br><span class="line"></span><br><span class="line">所以，之前Flu有一个wrong.txt，是放报错日志的，由于没内鬼，就删了这个设定。</span><br><span class="line"></span><br><span class="line">注意使用ANSI编码否则会乱码。</span><br><span class="line"></span><br><span class="line">另外，Flu不会也懒得学fseek，采用重载所有文件的形式更新文件。（谁会在意程序几秒结束呢。。。都在意多快出结果）</span><br><span class="line">所有课程必须存在，不能重（内部文件嘛，出错了还得了？）</span><br><span class="line">Flu是反对分管理员的，因为管理员权限很高的情况下应该有能力对文件直接进行修改的其实，犯不着开程序半天添加一个学生。</span><br><span class="line"></span><br><span class="line">所有人密码除非自己设定默认<span class="number">1145141919810</span>位数高还好记：）</span><br><span class="line"></span><br><span class="line">flag计算规则：</span><br><span class="line">论文<span class="number">6</span>等+<span class="number">9</span></span><br><span class="line">竞赛，是+<span class="number">5</span>，A+<span class="number">2</span>，B+<span class="number">1</span>，C=<span class="number">0</span>；</span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">teacher.txt  存放所有的老师信息。</span><br><span class="line">  %s     %s     %s    %d    %s     %lld                   (<span class="string">&quot;%s %s %d %s %lld&quot;</span>)</span><br><span class="line">姓名   性别    密码  工号   邮箱  电话号码</span><br><span class="line">char   char   char   <span class="type">int</span>    char   long long</span><br><span class="line"> <span class="number">40</span>      <span class="number">10</span>        <span class="number">40</span>              <span class="number">50</span>                       空间分配</span><br><span class="line"></span><br><span class="line">%d</span><br><span class="line">教几门课程</span><br><span class="line"><span class="type">int</span></span><br><span class="line"></span><br><span class="line">%s</span><br><span class="line">课程名称</span><br><span class="line">char</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">cources.txt 存放所有课程信息</span><br><span class="line">%s      %s     %d  %f          %d                 %d             %s</span><br><span class="line">名字 序列号 学时 学分 平时成绩占比 考试成绩占比   课程类型(必修，限选算绩点)</span><br><span class="line"><span class="number">100</span>   <span class="number">100</span>                     <span class="number">0</span><span class="number">-100</span>的<span class="type">int</span>                            <span class="number">20</span></span><br><span class="line"></span><br><span class="line">%d</span><br><span class="line">学生数</span><br><span class="line"></span><br><span class="line">%s    %d   %f   %f</span><br><span class="line">名字 学号 平时 考试（最终成绩，绩点现算）</span><br><span class="line">               floatfloat                float     float</span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">student.txt存放所有的学生信息</span><br><span class="line">%s     %s  %d   %s</span><br><span class="line">名字 性别 学号 密码</span><br><span class="line"><span class="number">40</span>     <span class="number">10</span>            <span class="number">40</span></span><br><span class="line">%d</span><br><span class="line">选几门课</span><br><span class="line">%s</span><br><span class="line">直接连就行了，课程名</span><br><span class="line"><span class="number">100</span></span><br><span class="line">%d</span><br><span class="line">竞赛得奖个数</span><br><span class="line">%s                     %d     %d</span><br><span class="line">竞赛或论文名字 几等奖 代号(代号会影响绩点计算)</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">unjing.txt 存放所有未审核的竞赛</span><br><span class="line">%d                         %s          %d                                  %s                         %s</span><br><span class="line">目标老师工号 认证学生名字 认证学生学号 认证奖项或论文名字加几等奖 学生自己写的备注</span><br><span class="line">                            <span class="number">40</span>                                             <span class="number">200</span>                             <span class="number">200</span></span><br><span class="line"></span><br><span class="line">认证好直接加学生后面即可。</span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">jidian.txt 存放绩点计算规则</span><br><span class="line">%d %f</span><br><span class="line">多少分对应多少绩点</span><br><span class="line">%d %f</span><br><span class="line">%d %f</span><br><span class="line">%d %f</span><br><span class="line">%d %f...一共<span class="number">14</span>个</span><br><span class="line"></span><br><span class="line">最后是竞赛计算</span><br><span class="line">%f 一共有<span class="number">12</span>个，前<span class="number">6</span>个论文后<span class="number">6</span>个竞赛。</span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">.csv所有人导出的规则</span><br><span class="line">名字  排名   %d</span><br><span class="line">学科 平时分 考试分 最终分</span><br><span class="line">xxxxxx</span><br><span class="line">奖项(不空行) </span><br><span class="line">xxxxx %d等奖</span><br><span class="line"></span><br><span class="line">《--------------------------------------------------------------------------------》</span><br><span class="line">history.txt历史成员各种记录，不用多说（虽然一般都是log命名，但是不重要，有这么个功能就行了）</span><br></pre></td></tr></table></figure><h2 id="function-h-头文件-结构体-常量区-其实是全局变量了-函数的声明">function.h 头文件,结构体,常量区(其实是全局变量了),函数的声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FUNCTION_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNCTION_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPOCH 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Len_Max 25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PWD 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_RATE 0.2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_FEATURES 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRAIN_RATE 0.8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FEATURE_MAX 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_MAX 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEARNING_RATE 0.01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LINE_LENGTH 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELIMITER <span class="string">&quot;,&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sl(x) Sleep(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si putchar(<span class="string">&#x27;?&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cls system(<span class="string">&quot;cls&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> asdf putchar(<span class="string">&#x27;,&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> space putchar(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> enter putchar(<span class="string">&#x27;\n&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">STUDENT</span> &#123;</span><br><span class="line"><span class="type">int</span> id;<span class="comment">//学号</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">40</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="type">float</span> daily;<span class="comment">//平时成绩</span></span><br><span class="line"><span class="type">float</span> text;<span class="comment">//考试成绩</span></span><br><span class="line"><span class="type">float</span> <span class="keyword">final</span>;<span class="comment">//最终成绩</span></span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">cource</span> &#123;</span><br><span class="line"><span class="type">char</span> number[<span class="number">50</span>];<span class="comment">//课程编号</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];<span class="comment">//课程名称</span></span><br><span class="line"><span class="type">char</span> type[<span class="number">50</span>];<span class="comment">//课程类型 限选，必修，选修，体育</span></span><br><span class="line"><span class="type">char</span> notice[<span class="number">300</span>];<span class="comment">//通知，老师可以发布通知</span></span><br><span class="line"><span class="type">int</span> notic;<span class="comment">//有无通知的标记</span></span><br><span class="line"><span class="type">int</span> hours;<span class="comment">//总学时</span></span><br><span class="line"><span class="type">int</span> top;<span class="comment">//多少人学这个</span></span><br><span class="line"><span class="type">float</span> credit;<span class="comment">//学分</span></span><br><span class="line"><span class="type">int</span> Daily;<span class="comment">//平时成绩占比</span></span><br><span class="line"><span class="type">int</span> Text;<span class="comment">//考试成绩占比</span></span><br><span class="line">Student stu[<span class="number">100</span>];<span class="comment">//学生信息</span></span><br><span class="line">cource* next;</span><br><span class="line">&#125;Course;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">jing</span> &#123;<span class="comment">//竞赛 </span></span><br><span class="line"><span class="type">char</span> name[<span class="number">200</span>];<span class="comment">//竞赛名称 </span></span><br><span class="line"><span class="type">char</span> flg;<span class="comment">//竞赛种类 ABbC b是B*</span></span><br><span class="line"><span class="type">char</span> ff;<span class="comment">//是不是计算机类竞赛，否则所得绩点折半（什么霸王条款）&#x27;0&#x27;不是 &#x27;1&#x27;Y</span></span><br><span class="line"><span class="comment">//float rp[10];//加绩点几等奖对应的</span></span><br><span class="line">jing* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">jingper</span> &#123;<span class="comment">//个人竞赛经历</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">200</span>];<span class="comment">//比赛名称</span></span><br><span class="line"><span class="type">int</span> num;<span class="comment">//几等奖 </span></span><br><span class="line"><span class="type">int</span> flg;<span class="comment">//是论文还是比赛，这俩绩点计算不一样</span></span><br><span class="line">jingper* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">jingupper</span> &#123;<span class="comment">//个人竞赛经历,自己填的，填完了申报</span></span><br><span class="line"><span class="type">char</span> ownername[<span class="number">40</span>];<span class="comment">//申请人姓名</span></span><br><span class="line"><span class="type">int</span> xh;<span class="comment">//申请人学号</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">200</span>];<span class="comment">//比赛名称</span></span><br><span class="line"><span class="type">char</span> ppin[<span class="number">100</span>];<span class="comment">//获奖序列号或者备注</span></span><br><span class="line"><span class="type">int</span> num;<span class="comment">//几等奖 </span></span><br><span class="line">jingupper* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">choose</span> &#123;</span><br><span class="line">Course* tar;</span><br><span class="line">choose* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> &#123;</span><br><span class="line"><span class="type">int</span> xh;<span class="comment">//学号 </span></span><br><span class="line"><span class="type">char</span> name[<span class="number">40</span>];<span class="comment">//姓名 </span></span><br><span class="line"><span class="type">float</span> over;<span class="comment">//最终绩点 </span></span><br><span class="line"><span class="type">char</span> pas[<span class="number">40</span>];<span class="comment">//密码</span></span><br><span class="line"><span class="type">char</span> sex[<span class="number">10</span>];<span class="comment">//性别</span></span><br><span class="line"><span class="type">char</span> ff;<span class="comment">//推免资格</span></span><br><span class="line"><span class="type">int</span> rank;<span class="comment">//排名现算吧</span></span><br><span class="line"><span class="type">int</span> choo;<span class="comment">//选课数</span></span><br><span class="line"><span class="type">int</span> ppri;<span class="comment">//获奖数</span></span><br><span class="line">choose* first;</span><br><span class="line">jingper* prize;</span><br><span class="line">stu* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">40</span>];<span class="comment">//老师名字</span></span><br><span class="line"><span class="type">int</span> xh;<span class="comment">//老师账号</span></span><br><span class="line"><span class="type">char</span> sex[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> email[<span class="number">50</span>];<span class="comment">//电子邮件</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tel;<span class="comment">//电话</span></span><br><span class="line"><span class="type">char</span> pas[<span class="number">40</span>];<span class="comment">//老师密码</span></span><br><span class="line"><span class="type">int</span> tn;<span class="comment">//教几门课</span></span><br><span class="line">choose* teach;<span class="comment">//教课</span></span><br><span class="line">jingupper* first;</span><br><span class="line">teacher* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">adm</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> pas[<span class="number">100</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> xh;</span><br><span class="line">adm* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">StudentGrade</span> &#123;</span><br><span class="line"><span class="type">char</span> Class[Len_Max];</span><br><span class="line"><span class="type">int</span> Grade[Len_Max];</span><br><span class="line">&#125;STG;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">double</span> feature[FEATURE_MAX];</span><br><span class="line"><span class="type">float</span> label;</span><br><span class="line">&#125; MR_Sample;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">double</span> w[FEATURE_MAX];</span><br><span class="line"><span class="type">double</span> b;</span><br><span class="line">&#125;MR_Model;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">double</span> features[NUM_FEATURES]; <span class="comment">// 有9个特征</span></span><br><span class="line"><span class="type">double</span> label;<span class="comment">//标签为：学习状况</span></span><br><span class="line">&#125; LR_Sample;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">double</span> weights[NUM_FEATURES]; <span class="comment">// 权重</span></span><br><span class="line"><span class="type">double</span> bias; <span class="comment">// 偏置</span></span><br><span class="line">&#125; LR_Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">float</span> jingji[<span class="number">12</span>];<span class="comment">//竞赛绩点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">float</span> jidian[<span class="number">14</span>];<span class="comment">//分数对应绩点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span>    point[<span class="number">14</span>];<span class="comment">//分数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">time_t</span> timer;</span><br><span class="line"><span class="keyword">extern</span> tm* info;</span><br><span class="line"><span class="keyword">extern</span> FILE* his;</span><br><span class="line"><span class="keyword">extern</span> Course* couhead;</span><br><span class="line"><span class="keyword">extern</span> stu* stuhead;</span><br><span class="line"><span class="keyword">extern</span> teacher* teahead;</span><br><span class="line"><span class="keyword">extern</span> jing* jinghead;</span><br><span class="line"><span class="keyword">extern</span> adm* admhead;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Multipl_model[];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Logical_model[];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> width;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> height;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> padding;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> length;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> UPDATE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;------------------------------ - Function------------------------------------------&gt;</span></span><br><span class="line"><span class="comment">//!!!!!!!!!!===================hisss历史文件选择和记录==============</span></span><br><span class="line"><span class="function">FILE *<span class="title">gethis</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//!!!!!!!!!!=========================file===============================</span></span><br><span class="line"><span class="function">teacher * <span class="title">buildtea</span><span class="params">(Course * head)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getunp</span><span class="params">(teacher* head)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updunp</span><span class="params">(teacher* head)</span></span>;</span><br><span class="line"><span class="function">jing* <span class="title">jingsearch</span><span class="params">(<span class="type">int</span> cnt, jing* head)</span></span>;</span><br><span class="line"><span class="function">Course* <span class="title">coursearch1</span><span class="params">(Course* head, <span class="type">char</span> arr[])</span></span>;</span><br><span class="line"><span class="function">Course* <span class="title">ReadCouInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcou</span><span class="params">(Course* head)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updtea</span><span class="params">(teacher* head)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getjidian</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updjidian</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">jing* <span class="title">compet</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">stu* <span class="title">ReadStuInfor</span><span class="params">(Course* hhead)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updstu</span><span class="params">(stu* head)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getadm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getupdate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updupdate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcomp</span><span class="params">(jing *head)</span></span>;</span><br><span class="line"><span class="comment">//!!!!!!!!!=======================search==================================</span></span><br><span class="line"><span class="function">teacher* <span class="title">teasearch1</span><span class="params">(<span class="type">int</span> tar, teacher* head)</span></span>;<span class="comment">//工号查找</span></span><br><span class="line"><span class="function">teacher* <span class="title">teasearch2</span><span class="params">(<span class="type">int</span> tar, teacher* head)</span></span>;<span class="comment">//顺序查找</span></span><br><span class="line"><span class="function">jing* <span class="title">jingsearch</span><span class="params">(<span class="type">int</span> cnt, jing* head)</span></span>;<span class="comment">//按照序号查找竞赛名字</span></span><br><span class="line"><span class="function">Course* <span class="title">coursearch1</span><span class="params">(Course* head, <span class="type">char</span> arr[])</span></span>;<span class="comment">//按课程名字查找课程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">courstusearch1</span><span class="params">(Course* nnode, <span class="type">int</span> xh, <span class="type">float</span>&amp; res)</span></span>;<span class="comment">//按学号课程中查找学生的位置，返回位号（int）和成绩</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">courstusearch2</span><span class="params">(Course* nnode, <span class="type">char</span> arr[], <span class="type">float</span>&amp; res)</span></span>;<span class="comment">//按名字课程中查找学生的位置，返回位号（int）</span></span><br><span class="line"><span class="function">Course* <span class="title">cousearch1</span><span class="params">(Course* head, <span class="type">int</span> num)</span></span>;<span class="comment">//按照序号返回指定课程指针</span></span><br><span class="line"><span class="function">stu* <span class="title">stusearch1</span><span class="params">(<span class="type">char</span> arr[], stu* head)</span></span>;<span class="comment">//姓名查找</span></span><br><span class="line"><span class="function">stu* <span class="title">stusearch2</span><span class="params">(<span class="type">int</span> tar, stu* head)</span></span>;<span class="comment">//学号查找</span></span><br><span class="line"><span class="function">stu* <span class="title">stusearch3</span><span class="params">(<span class="type">int</span> tar, stu* head)</span></span>;<span class="comment">//顺序查找</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!!!!!!!!!==================machine learn==================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load_MRmodel</span><span class="params">(<span class="type">char</span>* model_filename, MR_Model* model)</span></span>;<span class="comment">//加载多元线性回归模型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load_LRmodel</span><span class="params">(<span class="type">char</span>* model_filename, LR_Model* model)</span></span>;<span class="comment">//加载逻辑回归模型</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">LR_predict</span><span class="params">(LR_Model* model, LR_Sample* LR_Sample)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">MR_predict</span><span class="params">(MR_Model* model, MR_Sample* MR_Sample)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gradeprdict</span><span class="params">()</span></span>;<span class="comment">//成绩预测</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Learning_state</span><span class="params">()</span></span>;<span class="comment">//学习状况判断</span></span><br><span class="line"><span class="comment">//!!!!!!!!!!=============sort cmp rank============================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc11</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc12</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc21</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc22</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc31</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc32</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc41</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc42</span><span class="params">(Student a, Student b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coursort</span><span class="params">(Course* nnode, <span class="type">char</span> a(Student a, Student b))</span></span>;<span class="comment">//一个课程排序，经典冒泡</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps10</span><span class="params">(stu* a, stu* b)</span></span>;<span class="comment">//学号逆序，小的在上</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps21</span><span class="params">(stu* a, stu* b)</span></span>;<span class="comment">//班号排序，一个班的按成绩从大往小排</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps22</span><span class="params">(stu* a, stu* b)</span></span>;<span class="comment">//班号排序，一个班的按推免从大往小排</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps31</span><span class="params">(stu* a, stu* b)</span></span>;<span class="comment">//推免排序，排序按照成绩</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps41</span><span class="params">(stu* a, stu* b)</span></span>;<span class="comment">//平均绩点逆序，大的在上</span></span><br><span class="line"><span class="function">stu* <span class="title">stusort</span><span class="params">(stu* head, <span class="type">char</span> a(stu* a, stu* b))</span></span>;<span class="comment">//学生排序，经典冒泡，cmp表示比较标准</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!!!!!!!!===================print csv================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lunwenprr</span><span class="params">()</span></span>;<span class="comment">//打印认证的那几档</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jingsaiprr</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stujingprr</span><span class="params">(stu* node)</span></span>;<span class="comment">//打印一个人所有奖项</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coustuprr</span><span class="params">(Course* node)</span></span>;<span class="comment">//打印课程中的所有学生的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jingprr</span><span class="params">(jing* head)</span></span>;<span class="comment">//按照序号把竞赛打印到屏幕上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">teaprr</span><span class="params">(teacher* head)</span></span>;<span class="comment">//按照序号打印老师在屏幕上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">teacouprr</span><span class="params">(teacher* node)</span></span>;<span class="comment">//按照序号打印某个老师教的所有课</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stuperprr</span><span class="params">(stu* node)</span></span>;<span class="comment">//学生单点打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stupercsvprr</span><span class="params">(stu* node)</span></span>;<span class="comment">//单点导出一个人的csv文件，存到/output文件夹里面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stuprr</span><span class="params">(stu* head)</span></span>;<span class="comment">//打印所有学生</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fstuperprr</span><span class="params">(stu* node)</span></span>;<span class="comment">//学生单点写进历史</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coupercsvprr</span><span class="params">(cource* head)</span></span>;<span class="comment">//打印一个科目所有选课同学信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stucsvprr</span><span class="params">(stu* head)</span></span>;<span class="comment">//导出csv</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!!!!!!!!!!===================check========================</span></span><br><span class="line"><span class="function">stu* <span class="title">checkstu</span><span class="params">(<span class="type">int</span>&amp; cfg, <span class="type">char</span> arr[], <span class="type">int</span> tar, stu* head)</span></span>;<span class="comment">//检查学生密码是否正确0密码错误1登录成功4查无此人</span></span><br><span class="line"><span class="function">teacher* <span class="title">checktea</span><span class="params">(<span class="type">int</span>&amp; cfg, <span class="type">int</span> tar, <span class="type">char</span> ppas[], teacher* head)</span></span>;<span class="comment">//检查老师密码是否正确0密码错误1正确4查无此人</span></span><br><span class="line"><span class="function">adm* <span class="title">checkadm</span><span class="params">(<span class="type">int</span>&amp; opt2, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ko, <span class="type">char</span> arg[], adm* head)</span></span>;</span><br><span class="line"><span class="comment">//!!!!!!!!!!==================calculation====================</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">jidiancalc</span><span class="params">(<span class="type">float</span> f)</span></span>;<span class="comment">//成绩的绩点计算</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stucalc</span><span class="params">(stu* nnode)</span></span>;<span class="comment">//一个学生计算绩点，使用之前保证学生绩点算法未改变</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sturecalc</span><span class="params">(stu* head)</span></span>;<span class="comment">//所有人都重新算绩点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">courperrecalc</span><span class="params">(Course* nnode)</span></span>;<span class="comment">//一个课程重新计算所有人成绩</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">courrecalc</span><span class="params">(Course* head)</span></span>;<span class="comment">//重新计算所有人成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrank</span><span class="params">(stu* head)</span></span>;<span class="comment">//获取排名，使用前请确保排好序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!!!!!!!!========================new del==============================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newstu</span><span class="params">(<span class="type">char</span> arr[])</span></span>;<span class="comment">//建新学生</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delstu</span><span class="params">(stu* node)</span></span>;<span class="comment">//删除学生</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newtea</span><span class="params">(<span class="type">char</span> arg[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面设计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getwidth</span><span class="params">(<span class="type">int</span>* width, <span class="type">int</span>* height)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_pdding</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_head</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_tail</span><span class="params">(<span class="type">int</span> rol)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_line</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_text</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_center</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_first</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">concatenateStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">intToString</span><span class="params">(<span class="type">int</span> num)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="function-cpp-函数功能实现">function.cpp 函数功能实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="comment">//&lt;------------------------------Constexpr----------------------------------------&gt;</span></span><br><span class="line"><span class="type">float</span> jingji[<span class="number">12</span>];<span class="comment">//竞赛绩点</span></span><br><span class="line"><span class="type">float</span> jidian[<span class="number">14</span>];<span class="comment">//分数对应绩点</span></span><br><span class="line"><span class="type">int</span>    point[<span class="number">14</span>];<span class="comment">//分数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> UPDATE;<span class="comment">//系统维护时间</span></span><br><span class="line"><span class="type">time_t</span> timer; tm* info;<span class="comment">//这是时间结构体</span></span><br><span class="line">FILE* his = <span class="built_in">gethis</span>();<span class="comment">//历史操作，不可更改，只能续写(先加\n)</span></span><br><span class="line">Course* couhead = <span class="literal">NULL</span>;<span class="comment">//在程序一开始读入课程基本信息</span></span><br><span class="line">stu* stuhead = <span class="literal">NULL</span>;<span class="comment">//在程序一开始读入学生基本信息</span></span><br><span class="line">teacher* teahead = <span class="literal">NULL</span>;<span class="comment">//建立老师体系</span></span><br><span class="line">jing* jinghead = <span class="literal">NULL</span>;<span class="comment">//建立竞赛体系</span></span><br><span class="line">adm* admhead;<span class="comment">//管理员头头</span></span><br><span class="line"><span class="type">char</span> Multipl_model[] = <span class="string">&quot;./data/model.txt&quot;</span>;<span class="comment">//只因器学习的东西，别动就完了</span></span><br><span class="line"><span class="type">char</span> Logical_model[] = <span class="string">&quot;./data/Model_.txt&quot;</span>;<span class="comment">//只因器学习的东西，别动就完了</span></span><br><span class="line"><span class="type">int</span> jingnum;<span class="comment">//多少个竞赛？</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> length = <span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> width, height;</span><br><span class="line"><span class="type">int</span> padding = (width - length) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;-----------------hisss历史文件选择和记录------------------------------&gt;</span></span><br><span class="line"><span class="function">FILE *<span class="title">gethis</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">time</span>(&amp;timer);</span><br><span class="line">info=<span class="built_in">localtime</span>(&amp;timer);</span><br><span class="line"><span class="type">int</span> yy=info-&gt;tm_year+<span class="number">1900</span>;</span><br><span class="line"><span class="type">char</span> nname[<span class="number">100</span>]=<span class="string">&quot;./log/&quot;</span>;</span><br><span class="line"><span class="type">int</span> lll=<span class="built_in">strlen</span>(nname);</span><br><span class="line">nname[lll]=yy/<span class="number">1000</span>+<span class="number">48</span>;</span><br><span class="line">nname[lll+<span class="number">1</span>]=yy/<span class="number">100</span>%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">nname[lll+<span class="number">2</span>]=yy/<span class="number">10</span>%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">nname[lll+<span class="number">3</span>]=yy%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">yy=info-&gt;tm_mon;</span><br><span class="line">nname[lll+<span class="number">4</span>]=yy/<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">nname[lll+<span class="number">5</span>]=yy%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">nname[lll+<span class="number">6</span>]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">nname[lll+<span class="number">7</span>]=<span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">nname[lll+<span class="number">8</span>]=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">nname[lll+<span class="number">9</span>]=<span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">nname[lll+<span class="number">10</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fopen</span>(nname,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;------------------------------FILE------------------------------&gt;done</span></span><br><span class="line"><span class="function">teacher* <span class="title">buildtea</span><span class="params">(Course* head)</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/teacher.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">teacher* res = (teacher*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(teacher));</span><br><span class="line">res-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> a[<span class="number">40</span>], b[<span class="number">5</span>], c[<span class="number">40</span>], e[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> d, n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f;</span><br><span class="line">teacher* tmp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %s %s %d %s %lld %d&quot;</span>, a, b, c, &amp;d, e, &amp;f, &amp;n) != EOF) &#123;</span><br><span class="line">tmp = (teacher*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(teacher));</span><br><span class="line">tmp-&gt;first = <span class="literal">NULL</span>; tmp-&gt;teach = <span class="literal">NULL</span>; tmp-&gt;next = res-&gt;next;</span><br><span class="line">res-&gt;next = tmp;</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;sex, b);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, c);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, a);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;email, e);</span><br><span class="line">tmp-&gt;tel = f;</span><br><span class="line">tmp-&gt;tn = n;</span><br><span class="line">tmp-&gt;xh = d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s&quot;</span>, e);</span><br><span class="line">Course* ttmp = <span class="built_in">coursearch1</span>(head, e);</span><br><span class="line">choose* nnode = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(choose));</span><br><span class="line">nnode-&gt;next = tmp-&gt;teach;</span><br><span class="line">tmp-&gt;teach = nnode;</span><br><span class="line">nnode-&gt;tar = ttmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line"><span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getunp</span><span class="params">(teacher* head)</span> </span>&#123;<span class="comment">//从文件读到申请信息</span></span><br><span class="line">FILE* unp = <span class="built_in">fopen</span>(<span class="string">&quot;./data/unjing.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">teacher* tar;</span><br><span class="line">jingupper* tmp;</span><br><span class="line"><span class="type">int</span> xx, nnum, xh;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">200</span>], nnn[<span class="number">100</span>], nname[<span class="number">40</span>];<span class="comment">//buf名称，nnn备注</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(unp, <span class="string">&quot;%d %s %d %s %s %d&quot;</span>, &amp;xx, nname, &amp;xh, buf, nnn, &amp;nnum) != EOF) &#123;</span><br><span class="line">tar = <span class="built_in">teasearch1</span>(xx, head);</span><br><span class="line">tmp = (jingupper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingupper));</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;ownername, nname);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, buf);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;ppin, nnn);</span><br><span class="line">tmp-&gt;xh = xh;</span><br><span class="line">tmp-&gt;num = nnum;</span><br><span class="line">tmp-&gt;next = tar-&gt;first;</span><br><span class="line">tar-&gt;first = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(unp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updunp</span><span class="params">(teacher* head)</span> </span>&#123;</span><br><span class="line">FILE* unp = <span class="built_in">fopen</span>(<span class="string">&quot;./data/unjing.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">jingupper* tmp;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tmp = head-&gt;first;</span><br><span class="line"><span class="keyword">while</span> (tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(unp, <span class="string">&quot;%d %s %d %s %s %d\n&quot;</span>, head-&gt;xh, tmp-&gt;ownername, tmp-&gt;xh, tmp-&gt;name, tmp-&gt;ppin, tmp-&gt;num);</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(unp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Course* <span class="title">ReadCouInfor</span><span class="params">()</span> </span>&#123;<span class="comment">//在程序一开始读入课程基本信息</span></span><br><span class="line">Course* res = (Course*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Course));</span><br><span class="line">res-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>], num[<span class="number">100</span>], type[<span class="number">20</span>];</span><br><span class="line"><span class="type">float</span> jid;</span><br><span class="line"><span class="type">int</span> r1, r2, t, notic;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/cources.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %s %d %f %d %d %s %d&quot;</span>, name, num, &amp;t, &amp;jid, &amp;r1, &amp;r2, type, &amp;notic) != EOF) &#123;</span><br><span class="line">Course* tmp = (Course*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Course));</span><br><span class="line">tmp-&gt;next = res-&gt;next;</span><br><span class="line">res-&gt;next = tmp;</span><br><span class="line"><span class="keyword">if</span> (notic == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s&quot;</span>, tmp-&gt;notice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%d&quot;</span>, &amp;tmp-&gt;top);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, name);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;number, num);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;type, type);</span><br><span class="line">tmp-&gt;credit = jid;</span><br><span class="line">tmp-&gt;notic = notic;</span><br><span class="line">tmp-&gt;Daily = r1;</span><br><span class="line">tmp-&gt;hours = t;</span><br><span class="line">tmp-&gt;Text = r2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tmp-&gt;top; ++i) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %d %f %f&quot;</span>, tmp-&gt;stu[i].name, &amp;tmp-&gt;stu[i].id, &amp;tmp-&gt;stu[i].daily, &amp;tmp-&gt;stu[i].text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line"><span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcou</span><span class="params">(Course* head)</span> </span>&#123;</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(<span class="string">&quot;./data/cources.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s %s %d %.1f %d %d %s %d\n&quot;</span>, head-&gt;name, head-&gt;number, head-&gt;hours, head-&gt;credit, head-&gt;Daily, head-&gt;Text, head-&gt;type, head-&gt;notic);</span><br><span class="line"><span class="keyword">if</span> (head-&gt;notic == <span class="number">1</span>)<span class="built_in">fprintf</span>(op, <span class="string">&quot;%s\n%d\n&quot;</span>, head-&gt;notice, head-&gt;top);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">fprintf</span>(op, <span class="string">&quot;%d\n&quot;</span>, head-&gt;top);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= head-&gt;top; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s %d %.1f %.1f\n&quot;</span>, head-&gt;stu[i].name, head-&gt;stu[i].id, head-&gt;stu[i].daily, head-&gt;stu[i].text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updtea</span><span class="params">(teacher* head)</span> </span>&#123;</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(<span class="string">&quot;./data/teacher.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s %s %s %d %s %lld\n%d\n&quot;</span>, head-&gt;name, head-&gt;sex, head-&gt;pas, head-&gt;xh, head-&gt;email, head-&gt;tel, head-&gt;tn);</span><br><span class="line">choose* tmp = head-&gt;teach;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= head-&gt;tn; ++i, tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s &quot;</span>, tmp-&gt;tar-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getjidian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/jidian.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%d %f&quot;</span>, &amp;point[i], &amp;jidian[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%f&quot;</span>, &amp;jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updjidian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/jidian.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%d %f\n&quot;</span>, point[i], jidian[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%f &quot;</span>, jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">jing* <span class="title">compet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE* cp = <span class="built_in">fopen</span>(<span class="string">&quot;./data/comp.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">jing* head = (jing*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jing));</span><br><span class="line">jing* tmp = head;</span><br><span class="line"><span class="type">int</span> rr;</span><br><span class="line"><span class="built_in">fscanf</span>(cp, <span class="string">&quot;%d&quot;</span>, &amp;jingnum);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; jingnum; ++i) &#123;</span><br><span class="line">tmp-&gt;next = (jing*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jing));</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">fscanf</span>(cp, <span class="string">&quot;%s %c %c&quot;</span>, (tmp-&gt;name), &amp;(tmp-&gt;flg), &amp;(tmp-&gt;ff));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(cp);</span><br><span class="line"><span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">stu* <span class="title">ReadStuInfor</span><span class="params">(Course* hhead)</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/student.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">stu* res = (stu*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(stu)), * tmp = res;</span><br><span class="line">tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> xh;</span><br><span class="line"><span class="type">char</span> sxx[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> nname[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> pas[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %s %d %s&quot;</span>, nname, sxx, &amp;xh, pas) != EOF) &#123;</span><br><span class="line">tmp = (stu*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(stu));</span><br><span class="line">tmp-&gt;next = res-&gt;next;</span><br><span class="line">res-&gt;next = tmp;</span><br><span class="line">tmp-&gt;prize = <span class="literal">NULL</span>; tmp-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line">tmp-&gt;xh = xh;</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, nname);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;sex, sxx);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, pas);</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%d&quot;</span>, &amp;tmp-&gt;choo);<span class="comment">//选几门课，做一个网状链表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; h &lt; tmp-&gt;choo; ++h) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s&quot;</span>, nname);</span><br><span class="line">choose* ff = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(choose));</span><br><span class="line">ff-&gt;next = tmp-&gt;first;</span><br><span class="line">tmp-&gt;first = ff;</span><br><span class="line">ff-&gt;tar = <span class="built_in">coursearch1</span>(hhead, nname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%d&quot;</span>, &amp;tmp-&gt;ppri);<span class="comment">//是否参加竞赛，参加几个，cpn表示个数，导出填无</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; tmp-&gt;ppri; ++kk) &#123;<span class="comment">//竞赛</span></span><br><span class="line">jingper* ttmp = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line">ttmp-&gt;next = tmp-&gt;prize;</span><br><span class="line">tmp-&gt;prize = ttmp;</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %d %d&quot;</span>, ttmp-&gt;name, &amp;ttmp-&gt;num, &amp;ttmp-&gt;flg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line"><span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;;<span class="comment">//在程序一开始读入学生基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updstu</span><span class="params">(stu* head)</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/student.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="comment">//printf(&quot;%s %s %d %s\n&quot;,head-&gt;name,head-&gt;sex,head-&gt;xh,head-&gt;pas);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,head-&gt;choo);</span></span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%s %s %d %s\n&quot;</span>, head-&gt;name, head-&gt;sex, head-&gt;xh, head-&gt;pas);</span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%d\n&quot;</span>, head-&gt;choo);</span><br><span class="line"><span class="keyword">for</span> (choose* tmp = head-&gt;first; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%s &quot;</span>, (tmp-&gt;tar)-&gt;name);</span><br><span class="line"><span class="comment">//printf(&quot;%s &quot;,(tmp-&gt;tar)-&gt;name);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;\n%d\n&quot;</span>, head-&gt;ppri);<span class="comment">//是否参加竞赛，参加几个，cpn表示个数，导出填无</span></span><br><span class="line"><span class="comment">//printf(&quot;\n%d\n&quot;,head-&gt;ppri);//是否参加竞赛，参加几个，cpn表示个数，导出填无</span></span><br><span class="line"><span class="keyword">for</span> (jingper* tmp = head-&gt;prize; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="comment">//printf(&quot;%s %d %d\n&quot;,tmp-&gt;name,tmp-&gt;num,tmp-&gt;flg);</span></span><br><span class="line"><span class="built_in">fprintf</span>(ip, <span class="string">&quot;%s %d %d\n&quot;</span>, tmp-&gt;name, tmp-&gt;num, tmp-&gt;flg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getadm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">admhead = <span class="literal">NULL</span>;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/adm.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>], name[<span class="number">100</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(ip, <span class="string">&quot;%s %s %llu&quot;</span>, name, buf, &amp;res) != EOF) &#123;</span><br><span class="line">adm* tmp = (adm*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(adm));</span><br><span class="line">tmp-&gt;next = admhead;</span><br><span class="line">admhead = tmp;</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, name);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, buf);</span><br><span class="line">tmp-&gt;xh = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getupdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE* ip = <span class="built_in">fopen</span>(<span class="string">&quot;./data/update.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(ip, <span class="string">&quot;%llu&quot;</span>, &amp;UPDATE);</span><br><span class="line"><span class="built_in">fclose</span>(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updupdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(<span class="string">&quot;./data/update.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%llu&quot;</span>, UPDATE);</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcomp</span><span class="params">(jing *head)</span></span>&#123;</span><br><span class="line">FILE *op=<span class="built_in">fopen</span>(<span class="string">&quot;./data/comp.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op,<span class="string">&quot;%d\n&quot;</span>,jingnum);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;jingnum;++i)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op,<span class="string">&quot;%s %c %d\n&quot;</span>,head-&gt;name,head-&gt;flg,(<span class="type">int</span>)(head-&gt;ff<span class="number">-48</span>));</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&lt;------------------------search-------------------------------------&gt;</span></span><br><span class="line"><span class="function">teacher* <span class="title">teasearch1</span><span class="params">(<span class="type">int</span> tar, teacher* head)</span> </span>&#123;<span class="comment">//工号查找</span></span><br><span class="line"><span class="keyword">for</span> (teacher* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tar == tmp-&gt;xh)<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">teacher* <span class="title">teasearch2</span><span class="params">(<span class="type">int</span> tar, teacher* head)</span> </span>&#123;<span class="comment">//顺序查找</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (teacher* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tar == n)<span class="keyword">return</span> tmp;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">jing* <span class="title">jingsearch</span><span class="params">(<span class="type">int</span> cnt, jing* head)</span> </span>&#123;<span class="comment">//按照序号查找竞赛名字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">1</span>; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == cnt)<span class="keyword">return</span> head;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Course* <span class="title">coursearch1</span><span class="params">(Course* head, <span class="type">char</span> arr[])</span> </span>&#123;<span class="comment">//按课程名字查找课程</span></span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(arr, head-&gt;name) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Course* <span class="title">cousearch1</span><span class="params">(Course* head, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; head != <span class="literal">NULL</span>; ++i, head = head-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (num == i)<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">courstusearch1</span><span class="params">(Course* nnode, <span class="type">int</span> xh, <span class="type">float</span>&amp; res)</span> </span>&#123;<span class="comment">//按学号课程中查找学生的位置，返回位号（int）和成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nnode-&gt;top; ++i) &#123;<span class="comment">//排好序的话返回值就是排名了</span></span><br><span class="line"><span class="keyword">if</span> (nnode-&gt;stu[i].id == xh) &#123;</span><br><span class="line">res = nnode-&gt;stu[i].<span class="keyword">final</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">courstusearch2</span><span class="params">(Course* nnode, <span class="type">char</span> arr[], <span class="type">float</span>&amp; res)</span> </span>&#123;<span class="comment">//按名字课程中查找学生的位置，返回位号（int）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nnode-&gt;top; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(nnode-&gt;stu[i].name, arr) == <span class="number">0</span>) &#123;</span><br><span class="line">res = nnode-&gt;stu[i].<span class="keyword">final</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">stu* <span class="title">stusearch1</span><span class="params">(<span class="type">char</span> arr[], stu* head)</span> </span>&#123;<span class="comment">//姓名查找</span></span><br><span class="line"><span class="keyword">for</span> (stu* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp-&gt;name, arr) == <span class="number">0</span>)<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">stu* <span class="title">stusearch2</span><span class="params">(<span class="type">int</span> tar, stu* head)</span> </span>&#123;<span class="comment">//学号查找</span></span><br><span class="line"><span class="keyword">for</span> (stu* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tar == tmp-&gt;xh)</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">stu* <span class="title">stusearch3</span><span class="params">(<span class="type">int</span> tar, stu* head)</span> </span>&#123;<span class="comment">//顺序查找</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (stu* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next, ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (tar == i)<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;--------------------------check--------------------------------&gt;</span></span><br><span class="line"><span class="function">stu* <span class="title">checkstu</span><span class="params">(<span class="type">int</span>&amp; cfg, <span class="type">char</span> arr[], <span class="type">int</span> tar, stu* head)</span> </span>&#123;<span class="comment">//检查学生密码是否正确0密码错误1登录成功4查无此人</span></span><br><span class="line"><span class="keyword">for</span> (stu* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;xh == tar) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp-&gt;pas, arr) == <span class="number">0</span>) &#123;</span><br><span class="line">cfg = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cfg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cfg = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">teacher* <span class="title">checktea</span><span class="params">(<span class="type">int</span>&amp; cfg, <span class="type">int</span> tar, <span class="type">char</span> ppas[], teacher* head)</span> </span>&#123;<span class="comment">//检查老师密码是否正确0密码错误1正确4查无此人</span></span><br><span class="line"><span class="keyword">for</span> (teacher* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;xh == tar) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp-&gt;pas, ppas) == <span class="number">0</span>) &#123;</span><br><span class="line">cfg = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cfg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cfg = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">adm* <span class="title">checkadm</span><span class="params">(<span class="type">int</span>&amp; opt2, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ko, <span class="type">char</span> arg[], adm* head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (adm* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;xh == ko) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp-&gt;pas, arg) == <span class="number">0</span>) &#123;</span><br><span class="line">opt2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">opt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">opt2 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&lt;--------------------------sort  cmp rank--------------------------------&gt;</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc11</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">final</span> &lt; b.<span class="keyword">final</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc12</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">final</span> &gt; b.<span class="keyword">final</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc21</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.text &lt; b.text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc22</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.text &gt; b.text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc31</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.daily &lt; b.daily;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc32</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.daily &gt; b.daily;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc41</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.id / <span class="number">100</span> == b.id / <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">final</span> &lt; b.<span class="keyword">final</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.id &gt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmpc42</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.id / <span class="number">100</span> == b.id / <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">final</span> &gt; b.<span class="keyword">final</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.id &gt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coursort</span><span class="params">(Course* nnode, <span class="type">char</span> a(Student a, Student b))</span> </span>&#123;<span class="comment">//一个课程排序，经典冒泡</span></span><br><span class="line"><span class="type">char</span> ff = <span class="number">1</span>;</span><br><span class="line">Student c;</span><br><span class="line"><span class="keyword">while</span> (ff) &#123;</span><br><span class="line">ff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nnode-&gt;top; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">a</span>(nnode-&gt;stu[i], nnode-&gt;stu[i + <span class="number">1</span>])) &#123;</span><br><span class="line">c = nnode-&gt;stu[i];</span><br><span class="line">nnode-&gt;stu[i] = nnode-&gt;stu[i + <span class="number">1</span>];</span><br><span class="line">nnode-&gt;stu[i + <span class="number">1</span>] = c;</span><br><span class="line">ff = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps10</span><span class="params">(stu* a, stu* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a-&gt;xh) &gt; (b-&gt;xh);</span><br><span class="line">&#125;<span class="comment">//学号逆序，小的在上</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps21</span><span class="params">(stu* a, stu* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a-&gt;xh / <span class="number">100</span> == b-&gt;xh / <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a-&gt;over &lt; b-&gt;over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a-&gt;xh &gt; b-&gt;xh;</span><br><span class="line">&#125;<span class="comment">//班号排序，一个班的按成绩从大往小排</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps22</span><span class="params">(stu* a, stu* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a-&gt;xh / <span class="number">100</span> == b-&gt;xh / <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmps31</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a-&gt;xh &gt; b-&gt;xh;</span><br><span class="line">&#125;<span class="comment">//班号排序，一个班的按推免从大往小排</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps31</span><span class="params">(stu* a, stu* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a-&gt;ff == b-&gt;ff) &#123;</span><br><span class="line"><span class="keyword">return</span> a-&gt;over &lt; b-&gt;over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a-&gt;ff &gt; b-&gt;ff;</span><br><span class="line">&#125;<span class="comment">//推免排序，排序按照成绩</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmps41</span><span class="params">(stu* a, stu* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a-&gt;over) &lt; (b-&gt;over);</span><br><span class="line">&#125;<span class="comment">//平均绩点逆序，大的在上</span></span><br><span class="line"><span class="function">stu* <span class="title">stusort</span><span class="params">(stu* head, <span class="type">char</span> a(stu* a, stu* b))</span> </span>&#123;<span class="comment">//排序，经典冒泡，cmp表示比较标准</span></span><br><span class="line">stu* res = (stu*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(stu));</span><br><span class="line">res-&gt;next = head;</span><br><span class="line"><span class="type">char</span> ff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (stu* aa = res, *bb = aa-&gt;next, *cc = bb-&gt;next; cc != <span class="literal">NULL</span>; aa = bb, bb = cc, cc = cc-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">a</span>(bb, cc)) &#123;</span><br><span class="line">aa-&gt;next = cc;</span><br><span class="line">bb-&gt;next = cc-&gt;next;</span><br><span class="line">cc-&gt;next = bb;</span><br><span class="line">ff = <span class="number">1</span>;</span><br><span class="line">bb = cc;</span><br><span class="line">cc = cc-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (ff);</span><br><span class="line"><span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrank</span><span class="params">(stu* head)</span> </span>&#123;<span class="comment">//获取排名，使用前请确保排好序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; head != <span class="literal">NULL</span>; ++i, head = head-&gt;next) &#123;</span><br><span class="line">head-&gt;rank = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;-----------------------------print csv------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lunwenprr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1档 业界公认顶级期刊(CELL,NATURE,SCIENCE)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2档 CCF-A期刊或CCF-A会议长文或CCF-B会议的最佳论文/最佳学生论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3档 CCF-B期刊论文或中科院期刊分区一区论文或CCF-C会议的最佳论文/最佳学生论文国家级优秀结题项目负责人\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;    \n&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4档 CCF-C期刊论文或CCF-B会议长文或中科院期刊分区二区论文或计算机学报，软件学报发表的学术论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5档 影响因子非0的SCI检索期刊论文或CCF-C会议长文或中国科学：信息科学、计算机研究与发展、计算机辅助设计与\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;研究学报、电子学报中文版、自动化学报发表的学术论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6档 EI检索期刊\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jingsaiprr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;1档 A类竞赛国家级一等奖（金奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;2档 A类竞赛国家级一等奖（银奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;    B类竞赛国家级等奖（金奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;3档 A类竞赛国家级一等奖（铜奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;    B类竞赛国家级一等奖（银奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;    C类竞赛国家级等奖（金奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;4档 B类竞赛国家级一等奖（铜奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;    C类竞赛国家级一等奖（银奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;5档 C类竞赛国家级等奖（铜奖）&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;\n1档 A类竞赛国家级一等奖（金奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n2档 A类竞赛国家级一等奖（银奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n    B类竞赛国家级等奖（金奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n3档 A类竞赛国家级一等奖（铜奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n    B类竞赛国家级一等奖（银奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n    C类竞赛国家级等奖（金奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n4档 B类竞赛国家级一等奖（铜奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n    C类竞赛国家级一等奖（银奖）&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n5档 C类竞赛国家级等奖（铜奖）&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stujingprr</span><span class="params">(stu* node)</span> </span>&#123;<span class="comment">//打印一个人所有奖项</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;prize == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无奖项\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">jingper* tmp = node-&gt;prize;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= node-&gt;ppri; ++i) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t%-40s\t%d等奖\n&quot;</span>, i, tmp-&gt;name, tmp-&gt;num);</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jingprr</span><span class="params">(jing* head)</span> </span>&#123;<span class="comment">//按照序号把竞赛打印到屏幕上</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (jing* tmp = head; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>, i, tmp-&gt;name, tmp-&gt;flg);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">teaprr</span><span class="params">(teacher* head)</span> </span>&#123;<span class="comment">//按照序号打印老师在屏幕上</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//将数字与字符串连接</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%d&quot;</span>, cnt);</span><br><span class="line"><span class="type">char</span>* name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(head-&gt;name) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(name1, head-&gt;name);</span><br><span class="line"><span class="built_in">strcat</span>(str, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(str, name1);</span><br><span class="line"><span class="built_in">Print_first</span>(str);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="comment">//printf(&quot;%d %s\n&quot;, cnt, head-&gt;name);</span></span><br><span class="line"><span class="built_in">free</span>(name1);</span><br><span class="line">head = head-&gt;next; </span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">teacouprr</span><span class="params">(teacher* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">choose* tmp = node-&gt;teach;</span><br><span class="line"><span class="type">char</span>** Name = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*)*<span class="number">50</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= node-&gt;tn; ++i) &#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">Name[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(tmp-&gt;tar-&gt;name) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(Name[i], tmp-&gt;tar-&gt;name);</span><br><span class="line"><span class="built_in">strcat</span>(str, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(str, Name[i]);</span><br><span class="line"><span class="built_in">Print_first</span>(str);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= node-&gt;tn; ++i) &#123;</span><br><span class="line"><span class="built_in">free</span>(Name[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(Name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coustuprr</span><span class="params">(Course* node)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;序号    学号\t\t  姓名\t\t平时成绩 考试成绩 最终成绩\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= node-&gt;top; ++i) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-8d%-d\t  %-10s\t%-10.1f%-10.1f%-10.1f\n&quot;</span>, i, node-&gt;stu[i].id, node-&gt;stu[i].name, node-&gt;stu[i].daily, node-&gt;stu[i].text, node-&gt;stu[i].<span class="keyword">final</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stuperprr</span><span class="params">(stu* node)</span> </span>&#123;<span class="comment">//学生单点打印</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">8</span>];</span><br><span class="line"><span class="comment">//绩点转换成字符串</span></span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%.3f&quot;</span>, node-&gt;over);</span><br><span class="line"><span class="type">char</span>* Name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="built_in">strcpy</span>(Name, node-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;的最终绩点:&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span> str1[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(str1, <span class="string">&quot;%d&quot;</span>, node-&gt;rank);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* b = &#123; <span class="string">&quot;当前排名:&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">strcat</span>(Name, a);</span><br><span class="line"><span class="built_in">strcat</span>(Name, str);</span><br><span class="line"><span class="built_in">Print_text</span>(Name);</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="built_in">concatenateStrings</span>(b, str1));</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;各科成绩如下:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">choose* tmp = node-&gt;first;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>; <span class="type">float</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;课程\t\t平时成绩\t考试成绩\t最终成绩\t绩点\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; node-&gt;choo; ++i, tmp = tmp-&gt;next) &#123;</span><br><span class="line">num = <span class="built_in">courstusearch1</span>(tmp-&gt;tar, node-&gt;xh, res);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-10s\t%-6.1f\t\t%-6.1f\t\t%-6.1f\t\t%-6.1f\n&quot;</span>, tmp-&gt;tar-&gt;name, tmp-&gt;tar-&gt;stu[num].daily, tmp-&gt;tar-&gt;stu[num].text, res, <span class="built_in">jidiancalc</span>(res));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;prize != <span class="literal">NULL</span>)<span class="comment">//主要是没得奖的看到这个会很不爽</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获得了：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (jingper* kk = node-&gt;prize; kk != <span class="literal">NULL</span>; kk = kk-&gt;next) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s的%d等奖\n&quot;</span>, kk-&gt;name, kk-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fstuperprr</span><span class="params">(stu* node)</span> </span>&#123;<span class="comment">//学生单点打印</span></span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s的最终绩点:%.3f\n当前排名:%d\n&quot;</span>, node-&gt;name, node-&gt;over, node-&gt;rank);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;各科成绩如下:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">choose* tmp = node-&gt;first;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>; <span class="type">float</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;课程 平时成绩 考试成绩 最终成绩 绩点\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; node-&gt;choo; ++i, tmp = tmp-&gt;next) &#123;</span><br><span class="line">num = <span class="built_in">courstusearch1</span>(tmp-&gt;tar, node-&gt;xh, res);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%s %.1f %.1f %.1f %.1f\n&quot;</span>, tmp-&gt;tar-&gt;name, tmp-&gt;tar-&gt;stu[num].daily, tmp-&gt;tar-&gt;stu[num].text, res, <span class="built_in">jidiancalc</span>(res));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;prize != <span class="literal">NULL</span>)<span class="comment">//主要是没得奖的看到这个会很不爽</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;获得了：\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (jingper* kk = node-&gt;prize; kk != <span class="literal">NULL</span>; kk = kk-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%s的%d等奖\n&quot;</span>, kk-&gt;name, kk-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stupercsvprr</span><span class="params">(stu* node)</span> </span>&#123;<span class="comment">//单点导出一个人的csv文件，存到/output文件夹里面</span></span><br><span class="line"><span class="type">char</span> csvname[<span class="number">60</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(csvname, <span class="string">&quot;./output/&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(csvname + <span class="number">9</span>, node-&gt;name);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(csvname);</span><br><span class="line">csvname[len] = <span class="string">&#x27;.&#x27;</span>, csvname[len + <span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>, csvname[len + <span class="number">2</span>] = <span class="string">&#x27;s&#x27;</span>, csvname[len + <span class="number">3</span>] = <span class="string">&#x27;v&#x27;</span>, csvname[len + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, csvname);</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(csvname, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s,绩点,%.3f,排名,%d\n&quot;</span>, node-&gt;name, node-&gt;over, node-&gt;rank);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;学科,平时分,考试分,最终成绩,绩点\n&quot;</span>);</span><br><span class="line">choose* tmp = node-&gt;first;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>; <span class="type">float</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; node-&gt;choo; ++i, tmp = tmp-&gt;next) &#123;</span><br><span class="line">num = <span class="built_in">courstusearch1</span>(tmp-&gt;tar, node-&gt;xh, res);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s,%.1f,%.1f,%.1f,%.1f\n&quot;</span>, tmp-&gt;tar-&gt;name, tmp-&gt;tar-&gt;stu[num].daily, tmp-&gt;tar-&gt;stu[num].text, res, <span class="built_in">jidiancalc</span>(res));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;prize != <span class="literal">NULL</span>)<span class="comment">//主要是没得奖的看到这个会很不爽</span></span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;奖项状况\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (jingper* kk = node-&gt;prize; kk != <span class="literal">NULL</span>; kk = kk-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s,%d等奖\n&quot;</span>, kk-&gt;name, kk-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">coupercsvprr</span><span class="params">(cource* node)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> csvname[<span class="number">70</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(csvname, <span class="string">&quot;./output/&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(csvname + <span class="number">9</span>, node-&gt;name);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(csvname);</span><br><span class="line">csvname[len] = <span class="string">&#x27;.&#x27;</span>, csvname[len + <span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>, csvname[len + <span class="number">2</span>] = <span class="string">&#x27;s&#x27;</span>, csvname[len + <span class="number">3</span>] = <span class="string">&#x27;v&#x27;</span>, csvname[len + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(csvname, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;课程名称,课程编号,课程类型,学分,学时,平时分占比,考试分占比,选课人数\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s,%s,%s,%.1f,%d,%d,%d,%d\n&quot;</span>, node-&gt;name, node-&gt;number, node-&gt;type, node-&gt;credit, node-&gt;hours, node-&gt;Daily, node-&gt;Text, node-&gt;top);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;姓名,学号,平时分,考试分,总成绩,绩点\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= node-&gt;top; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;%s,%d,%.1f,%.1f,%.1f,%.1f\n&quot;</span>, node-&gt;stu[i].name, node-&gt;stu[i].id, node-&gt;stu[i].daily, node-&gt;stu[i].text, node-&gt;stu[i].<span class="keyword">final</span>, <span class="built_in">jidiancalc</span>(node-&gt;stu[i].<span class="keyword">final</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stuprr</span><span class="params">(stu* head)</span> </span>&#123;<span class="comment">//打印所有学生</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;序号    学号\t\t  姓名\t\t性别   绩点\t排名\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; head != <span class="literal">NULL</span>; ++i, head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-8d%-d\t  %-10s\t%-6s %-.3f\t%-3d\n&quot;</span>, i, head-&gt;xh, head-&gt;name, head-&gt;sex, head-&gt;over, head-&gt;rank);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stucsvprr</span><span class="params">(stu* head)</span> </span>&#123;</span><br><span class="line">FILE* op = <span class="built_in">fopen</span>(<span class="string">&quot;./output/学生.csv&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;序号,推免资格,学号,姓名,性别,绩点&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; head != <span class="literal">NULL</span>; ++i, head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(op, <span class="string">&quot;\n%d,%d,%d,%s,%s,%.3f&quot;</span>, i,head-&gt;ff^<span class="number">1</span>, head-&gt;xh, head-&gt;name, head-&gt;sex, head-&gt;over);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&lt;--------------------------------calculation------------------------------&gt;</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">jidiancalc</span><span class="params">(<span class="type">float</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; ++i) &#123;<span class="comment">//绩点计算</span></span><br><span class="line"><span class="keyword">if</span> (f &gt;= point[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> jidian[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sturecalc</span><span class="params">(stu* head)</span> </span>&#123;<span class="comment">//所有人都重新算绩点</span></span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">stucalc</span>(head);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">courperrecalc</span><span class="params">(Course* nnode)</span> </span>&#123;<span class="comment">//一个课程重新计算所有人成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nnode-&gt;top; ++i) &#123;</span><br><span class="line">nnode-&gt;stu[i].<span class="keyword">final</span> = (nnode-&gt;stu[i].daily * nnode-&gt;Daily + nnode-&gt;stu[i].text * nnode-&gt;Text) / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">courrecalc</span><span class="params">(Course* head)</span> </span>&#123;<span class="comment">//所有课程重新计算所有人成绩</span></span><br><span class="line"><span class="keyword">for</span> (; head != <span class="literal">NULL</span>; head = head-&gt;next) &#123;</span><br><span class="line"><span class="built_in">courperrecalc</span>(head);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stucalc</span><span class="params">(stu* nnode)</span> </span>&#123;<span class="comment">//一个学生计算绩点，使用之前保证学生绩点算法未改变</span></span><br><span class="line">nnode-&gt;over = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> xf = <span class="number">0</span>;<span class="comment">//学分存储</span></span><br><span class="line"><span class="keyword">for</span> (choose* aa = nnode-&gt;first; aa != <span class="literal">NULL</span>; aa = aa-&gt;next) &#123;</span><br><span class="line"><span class="type">float</span> rres;</span><br><span class="line"><span class="built_in">courstusearch1</span>(aa-&gt;tar, nnode-&gt;xh, rres);</span><br><span class="line">rres = <span class="built_in">jidiancalc</span>(rres);</span><br><span class="line"><span class="keyword">if</span> (rres &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">nnode-&gt;ff = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(aa-&gt;tar-&gt;type, <span class="string">&quot;必修&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(aa-&gt;tar-&gt;type, <span class="string">&quot;限选&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">nnode-&gt;over += aa-&gt;tar-&gt;credit * rres;</span><br><span class="line">xf += aa-&gt;tar-&gt;credit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nnode-&gt;ff != <span class="number">1</span>)nnode-&gt;ff = <span class="number">0</span>;<span class="comment">//防止野值</span></span><br><span class="line"><span class="keyword">if</span> (xf != <span class="number">0</span>)</span><br><span class="line">nnode-&gt;over /= xf;</span><br><span class="line"><span class="type">float</span> rett = <span class="number">0</span>;<span class="comment">//临时竞赛绩点存放</span></span><br><span class="line"><span class="type">int</span> gh = <span class="number">0</span>;<span class="comment">//状压对象</span></span><br><span class="line"><span class="keyword">for</span> (jingper* tmp = nnode-&gt;prize; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;<span class="comment">//竞赛绩点计算</span></span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;flg &lt; <span class="number">10</span>) &#123;<span class="comment">//竞赛</span></span><br><span class="line">gh |= <span class="number">1</span> &lt;&lt; (tmp-&gt;flg);</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;flg &gt;= <span class="number">5</span>)</span><br><span class="line">gh |= <span class="number">1</span> &lt;&lt; (tmp-&gt;flg - <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//论文</span></span><br><span class="line">gh |= <span class="number">1</span> &lt;&lt; tmp-&gt;flg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">int</span> h = <span class="built_in">lowbit</span>(gh);</span><br><span class="line">gh ^= h;</span><br><span class="line"><span class="keyword">switch</span> (h) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">15</span>: &#123;<span class="comment">//论文范围</span></span><br><span class="line">rett += jingji[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">14</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">13</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">12</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">11</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">10</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">9</span>: &#123;<span class="comment">//竞赛范围</span></span><br><span class="line">rett += jingji[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">8</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">7</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">6</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">5</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">3</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">2</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span> &lt;&lt; <span class="number">1</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">rett += jingji[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (gh);</span><br><span class="line"><span class="keyword">if</span> (rett &gt; <span class="number">0.4</span>)rett = <span class="number">0.4</span>;</span><br><span class="line">nnode-&gt;over += rett;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">char</span> arr[], <span class="type">int</span> xh)</span> </span>&#123;</span><br><span class="line">arr[<span class="number">6</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">arr[<span class="number">0</span>] = xh % <span class="number">1000000</span> / <span class="number">100000</span> + <span class="number">48</span>;</span><br><span class="line">arr[<span class="number">1</span>] = xh % <span class="number">100000</span> / <span class="number">10000</span> + <span class="number">48</span>;</span><br><span class="line">arr[<span class="number">2</span>] = xh % <span class="number">10000</span> / <span class="number">1000</span> + <span class="number">48</span>;</span><br><span class="line">arr[<span class="number">3</span>] = xh % <span class="number">1000</span> / <span class="number">100</span> + <span class="number">48</span>;</span><br><span class="line">arr[<span class="number">4</span>] = xh % <span class="number">100</span> / <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">arr[<span class="number">5</span>] = xh % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;--------------------------------machine learn-------------------------------&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load_MRmodel</span><span class="params">(<span class="type">char</span>* model_filename, MR_Model* model)</span> </span>&#123;</span><br><span class="line">FILE* file = <span class="built_in">fopen</span>(model_filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; FEATURE_MAX; i++) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%lf&quot;</span>, &amp;model-&gt;w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%lf&quot;</span>, &amp;model-&gt;b);</span><br><span class="line"><span class="built_in">fclose</span>(file);</span><br><span class="line">&#125;<span class="comment">//加载多元线性回归模型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load_LRmodel</span><span class="params">(<span class="type">char</span>* model_filename, LR_Model* model)</span> </span>&#123;</span><br><span class="line">FILE* file = <span class="built_in">fopen</span>(model_filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FEATURES; i++) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%lf&quot;</span>, &amp;model-&gt;weights[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%lf&quot;</span>, &amp;model-&gt;bias);</span><br><span class="line"><span class="built_in">fclose</span>(file);</span><br><span class="line">&#125;<span class="comment">//加载逻辑回归模型</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">LR_predict</span><span class="params">(LR_Model* model, LR_Sample* LR_Sample)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> z = model-&gt;bias;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FEATURES; i++) &#123;</span><br><span class="line">z += model-&gt;weights[i] * LR_Sample-&gt;features[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> a = <span class="number">1</span> / (<span class="number">1</span> + <span class="built_in">exp</span>(-z));</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">MR_predict</span><span class="params">(MR_Model* model, MR_Sample* MR_Sample)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">result += MR_Sample[<span class="number">0</span>].feature[i] * model-&gt;w[i];</span><br><span class="line">&#125;</span><br><span class="line">result += model-&gt;b;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gradeprdict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="type">float</span> max[FEATURE_MAX] = &#123; <span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">99.99</span>,<span class="number">4</span>,<span class="number">3.5</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">450</span> &#125;;</span><br><span class="line"><span class="type">float</span> min[FEATURE_MAX] = &#123; <span class="number">40</span>,<span class="number">40</span>,<span class="number">40</span>,<span class="number">0.08</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span> &#125;;</span><br><span class="line">MR_Model* multip_model = (MR_Model*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(MR_Model));</span><br><span class="line">MR_Sample* Student = (MR_Sample*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(MR_Sample));</span><br><span class="line"><span class="built_in">load_MRmodel</span>(Multipl_model, multip_model);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第一次作业成绩(百分制）:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">0</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第二次作业成绩(百分制）:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">1</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第三次作业成绩(百分制）:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">2</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入作业完成情况(%%):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">3</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入本学科学习时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">4</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入运动时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">5</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入睡眠时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">6</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入娱乐时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">7</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选课数量(节):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">8</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入平均排名(名):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;Student[<span class="number">0</span>].feature[<span class="number">9</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Student-&gt;feature[i] = (Student-&gt;feature[i] - min[i]) / (max[i] - min[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> result = <span class="built_in">MR_predict</span>(multip_model, Student);</span><br><span class="line"><span class="keyword">if</span> (result &gt; <span class="number">100</span>)</span><br><span class="line">result = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(result&lt;<span class="number">0</span>)</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;预测期末成绩为:%.1f\n&quot;</span>, result);</span><br><span class="line"><span class="built_in">free</span>(Student);</span><br><span class="line"><span class="built_in">free</span>(multip_model);</span><br><span class="line">&#125;<span class="comment">//成绩预测</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Learning_state</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LR_Model* logical_model = (LR_Model*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LR_Model));</span><br><span class="line">LR_Sample* student = (LR_Sample*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LR_Sample));</span><br><span class="line"><span class="built_in">load_LRmodel</span>(Logical_model, logical_model);</span><br><span class="line"><span class="type">float</span> max[NUM_FEATURES] = &#123; <span class="number">99.96</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">449</span> &#125;;</span><br><span class="line"><span class="type">float</span> min[NUM_FEATURES] = &#123; <span class="number">0.04</span>,<span class="number">50.01</span>,<span class="number">0.06</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">5</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的考试成绩(百分制）:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的出勤率(%%):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的作业完成情况(%%):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的学习时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的运动时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的睡眠时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你现阶段的娱乐时间(小时):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你这学期的选课数量(节):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你上学期的排名(名):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;student-&gt;features[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FEATURES; i++) &#123;</span><br><span class="line">student-&gt;features[i] = (student-&gt;features[i] - min[i]) / (max[i] - min[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> result = <span class="built_in">LR_predict</span>(logical_model, student);</span><br><span class="line"><span class="keyword">if</span> (result &gt; <span class="number">0.5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学习状态:良好\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学习状态:较差\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(student);</span><br><span class="line"><span class="built_in">free</span>(logical_model);</span><br><span class="line">&#125;<span class="comment">//逻辑回归判断学习状态好坏</span></span><br><span class="line"><span class="comment">//&lt;------------------------------delete new----------------------------------&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delstu</span><span class="params">(stu* node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stuhead == node) &#123;</span><br><span class="line">stuhead = stuhead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (stu* tmp = stuhead; tmp-&gt;next != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;next == node) &#123;</span><br><span class="line">tmp-&gt;next = node-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> a;</span><br><span class="line"><span class="keyword">for</span> (choose* tmp = node-&gt;first; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="type">int</span> rres = <span class="built_in">courstusearch1</span>(tmp-&gt;tar, node-&gt;xh, a);</span><br><span class="line">tmp-&gt;tar-&gt;stu[rres] = tmp-&gt;tar-&gt;stu[tmp-&gt;tar-&gt;top];</span><br><span class="line">tmp-&gt;tar-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newstu</span><span class="params">(<span class="type">char</span> arr[])</span> </span>&#123;</span><br><span class="line">cls;</span><br><span class="line">stu* hi = (stu*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(stu));</span><br><span class="line">hi-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line">hi-&gt;prize = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的名字:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, hi-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的性别:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, hi-&gt;sex);</span><br><span class="line">rep100007:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;hi-&gt;xh);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (stu* tmp = stuhead; tmp != <span class="literal">NULL</span>; tmp = tmp-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;xh == hi-&gt;xh) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号重复，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep100007;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">dfs</span>(hi-&gt;pas, hi-&gt;xh);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的选课个数:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;hi-&gt;choo);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; hi-&gt;choo; ++i) &#123;</span><br><span class="line">choose* yo = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(yo));</span><br><span class="line">rep91:</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的选课名字:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">Course* che= <span class="built_in">coursearch1</span>(couhead, buf);</span><br><span class="line"><span class="keyword">if</span> (che == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;课程不存在，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep91;</span><br><span class="line">&#125;</span><br><span class="line">yo-&gt;tar = che;</span><br><span class="line">x = ++(yo-&gt;tar-&gt;top);</span><br><span class="line">yo-&gt;next = hi-&gt;first;</span><br><span class="line">hi-&gt;first = yo;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入该同学平时分:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;yo-&gt;tar-&gt;stu[x].daily);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入该同学考试分:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;yo-&gt;tar-&gt;stu[x].text);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(yo-&gt;tar-&gt;stu[x].name, hi-&gt;name);</span><br><span class="line">yo-&gt;tar-&gt;stu[x].id = hi-&gt;xh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新同学的竞赛获奖个数:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;hi-&gt;ppri);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; hi-&gt;ppri; ++i) &#123;</span><br><span class="line">jingper* rres = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line">rres-&gt;next = hi-&gt;prize;</span><br><span class="line">hi-&gt;prize = rres;</span><br><span class="line">rrep1:</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入他的获奖种类:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.竞赛      2.论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">jingprr</span>(jinghead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请按照标号选择目标竞赛:&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">jing* jkl = <span class="built_in">jingsearch</span>(x, jinghead);</span><br><span class="line"><span class="keyword">if</span> (jkl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入获奖等级:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">strcpy</span>(rres-&gt;name, jkl-&gt;name);</span><br><span class="line">rres-&gt;flg = <span class="number">3</span> - x + ((jkl-&gt;ff == <span class="number">1</span>) ? <span class="number">5</span> : <span class="number">0</span>) + ((jkl-&gt;flg == <span class="string">&#x27;A&#x27;</span>) ? <span class="number">2</span> : (jkl-&gt;flg == <span class="string">&#x27;C&#x27;</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">rres-&gt;num = x;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s授予%s&quot;</span>, arr, hi-&gt;name);<span class="comment">//历史</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">lunwenprr</span>();</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n论文分为六档，请输入申请人的论文是第几档：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">rres-&gt;num = x;</span><br><span class="line">rres-&gt;flg = x + <span class="number">9</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入论文名字:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s授予%s&quot;</span>, arr, hi-&gt;name);<span class="comment">//历史</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">hi-&gt;next = stuhead;</span><br><span class="line">stuhead = hi;</span><br><span class="line"><span class="built_in">stucalc</span>(hi);</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新同学添加成功。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newtea</span><span class="params">(<span class="type">char</span> arg[])</span> </span>&#123;</span><br><span class="line">teacher* res = (teacher*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(teacher));<span class="comment">//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">res-&gt;next = teahead;</span><br><span class="line">teahead = res;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">res-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的姓名：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, res-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的性别：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, res-&gt;sex);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的工号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;res-&gt;xh);</span><br><span class="line"><span class="built_in">dfs</span>(res-&gt;pas, res-&gt;xh);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的电话：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;res-&gt;tel);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的电子邮件地址：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, res-&gt;email);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的所教课程数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;res-&gt;tn);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res-&gt;tn; ++i) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新老师的所教课程：\n&quot;</span>);</span><br><span class="line">choose* tmp = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(choose));</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">tmp-&gt;tar = <span class="built_in">coursearch1</span>(couhead, buf);</span><br><span class="line">tmp-&gt;next = res-&gt;teach;</span><br><span class="line">res-&gt;teach = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新老师添加成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;管理员%s添加了新老师：%s&quot;</span>, arg, res-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面设计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getwidth</span><span class="params">(<span class="type">int</span>* width, <span class="type">int</span>* height)</span> </span>&#123;</span><br><span class="line">CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line"><span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi);</span><br><span class="line">*width = csbi.srWindow.Right - csbi.srWindow.Left + <span class="number">1</span>;</span><br><span class="line">*height = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_pdding</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; padding; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_head</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┏&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;━&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┓\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//打印表头</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_tail</span><span class="params">(<span class="type">int</span> rol)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rol; i++) &#123;</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┗&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;━&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┛\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//打印表尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_line</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//打印分割线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_text</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="type">int</span> pdd = <span class="number">18</span>;</span><br><span class="line"><span class="type">int</span> y = length - len - pdd;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pdd; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_center</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (length - len) / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (length - len) / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_first</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="type">int</span> pdd = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> y = length - len - pdd;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pdd; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;┃\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">concatenateStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span> </span>&#123;</span><br><span class="line"><span class="type">size_t</span> len1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line"><span class="type">size_t</span> len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line"><span class="type">size_t</span> totalLen = len1 + len2 + <span class="number">1</span>; <span class="comment">// 加1是为了结束符 &#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(totalLen * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(result, str1);</span><br><span class="line"><span class="built_in">strcat</span>(result, str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="type">const</span> <span class="type">char</span>*)result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">intToString</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 计算所需的字符串长度，包括负号和终止符</span></span><br><span class="line"><span class="type">int</span> length = num &lt;= <span class="number">0</span> ? <span class="number">2</span> : <span class="number">1</span>; <span class="comment">// 如果是0或负数，需要额外一个字符存储负号</span></span><br><span class="line"><span class="type">int</span> n = num;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(length * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 内存分配失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用sprintf将整数转换为字符串</span></span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-cpp-主框架实现">main.cpp 主框架实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;-------------------------------------Main----------------------------------&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;┃━  ┓  ┗  ┏  ┛&quot;);</span></span><br><span class="line"><span class="comment">//system(&quot;mode con cols=160 lines=40 &quot;);</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;mode con cols=160&quot;</span>);</span><br><span class="line">CONSOLE_FONT_INFOEX cfi;<span class="comment">//用于存储即将设置的字体信息。</span></span><br><span class="line">cfi.cbSize = <span class="built_in">sizeof</span>(cfi);<span class="comment">//设置结构体大小</span></span><br><span class="line">cfi.nFont = <span class="number">0</span>;<span class="comment">//字体索引</span></span><br><span class="line">cfi.dwFontSize.X = <span class="number">10</span>;<span class="comment">//宽度</span></span><br><span class="line">cfi.dwFontSize.Y = <span class="number">20</span>;<span class="comment">//高度</span></span><br><span class="line">cfi.FontFamily = FF_DONTCARE;<span class="comment">//字体族</span></span><br><span class="line">cfi.FontWeight = FW_BOLD;<span class="comment">//字体加粗</span></span><br><span class="line"><span class="built_in">wcscpy</span>(cfi.FaceName, <span class="string">L&quot;楷体&quot;</span>); <span class="comment">// 设置字体名称为楷体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置控制台字体</span></span><br><span class="line"><span class="built_in">SetCurrentConsoleFontEx</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FALSE, &amp;cfi);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetConsoleTitleW</span>(<span class="string">L&quot;学生成绩管理系统&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;color 70&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">getwidth</span>(&amp;width, &amp;height);</span><br><span class="line">padding = (width - length) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">getupdate</span>();</span><br><span class="line"><span class="built_in">getadm</span>();</span><br><span class="line"><span class="built_in">getjidian</span>();</span><br><span class="line">couhead=<span class="built_in">ReadCouInfor</span>();<span class="comment">//在程序一开始读入课程基本信息</span></span><br><span class="line">stuhead=<span class="built_in">ReadStuInfor</span>(couhead);<span class="comment">//在程序一开始读入学生基本信息</span></span><br><span class="line">teahead=<span class="built_in">buildtea</span>(couhead);<span class="comment">//建立老师体系</span></span><br><span class="line">jinghead=<span class="built_in">compet</span>();<span class="comment">//建立竞赛体系</span></span><br><span class="line"><span class="built_in">getunp</span>(teahead);<span class="comment">//获取未处理的奖项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">courrecalc</span>(couhead);<span class="comment">//算成绩</span></span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);<span class="comment">//算绩点</span></span><br><span class="line">stuhead=<span class="built_in">stusort</span>(stuhead,cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);<span class="comment">//算排名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;----------------------------------menu---------------------------------&gt;</span></span><br><span class="line"><span class="type">int</span> opt1=<span class="number">0</span>,opt2=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">100</span>];</span><br><span class="line">bbegin:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_center</span>(<span class="string">&quot;欢迎使用学生成绩管理系统&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.学生登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.老师登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.管理员登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.退出&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="comment">//printf(&quot;您好，欢迎使用学生成绩管理系统。\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;您想做什么？\n1.学生登录\n2.老师登录\n3.管理员登录\n0.退出\n&quot;);</span></span><br><span class="line"><span class="type">int</span> ck;</span><br><span class="line"></span><br><span class="line">ck= <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;<span class="comment">//stulogin</span></span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">time</span>(<span class="number">0</span>) &lt; UPDATE) &#123;<span class="comment">//维护中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;系统维护中，除管理员外均无法登录系统。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的账号，也就是您的学号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码，默认是学号后六位:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">stu* aax = <span class="built_in">checkstu</span>(opt2, arr, opt1, stuhead);</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;<span class="comment">//登录成功</span></span><br><span class="line"><span class="built_in">time</span>(&amp;timer);<span class="comment">//将谁登录写入历史</span></span><br><span class="line">info = <span class="built_in">localtime</span>(&amp;timer);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s学生%s登录&quot;</span>, <span class="built_in">asctime</span>(info), aax-&gt;name);</span><br><span class="line">stubegin:cls;</span><br><span class="line"><span class="keyword">for</span> (choose* aa = aax-&gt;first; aa != <span class="literal">NULL</span>; aa = aa-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (aa-&gt;tar-&gt;notic == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;━&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;来自 %s 的通知：\n&quot;</span>, aa-&gt;tar-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, aa-&gt;tar-&gt;notice);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;━&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* name1;</span><br><span class="line">name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name1, aax-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;您好,您接下来的操作是:&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">strcat</span>(name1, a);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(name1);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.查询成绩及排名&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.申请奖项认证&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.修改密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.退出登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.退出系统&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">free</span>(name1);</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;<span class="comment">//学生的选项</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">chengji:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">stuperprr</span>(aax);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s查看了自己的成绩&quot;</span>, aax-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您可以选择导出您的成绩至Excel表格中。\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.导出.csv\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.学习状况评估\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;O.返回上一级\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"></span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt1 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">stupercsvprr</span>(aax);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;导出成功，请注意程序非正常结束是不会有文件留下的哦！！！&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;并导出了&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> chengji;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (opt1 == <span class="number">2</span>) &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Learning_state</span>();</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> chengji;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (opt1 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">goto</span> stubegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> chengji;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> chengji;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line">jingupper* ghj = (jingupper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingupper));</span><br><span class="line">teacher* tmp;</span><br><span class="line"><span class="built_in">strcpy</span>(ghj-&gt;ownername, aax-&gt;name);</span><br><span class="line">ghj-&gt;xh = aax-&gt;xh;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您希望得到认证的奖项名称或者论文名称，方便查验：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ghj-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;有什么备注吗？获奖序列号或者方便认证的文字：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ghj-&gt;ppin);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获得了几等奖？请输入数字，如:一等奖-&gt;1\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ghj-&gt;num);</span><br><span class="line">ss10:</span><br><span class="line"><span class="built_in">teaprr</span>(teahead);</span><br><span class="line"><span class="type">int</span> ff = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您好，请输入您想选择的奖项认证老师前面的数字：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ff);<span class="comment">//特判不合法情况，注意</span></span><br><span class="line">tmp = <span class="built_in">teasearch2</span>(ff, teahead);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的输入不合法，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> ss10;</span><br><span class="line">&#125;</span><br><span class="line">ghj-&gt;next = tmp-&gt;first;</span><br><span class="line">tmp-&gt;first = ghj;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项申请成功！指定的老师会审核您的申请。\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;即将返回上级菜单...\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s申请了奖项认证：\n%s %s&quot;</span>, aax-&gt;name, ghj-&gt;name, ghj-&gt;ppin);<span class="comment">//历史</span></span><br><span class="line"><span class="keyword">goto</span> stubegin; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>], obuf[<span class="number">40</span>];</span><br><span class="line">rep1:</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(obuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(obuf));<span class="comment">//密，密码过长咋办？？？</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的新密码：\n&quot;</span>);<span class="comment">//数字啊字符判定啊啥的，还能凹，但是没啥必要</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s修改了他的密码：\n%s变动为%s&quot;</span>, aax-&gt;name, aax-&gt;pas, buf);<span class="comment">//历史</span></span><br><span class="line"><span class="built_in">strcpy</span>(aax-&gt;pas, buf);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">3000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> stubegin; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, aax-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> bbegin; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, aax-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> eend; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> stubegin; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> stubegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (opt2 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码错误，登录失败!自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人，登录失败，自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;<span class="comment">//tealogin</span></span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">time</span>(<span class="number">0</span>) &lt; UPDATE) &#123;<span class="comment">//维护中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;系统维护中，除管理员外均无法登录系统。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的账号，也就是您的工号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码，默认是工号后六位：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">teacher* bbx = <span class="built_in">checktea</span>(opt2, opt1, arr, teahead);</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;<span class="comment">//登录成功</span></span><br><span class="line"><span class="built_in">time</span>(&amp;timer);<span class="comment">//将谁登录写入历史</span></span><br><span class="line">info = <span class="built_in">localtime</span>(&amp;timer);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师%s登录&quot;</span>, <span class="built_in">asctime</span>(info), bbx-&gt;name);</span><br><span class="line">teabegin:</span><br><span class="line">cls;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* name2;</span><br><span class="line">name2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name2, bbx-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;您好,您接下来的操作是:&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">strcat</span>(name2, a);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(name2);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.查找学生&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.分析学生成绩&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.受理奖项认证&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.调整绩点算法&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;5.添加新学生&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;6.修改密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;7.查看学生成绩&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;8.管理课程&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;9.退出登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.退出系统&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">free</span>(name2);</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;<span class="comment">//老师的选项</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">rep15:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;请输入您想查询的项目:&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.查找学号&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.查找姓名(可能返回多人)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line">ck=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line">stu* tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt2) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入目标学号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line">tmp = <span class="built_in">stusearch2</span>(opt1, stuhead);</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人！请重新输入!\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> rep15;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入目标姓名：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">tmp = <span class="built_in">stusearch1</span>(buf, stuhead);</span><br><span class="line"><span class="keyword">while</span> (tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">opt2 = <span class="number">1</span>;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">char</span>* name0;</span><br><span class="line">name0 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name0, tmp-&gt;name);</span><br><span class="line"><span class="type">char</span>* xh0;</span><br><span class="line">xh0 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">xh0 = <span class="built_in">intToString</span>(tmp-&gt;xh);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;您找到了这个学生：&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Print_first</span>(a);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* b = &#123; <span class="string">&quot; 学号:&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">strcat</span>(name0, b);</span><br><span class="line"><span class="built_in">strcat</span>(name0, xh0);</span><br><span class="line"><span class="built_in">Print_first</span>(name0);</span><br><span class="line"><span class="built_in">free</span>(name0);</span><br><span class="line"><span class="built_in">free</span>(xh0);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="comment">//printf(&quot;%s %d\n&quot;,tmp-&gt;name,tmp-&gt;xh);</span></span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;这个人是您要找的吗？&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.是&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.不是&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//printf(&quot;\n这个人是您要找的吗？\n1.是\n0.不是&quot;);</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (opt1 == <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> tmp = <span class="built_in">stusearch1</span>(buf, tmp-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人！请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> rep15;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep15;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep15;</span><br><span class="line">&#125;</span><br><span class="line">cls;</span><br><span class="line">rep18:</span><br><span class="line">cls;</span><br><span class="line"><span class="comment">//stuperprr(tmp);</span></span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师查询了%s&quot;</span>, bbx-&gt;name, tmp-&gt;name);</span><br><span class="line"><span class="type">char</span>* name1;</span><br><span class="line">name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name1, tmp-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;学生姓名:&quot;</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="built_in">concatenateStrings</span>(a, name1);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(str);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;您接下来的操作是:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.改Ta的密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.撤销奖项&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.添加奖项&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.删除该学生&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;5.查看该学生成绩&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">free</span>(name1);</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>], obuf[<span class="number">40</span>];</span><br><span class="line">rep17:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Ta原先的密码是:%s\n&quot;</span>, tmp-&gt;pas);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请修改Ta的新密码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep17;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();<span class="comment">//here</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep17;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;并将Ta的密码从%s改为%s&quot;</span>, tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">chexiao:</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;ppri != <span class="number">0</span>) &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">stujingprr</span>(tmp);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入撤销奖项所对应的标号:&quot;</span>);</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line"><span class="keyword">if</span>(ck==<span class="number">1</span>)&#123;</span><br><span class="line">jingper* kk = tmp-&gt;prize;</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师撤销了%s的%s的%d等奖&quot;</span>, bbx-&gt;name, tmp-&gt;name, kk-&gt;name, kk-&gt;num);</span><br><span class="line">tmp-&gt;prize = tmp-&gt;prize-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= tmp-&gt;ppri + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == opt2) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师撤销了%s的%s的%d等奖&quot;</span>, bbx-&gt;name, tmp-&gt;name, kk-&gt;next-&gt;name, kk-&gt;next-&gt;num);</span><br><span class="line">kk-&gt;next = kk-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">kk = kk-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> chexiao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep21:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line">tmp-&gt;ppri--;</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;他没有奖项，删除失败，返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">tmp-&gt;ppri++;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">jingper* rres = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line">rres-&gt;next = tmp-&gt;prize;</span><br><span class="line">tmp-&gt;prize = rres;</span><br><span class="line">rrep10:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入他的获奖种类:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.竞赛      2.论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">jingprr</span>(jinghead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请按照标号选择目标竞赛:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">jing* jkl = <span class="built_in">jingsearch</span>(x, jinghead);</span><br><span class="line"><span class="keyword">if</span> (jkl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入几等奖:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">strcpy</span>(rres-&gt;name, jkl-&gt;name);</span><br><span class="line">rres-&gt;flg = <span class="number">3</span> - x + ((jkl-&gt;ff == <span class="number">1</span>) ? <span class="number">5</span> : <span class="number">0</span>) + ((jkl-&gt;flg == <span class="string">&#x27;A&#x27;</span>) ? <span class="number">2</span> : ((jkl-&gt;flg == <span class="string">&#x27;C&#x27;</span>) ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">rres-&gt;num = x;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功!即将返回上一级...\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师授予%s %s的%d&quot;</span>, arr, tmp-&gt;name, rres-&gt;name, x);<span class="comment">//历史</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">lunwenprr</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;论文分为六档，请输入申请人的论文是第几档：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rres-&gt;num);</span><br><span class="line">rres-&gt;flg = x + <span class="number">9</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入论文名字:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师授予%s %s的%d&quot;</span>, arr, tmp-&gt;name, rres-&gt;name, rres-&gt;num);<span class="comment">//历史</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep10;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">stucalc</span>(tmp);</span><br><span class="line">   stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line">   <span class="built_in">getrank</span>(stuhead);</span><br><span class="line">   <span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师删除了一位学生。他的属性如下:&quot;</span>, bbx-&gt;name);</span><br><span class="line"><span class="built_in">fstuperprr</span>(tmp);</span><br><span class="line"><span class="built_in">delstu</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">stuperprr</span>(tmp);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师查看了%s的成绩&quot;</span>, bbx-&gt;name, tmp-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您可以选择导出您的成绩至Excel表格中。\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.导出.csv\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;O.返回上一级\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line">ck=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt1 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">stupercsvprr</span>(tmp);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;导出成功，请注意程序非正常结束是不会有文件留下的哦！！！&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;并导出了&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep18;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;<span class="comment">//只因器学习我不会</span></span><br><span class="line"><span class="built_in">Gradeprdict</span>();</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">if</span> (bbx-&gt;first == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您没有认证申请了。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">jingupper* tttmp = bbx-&gt;first;</span><br><span class="line"><span class="keyword">while</span> (tttmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">sss5:</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;您有奖项申请。各项数据如下：&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">char</span>* name3;</span><br><span class="line">name3 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name3, tttmp-&gt;ownername);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;申请人: &quot;</span> &#125;;</span><br><span class="line">a = <span class="built_in">concatenateStrings</span>(a, name3);</span><br><span class="line"><span class="built_in">Print_first</span>(a);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">char</span>* name4;</span><br><span class="line">name4 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name4, tttmp-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* b = &#123; <span class="string">&quot;申请奖项: &quot;</span> &#125;;</span><br><span class="line">b = <span class="built_in">concatenateStrings</span>(b, name4);</span><br><span class="line"><span class="built_in">Print_first</span>(b);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">char</span>* name5;</span><br><span class="line">name5 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name5, tttmp-&gt;ppin);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* c = &#123; <span class="string">&quot;备注: &quot;</span> &#125;;</span><br><span class="line">c = <span class="built_in">concatenateStrings</span>(c, name5);</span><br><span class="line"><span class="built_in">Print_first</span>(c);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">str = <span class="built_in">intToString</span>(tttmp-&gt;num);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* d = &#123; <span class="string">&quot;奖项等级: &quot;</span> &#125;;</span><br><span class="line">d = <span class="built_in">concatenateStrings</span>(d, str);</span><br><span class="line"><span class="built_in">Print_first</span>(d);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">free</span>(name3);</span><br><span class="line"><span class="built_in">free</span>(name4);</span><br><span class="line"><span class="built_in">free</span>(name5);</span><br><span class="line"><span class="built_in">free</span>(str);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//printf(&quot;申请人：%s 学号%d 申请奖项：%s 备注：%s 申请几等奖：%d\n&quot;,tttmp-&gt;ownername,tttmp-&gt;xh,tttmp-&gt;name,tttmp-&gt;ppin,tttmp-&gt;num);</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否确有此奖项？请认真核对并输入1是0没有：\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> opt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line">ck=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;它是论文吗？1是0不是：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;<span class="comment">//学生认证环节，</span></span><br><span class="line">rz:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">lunwenprr</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;论文分为六档，申请人的论文是:&quot;</span>);</span><br><span class="line">jingper* res = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res-&gt;flg = opt + <span class="number">9</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(res-&gt;name, tttmp-&gt;name);</span><br><span class="line">res-&gt;num = tttmp-&gt;num;</span><br><span class="line">stu* aax = <span class="built_in">stusearch2</span>(tttmp-&gt;xh, stuhead);</span><br><span class="line">res-&gt;next = aax-&gt;prize;</span><br><span class="line">aax-&gt;prize = res;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功,下一项\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line">aax-&gt;ppri++;</span><br><span class="line"><span class="built_in">stucalc</span>(aax);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="comment">//recalc~~~</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> rz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">0</span>) &#123;</span><br><span class="line">mubiao:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">jingprr</span>(jinghead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请按照标号选择目标竞赛:&quot;</span>);</span><br><span class="line">ck = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line">jing* jkl = <span class="built_in">jingsearch</span>(opt, jinghead);</span><br><span class="line"><span class="keyword">if</span> (jkl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//学生认证环节</span></span><br><span class="line">stu* aax = <span class="built_in">stusearch2</span>(tttmp-&gt;xh, stuhead);</span><br><span class="line">jingper* rres = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line"><span class="built_in">strcpy</span>(rres-&gt;name, jkl-&gt;name);</span><br><span class="line">rres-&gt;flg = <span class="number">3</span> - tttmp-&gt;num + ((jkl-&gt;ff == <span class="number">1</span>) ? <span class="number">5</span> : <span class="number">0</span>) + ((jkl-&gt;flg == <span class="string">&#x27;A&#x27;</span>) ? <span class="number">2</span> : ((jkl-&gt;flg == <span class="string">&#x27;C&#x27;</span>) ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">rres-&gt;num = tttmp-&gt;num;</span><br><span class="line"></span><br><span class="line">rres-&gt;next = aax-&gt;prize;</span><br><span class="line">aax-&gt;prize = rres;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功,下一项\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line">aax-&gt;ppri++;</span><br><span class="line"><span class="built_in">stucalc</span>(aax);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师接受了%s的认证，并同意了。&quot;</span>, bbx-&gt;name, aax-&gt;name);<span class="comment">//历史</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> sss5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> mubiao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> sss5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项已否决。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师否决了%s的认证。&quot;</span>, bbx-&gt;name, tttmp-&gt;ownername);<span class="comment">//历史</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> sss5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tttmp = tttmp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(bbx-&gt;first);</span><br><span class="line">bbx-&gt;first = tttmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效。请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> sss5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;辛苦老师了，没有奖项认证的申请了哦\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;您想修改哪个绩点计算方式？&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.成绩绩点算法&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.竞赛绩点算法&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.论文及学术著作的绩点算法&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line"><span class="keyword">switch</span> (opt2) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">14</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%d至%d分数段对应绩点:%.1f\n&quot;</span>, i, point[i - <span class="number">1</span>] - <span class="number">1</span>, point[i], jidian[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;本系统绩点算法目前为分段制，分13段，每段绩点如上，请输入您想修改的部分:&quot;</span>);</span><br><span class="line"><span class="type">int</span> opt, oopt;</span><br><span class="line"><span class="type">float</span> ooopt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span> (opt &lt;= <span class="number">0</span> || opt &gt; <span class="number">13</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绩点修改失败，段不存在，返回上一级。\n&quot;</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您想修改为多少？请对后段进行修改，先输入0-100的数字\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;再输入对应绩点(注意程序绩点计算从高到低依次进行计算):\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;oopt);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;ooopt);</span><br><span class="line">point[opt] = oopt; jidian[opt] = ooopt;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绩点修改成功，自动返回上一级...\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师调整了绩点的计算方式，老的绩点算法为：&quot;</span>, bbx-&gt;name);<span class="comment">//历史</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">14</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%d %d %.1f&quot;</span>, point[i - <span class="number">1</span>] - <span class="number">1</span>, point[i], jidian[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n新的为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">14</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%d %d %.1f&quot;</span>, point[i - <span class="number">1</span>] - <span class="number">1</span>, point[i], jidian[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);<span class="comment">//算绩点</span></span><br><span class="line"><span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);<span class="comment">//算排名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="type">float</span> opt3;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">jingsaiprr</span>();</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;本系统的竞赛档次分为五档，您可以更改其中的权重\n&quot;</span>);<span class="comment">//这里是竞赛的简介</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前竞赛绩点加分为:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1:%.3f\n&quot;</span>, <span class="number">2</span> * jingji[<span class="number">6</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2:%.3f \n&quot;</span>, <span class="number">2</span> * jingji[<span class="number">7</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3:%.3f \n&quot;</span>, <span class="number">2</span> * jingji[<span class="number">8</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4:%.3f \n&quot;</span>, <span class="number">2</span> * jingji[<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5:%.3f\n&quot;</span>, <span class="number">2</span> * jingji[<span class="number">10</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入想修改的档次和对应的修改后的结果:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt3);</span><br><span class="line"><span class="keyword">if</span> (opt1 &lt;= <span class="number">0</span> || opt1 &gt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;对应档次不存在，修改失败，自动返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功。自动返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s调整了竞赛对应的绩点算法，老的绩点竞赛数据为：&quot;</span>, bbx-&gt;name);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">11</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%.3f &quot;</span>, jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line">jingji[opt1 + <span class="number">5</span>] = opt3 / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n新的绩点竞赛数据为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">11</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%.3f &quot;</span>, jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);<span class="comment">//算绩点</span></span><br><span class="line"><span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);<span class="comment">//算排名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line"><span class="type">float</span> opt3;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">lunwenprr</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;本系统的论文档次分为六档，您可以更改其中的权重。\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前竞赛绩点加分为: \n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1: %.3f\n&quot;</span>, jingji[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2: %.3f\n&quot;</span>, jingji[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3: %.3f\n&quot;</span>, jingji[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4: %.3f\n&quot;</span>, jingji[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5: %.3f\n&quot;</span>, jingji[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6: %.3f\n&quot;</span>, jingji[<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入想修改的档次和对应的修改后的结果:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt3);</span><br><span class="line"><span class="keyword">if</span> (opt1 &lt;= <span class="number">0</span> || opt1 &gt; <span class="number">6</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;对应档次不存在，修改失败，自动返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功。自动返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s调整了论文对应的绩点算法，老的论文绩点数据为：&quot;</span>, bbx-&gt;name);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%.3f &quot;</span>, jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line">jingji[opt1 - <span class="number">1</span>] = opt3;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n新的论文绩点数据为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%.3f &quot;</span>, jingji[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);<span class="comment">//算绩点</span></span><br><span class="line"><span class="built_in">stusort</span>(stuhead, cmps41);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);<span class="comment">//算排名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法。绩点调整失败，返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line"><span class="built_in">newstu</span>(bbx-&gt;name);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师添加了新学生&quot;</span>, bbx-&gt;name);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>], obuf[<span class="number">40</span>];</span><br><span class="line">rep2:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(obuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(obuf));<span class="comment">//密，密码过长咋办？？？</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的新密码：\n&quot;</span>);<span class="comment">//数字啊字符判定啊啥的，还能凹，但是没啥必要</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s修改了他的密码：\n%s变动为%s&quot;</span>, bbx-&gt;name, bbx-&gt;pas, buf);<span class="comment">//历史</span></span><br><span class="line"><span class="built_in">strcpy</span>(bbx-&gt;pas, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">3000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, bbx-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: &#123;</span><br><span class="line"><span class="keyword">if</span> (bbx-&gt;tn != <span class="number">0</span>) &#123;</span><br><span class="line">rep11:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;您目前所教课程都有:&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">teacouprr</span>(bbx);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入课程前面的序号以对其进行操作:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choose* ttmp = bbx-&gt;teach;</span><br><span class="line">Course* tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; ttmp != <span class="literal">NULL</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == opt1) &#123;</span><br><span class="line">tmp = ttmp-&gt;tar;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ttmp = ttmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Course *tmp=cousearch1(couhead,opt1);</span></span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="literal">NULL</span>) &#123;<span class="comment">//课程，大界面</span></span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师管理了%s课程：&quot;</span>, bbx-&gt;name, tmp-&gt;name);</span><br><span class="line">classbegin:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.查看同学成绩&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.更改平时分考试分比例&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.发布通知&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.撤销通知&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前平时分考试分比例为%d:%d\n&quot;</span>, tmp-&gt;Daily, tmp-&gt;Text);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您想对 %s 课程进行的操作:&quot;</span>, tmp-&gt;name);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">rep16:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">coustuprr</span>(tmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您想进行的操作:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.更改学生成绩\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.导出学生成绩\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.排序后再看学生成绩\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0.返回上一级\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改对象的序号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (opt1 &lt;= tmp-&gt;top &amp;&amp; opt1 &gt; <span class="number">0</span>) &#123;<span class="comment">//修改</span></span><br><span class="line"><span class="type">float</span> opt10;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的平时分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt10);</span><br><span class="line"><span class="keyword">if</span> (opt10 &lt;= <span class="number">100</span> &amp;&amp; opt10 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">tmp-&gt;stu[opt1].daily = opt10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，成绩将保持不变。\n&quot;</span>);<span class="comment">//我觉得这很合理啊，你是老师，不想改学生平时分想改考试分但是记不住，就只能卡评测。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的考试分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt10);</span><br><span class="line"><span class="keyword">if</span> (opt10 &lt;= <span class="number">100</span> &amp;&amp; opt10 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">tmp-&gt;stu[opt1].text = opt10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，成绩将保持不变。\n&quot;</span>);<span class="comment">//我觉得这很合理啊，你是老师，不想改学生平时分想改考试分但是记不住，就只能卡评测。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;修改%s的成绩为 %.1f %.1f&quot;</span>, tmp-&gt;stu[opt1].name, tmp-&gt;stu[opt1].daily, tmp-&gt;stu[opt1].text);</span><br><span class="line">tmp-&gt;stu[opt1].<span class="keyword">final</span> = (tmp-&gt;stu[opt1].daily * tmp-&gt;Daily + tmp-&gt;stu[opt1].text * tmp-&gt;Text) / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">stucalc</span>(<span class="built_in">stusearch2</span>(tmp-&gt;stu[opt1].id, stuhead));</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> classbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep16;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="built_in">coupercsvprr</span>(tmp);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功导出。温馨提示，程序非正常关闭不会有文件留下。&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师导出了%s的成绩&quot;</span>, bbx-&gt;name, tmp-&gt;name);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep16;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">back:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">coustuprr</span>(tmp);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您想查看的模式:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.按照成绩降序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.按照成绩升序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.按班降序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.按班升序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.对平时分降序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.对平时分升序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7.对考试成绩降序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;8.对考试成绩升序排列\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;<span class="comment">//写排序函数。</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">coursort</span>(tmp, cmpc11); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">coursort</span>(tmp, cmpc12); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">coursort</span>(tmp, cmpc21); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">coursort</span>(tmp, cmpc22); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">coursort</span>(tmp, cmpc31); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">coursort</span>(tmp, cmpc32); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">coursort</span>(tmp, cmpc41); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">coursort</span>(tmp, cmpc42); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> back;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> rep16;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> classbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep16;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> rep11;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新的平时分和考试分的整数百分比例，并保持平时分加考试分和为100：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line"><span class="keyword">if</span> (opt1 + opt2 != <span class="number">100</span> || (opt1 &lt; <span class="number">0</span> || opt1&gt;<span class="number">100</span>)) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，比例将保持不变。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> classbegin;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;Daily = opt1; tmp-&gt;Text = opt2;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;更改成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%s调整了课程平时分考试分计算比例 %d %d&quot;</span>, bbx-&gt;name, opt1, opt2);</span><br><span class="line"><span class="built_in">courperrecalc</span>(tmp);</span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep11;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您只能在该课程中同时发布一条重要通知，学生登录后在界面可以看到它。\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的通知：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp-&gt;notice);</span><br><span class="line">tmp-&gt;notic = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师发布了通知：\n%s&quot;</span>, bbx-&gt;name, tmp-&gt;notice);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通知发布成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> classbegin;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;<span class="comment">//我不会排版，您等大佬加油！</span></span><br><span class="line">rep353:cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;notic == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前通知为：%s\n&quot;</span>, tmp-&gt;notice);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认撤销？1是0保留：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;</span><br><span class="line">tmp-&gt;notic = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师撤销了通知：\n%s&quot;</span>, bbx-&gt;name, tmp-&gt;notice);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通知撤销成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通知已保留。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep353;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该课程没有发布通知。自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> classbegin;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep11;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束课程操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> rep11;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您没有教的课程。自动返回上一级...&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">rep34:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">stuprr</span>(stuhead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择您想查看的模式:\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.按照推免规则降序\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.按照平均绩点降序\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.按照班级排序，班内按照推免规则降序\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.按照班级排序，班内按平均绩点降序\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.按照学号排序\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.导出所有学生成绩\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0.返回上一级\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps41);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps22);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps21);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps10);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line"><span class="built_in">stucsvprr</span>(stuhead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;导出成功!&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> rep34;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, bbx-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> eend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> teabegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (opt2 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码错误，登录失败，自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人，登录失败，自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ko = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的账号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>, &amp;ko);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">adm* ccx = <span class="built_in">checkadm</span>(opt2, ko, arr, admhead);</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;<span class="comment">//登录成功</span></span><br><span class="line"><span class="built_in">time</span>(&amp;timer);<span class="comment">//将谁登录写入历史</span></span><br><span class="line">info = <span class="built_in">localtime</span>(&amp;timer);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s管理员%s登录&quot;</span>, <span class="built_in">asctime</span>(info), ccx-&gt;name);</span><br><span class="line">admbegin:</span><br><span class="line">cls;</span><br><span class="line"><span class="type">char</span>* name3;</span><br><span class="line">name3 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name3, ccx-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;管理员: &quot;</span> &#125;;</span><br><span class="line">a = <span class="built_in">concatenateStrings</span>(a, name3);</span><br><span class="line">a = <span class="built_in">concatenateStrings</span>(a, <span class="string">&quot; 您好！&quot;</span>);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(a);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.管理学生&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.管理老师&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.管理课程&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.修改密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;5.设定系统维护时间&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;6.调整竞赛等级&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;7.退出登录&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.退出系统&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">free</span>(name3);</span><br><span class="line">ck=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span>(ck==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;<span class="comment">//管理员的选项</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">rep2233:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">stuprr</span>(stuhead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入序号以对其进行管理:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line">stu* tmp = <span class="built_in">stusearch3</span>(opt1, stuhead);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非法输入，请重新输入！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep2233;</span><br><span class="line">&#125;</span><br><span class="line">rep88:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">stuperprr</span>(tmp);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s查询了%s&quot;</span>, ccx-&gt;name, tmp-&gt;name);</span><br><span class="line"><span class="type">char</span>* name1;</span><br><span class="line">name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name1, tmp-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;学生姓名:&quot;</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="built_in">concatenateStrings</span>(a, name1);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(str);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;您接下来的操作是:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.改Ta的密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.撤销奖项&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.添加奖项&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.删除该学生&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;5.管理Ta的选课&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;6.添加选课&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">free</span>(name1);</span><br><span class="line">ck==<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (ck == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>], obuf[<span class="number">40</span>];</span><br><span class="line">rep77:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Ta原先的密码是:%s\n&quot;</span>, tmp-&gt;pas);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请修改Ta的新密码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep77;</span><br><span class="line">&#125;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep77;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;并将Ta的密码从%s改为%s&quot;</span>, tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep88;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;ppri != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">stujingprr</span>(tmp);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入撤销奖项所对应的标号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line">jingper* kk = tmp-&gt;prize;</span><br><span class="line"><span class="keyword">if</span> (opt2 == <span class="number">1</span>) &#123;</span><br><span class="line">tmp-&gt;prize = tmp-&gt;prize-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= tmp-&gt;ppri + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == opt2) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s老师撤销了%s的%s的%d等奖&quot;</span>, ccx-&gt;name, tmp-&gt;name, kk-&gt;next-&gt;name, kk-&gt;next-&gt;num);</span><br><span class="line">kk-&gt;next = kk-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">kk = kk-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功!\n&quot;</span>);</span><br><span class="line">tmp-&gt;ppri--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep88;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;他没有奖项，删除失败，返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep88;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">tmp-&gt;ppri++;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">jingper* rres = (jingper*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(jingper));</span><br><span class="line">rres-&gt;next = tmp-&gt;prize;</span><br><span class="line">tmp-&gt;prize = rres;</span><br><span class="line">rrep18:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入他的获奖种类:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.竞赛      2.论文\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">jingprr</span>(jinghead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请按照标号选择目标竞赛:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">jing* jkl = <span class="built_in">jingsearch</span>(x, jinghead);</span><br><span class="line"><span class="keyword">if</span> (jkl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入几等奖:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">3</span> || x &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(rres-&gt;name, jkl-&gt;name);</span><br><span class="line">rres-&gt;flg = <span class="number">3</span> - x + ((jkl-&gt;ff == <span class="number">1</span>) ? <span class="number">5</span> : <span class="number">0</span>) + ((jkl-&gt;flg == <span class="string">&#x27;A&#x27;</span>) ? <span class="number">2</span> : ((jkl-&gt;flg == <span class="string">&#x27;C&#x27;</span>) ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">rres-&gt;num = x;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功!即将返回上一级...\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s管理员授予%s %s的%d&quot;</span>, arr, tmp-&gt;name, rres-&gt;name, x);<span class="comment">//历史</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep18;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">lunwenprr</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;论文分为六档，请输入申请人的论文是第几档：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rres-&gt;num);</span><br><span class="line">rres-&gt;flg = x + <span class="number">9</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入论文名字:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奖项认证成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s管理员授予%s %s的%d&quot;</span>, arr, tmp-&gt;name, rres-&gt;name, rres-&gt;num);<span class="comment">//历史</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rrep18;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line"><span class="keyword">goto</span> rep88;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功!\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s删除了一位学生。他的属性如下:&quot;</span>, ccx-&gt;name);</span><br><span class="line"><span class="built_in">fstuperprr</span>(tmp);</span><br><span class="line"><span class="built_in">delstu</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line">opt1 = <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (choose* ui = tmp-&gt;first; ui != <span class="literal">NULL</span>; opt1++, ui = ui-&gt;next) &#123;</span><br><span class="line">opt2 = <span class="built_in">courstusearch1</span>(ui-&gt;tar, tmp-&gt;xh, res);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t%s\t%.1f\t%.1f\t%.1f\n&quot;</span>, opt1, ui-&gt;tar-&gt;name, ui-&gt;tar-&gt;stu[opt2].daily, ui-&gt;tar-&gt;stu[opt2].text, res);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入标号以便进行修改:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line">Course* ccou = <span class="literal">NULL</span>; <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (choose* kkk = tmp-&gt;first; kkk != <span class="literal">NULL</span>; kkk = kkk-&gt;next, ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == opt1) &#123;</span><br><span class="line">ccou = kkk-&gt;tar;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Course * ccou=cousearch1(couhead,opt1);</span></span><br><span class="line">rep87:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t%.1\t %.1f\t%.1f\n&quot;</span>, ccou-&gt;name, ccou-&gt;stu[opt2].daily, ccou-&gt;stu[opt2].text, res);</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.修改成绩&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.删除选课&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您想对学生指定课程成绩进行的操作:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line"><span class="type">float</span> opt10;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的平时分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt10);</span><br><span class="line"><span class="keyword">if</span> (opt10 &lt;= <span class="number">100</span> &amp;&amp; opt10 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ccou-&gt;stu[opt2].daily = opt10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，成绩将保持不变。\n&quot;</span>);<span class="comment">//我觉得这很合理啊，你是老师，不想改学生平时分想改考试分但是记不住，就只能卡评测。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的考试分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;opt10);</span><br><span class="line"><span class="keyword">if</span> (opt10 &lt;= <span class="number">100</span> &amp;&amp; opt10 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ccou-&gt;stu[opt2].text = opt10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入不合法，成绩将保持不变。\n&quot;</span>);<span class="comment">//我觉得这很合理啊，你是老师，不想改学生平时分想改考试分但是记不住，就只能卡评测。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;修改%s的成绩为 %.1f %.1f&quot;</span>, ccou-&gt;stu[opt2].name, ccou-&gt;stu[opt2].daily, ccou-&gt;stu[opt2].text);</span><br><span class="line">ccou-&gt;stu[opt2].<span class="keyword">final</span> = (ccou-&gt;stu[opt2].daily * ccou-&gt;Daily + ccou-&gt;stu[opt2].text * ccou-&gt;Text) / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep87;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">ccou-&gt;stu[opt2] = ccou-&gt;stu[ccou-&gt;top];</span><br><span class="line">ccou-&gt;top--;</span><br><span class="line">tmp-&gt;choo--;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s删除了%s的%s选课，成绩 %.1f %.1f&quot;</span>, ccx-&gt;name, tmp-&gt;name, ccou-&gt;name, ccou-&gt;stu[opt2].daily, ccou-&gt;stu[opt2].text);</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;first-&gt;tar == ccou) &#123;</span><br><span class="line">tmp-&gt;first = tmp-&gt;first-&gt;next;</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (choose* ko = tmp-&gt;first; ko-&gt;next != <span class="literal">NULL</span>; ko = ko-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (ko-&gt;next-&gt;tar == ccou) &#123;</span><br><span class="line">ko-&gt;next = ko-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//goto rep87;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> rep87;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">rep114:cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你想添加的课程名(注意请不要与原有课程冲突):\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">choose* yu = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(choose));</span><br><span class="line">yu-&gt;tar = <span class="built_in">coursearch1</span>(couhead, buf);</span><br><span class="line"><span class="keyword">if</span> (yu-&gt;tar == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该课程不存在！请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep114;</span><br><span class="line">&#125;</span><br><span class="line">yu-&gt;next = tmp-&gt;first;</span><br><span class="line">tmp-&gt;first = yu;</span><br><span class="line">yu-&gt;tar-&gt;top++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].name, tmp-&gt;name);</span><br><span class="line">yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].id = tmp-&gt;xh;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入平时分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].daily);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入考试分:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].text);</span><br><span class="line"></span><br><span class="line">yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].<span class="keyword">final</span> = (yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].daily * yu-&gt;tar-&gt;Daily + yu-&gt;tar-&gt;Text * yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].text) / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">stucalc</span>(tmp);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新课程添加成功!&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;%s添加了%s的新科目%s，并赋值为%f %f&quot;</span>, ccx-&gt;name, tmp-&gt;name, yu-&gt;tar-&gt;name, yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].daily, yu-&gt;tar-&gt;stu[yu-&gt;tar-&gt;top].text);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep88;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">rep99:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.查找老师&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.添加老师&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您接下来的操作是:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line"><span class="keyword">switch</span> (opt2) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">teaprr</span>(teahead);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择您想查找的老师的序号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt2);</span><br><span class="line">teacher* tmp = <span class="built_in">teasearch2</span>(opt2, teahead);</span><br><span class="line">cls;</span><br><span class="line"><span class="type">char</span>* name1;</span><br><span class="line">name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name1, tmp-&gt;name);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* a = &#123; <span class="string">&quot;老师姓名:&quot;</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="built_in">concatenateStrings</span>(a, name1);</span><br><span class="line">here:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(str);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;您接下来的操作是:&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.添加所教科目&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.删除老师&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;3.删除所教科目&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;4.更改老师密码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">100</span>];</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入课程名称:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">choose* rrres = (choose*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(choose));</span><br><span class="line">rrres-&gt;tar = <span class="built_in">coursearch1</span>(couhead, arr);</span><br><span class="line">choose* io = tmp-&gt;teach;</span><br><span class="line"><span class="keyword">for</span> (; io != <span class="literal">NULL</span>; io = io-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (io-&gt;tar == rrres-&gt;tar) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;所教课程重合，录入失败。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rrres-&gt;next=io-&gt;next;</span></span><br><span class="line"><span class="comment">//io-&gt;next=rrres;</span></span><br><span class="line">rrres-&gt;next = io;</span><br><span class="line">tmp-&gt;teach = rrres;</span><br><span class="line">tmp-&gt;tn++;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;录入成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> here;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp == teahead) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;管理%s删除了%s老师&quot;</span>, ccx-&gt;name, tmp-&gt;name);</span><br><span class="line">teahead = teahead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;管理%s删除了%s老师&quot;</span>, ccx-&gt;name, tmp-&gt;name);</span><br><span class="line"><span class="keyword">for</span> (teacher* ui = teahead; ui-&gt;next != <span class="literal">NULL</span>; ui = ui-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (ui-&gt;next == tmp) &#123;</span><br><span class="line">ui-&gt;next = ui-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;teach == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到Ta的教课程，删除失败。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep99;</span><br><span class="line">&#125;</span><br><span class="line">opt1 = <span class="number">1</span>;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_first</span>(<span class="string">&quot;他所教课程有:&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;他所教课程有：\n&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (choose* ppo = tmp-&gt;teach; ppo != <span class="literal">NULL</span>; ppo = ppo-&gt;next, ++opt1) &#123;</span><br><span class="line"><span class="type">char</span>* name1;</span><br><span class="line">name1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(name1, ppo-&gt;tar-&gt;name);</span><br><span class="line"><span class="type">char</span>* a = <span class="built_in">intToString</span>(opt1);</span><br><span class="line"><span class="built_in">strcat</span>(a, <span class="string">&quot;. &quot;</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="built_in">concatenateStrings</span>(a, name1);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(str);</span><br><span class="line"><span class="built_in">free</span>(name1);</span><br><span class="line"><span class="comment">//printf(&quot;%d %s\n&quot;,opt1,ppo-&gt;tar-&gt;name);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择标号确定课程:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (opt1 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s删除了%s老师的%s课程授课权限。&quot;</span>, ccx-&gt;name, tmp-&gt;name, tmp-&gt;teach-&gt;tar);</span><br><span class="line">tmp-&gt;teach = tmp-&gt;teach-&gt;next;</span><br><span class="line">tmp-&gt;tn--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">opt2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (choose* ppo = tmp-&gt;teach; ppo-&gt;next != <span class="literal">NULL</span>; opt2++, ppo = ppo-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt2 == opt1) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s删除了%s老师的%s课程授课权限。&quot;</span>, ccx-&gt;name, tmp-&gt;name, ppo-&gt;next-&gt;tar-&gt;name);</span><br><span class="line">ppo-&gt;next = ppo-&gt;next-&gt;next;</span><br><span class="line">tmp-&gt;tn--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep99;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，删除失败\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep99;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">40</span>], obuf[<span class="number">40</span>];</span><br><span class="line">rep76:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Ta原先的密码是:%s\n&quot;</span>, tmp-&gt;pas);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请修改Ta的新密码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep76;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep76;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;并将Ta的密码从%s改为%s&quot;</span>, tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;pas, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep99;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">newtea</span>(ccx-&gt;name);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep99;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_head</span>();</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;1.添加一门新课程&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;2.删除某课程&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_text</span>(<span class="string">&quot;0.返回上一级&quot;</span>);</span><br><span class="line"><span class="built_in">Print_line</span>();</span><br><span class="line"><span class="built_in">Print_tail</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您可以选:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">switch</span> (opt1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line">Course* rres = (Course*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Course));</span><br><span class="line">rres-&gt;next = couhead;</span><br><span class="line">couhead = rres;</span><br><span class="line">rres-&gt;top = <span class="number">0</span>;</span><br><span class="line">rres-&gt;notic = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程名：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;name);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程编号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;number);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程种类，必修，限选还是选修？\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, rres-&gt;type);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程学时：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rres-&gt;hours);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程学分：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;rres-&gt;credit);</span><br><span class="line">rep1145:</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新课程平时分和考试占比(注意两项加和要等于一百):\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;平时分占比:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rres-&gt;Daily);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;考试成绩占比:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rres-&gt;Text);</span><br><span class="line"><span class="keyword">if</span> (rres-&gt;Daily + rres-&gt;Text != <span class="number">100</span>) &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两项加和不等于一百，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep1145;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新课程添加成功。&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s添加了新课程%s&quot;</span>, ccx-&gt;name, rres-&gt;name);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">100</span>];</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需要删除的课程名称:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">Course* a = couhead;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(arr, a-&gt;name) == <span class="number">0</span>) &#123;</span><br><span class="line">couhead = couhead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Course* b = couhead; b-&gt;next != <span class="literal">NULL</span>; b = b-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(b-&gt;next-&gt;name, arr) == <span class="number">0</span>) &#123;</span><br><span class="line">a = b-&gt;next;</span><br><span class="line">b-&gt;next = a-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;课程不存在！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a-&gt;top; ++i) &#123;</span><br><span class="line">stu* ttt = <span class="built_in">stusearch2</span>(a-&gt;stu[i].id, stuhead);</span><br><span class="line">ttt-&gt;choo--;</span><br><span class="line"><span class="keyword">if</span> (ttt-&gt;first-&gt;tar == a) &#123;</span><br><span class="line">ttt-&gt;first = ttt-&gt;first-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (choose* tt = ttt-&gt;first; tt-&gt;next != <span class="literal">NULL</span>; tt = tt-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (tt-&gt;next-&gt;tar == a) &#123;</span><br><span class="line">tt-&gt;next = tt-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (teacher* ui = teahead; ui != <span class="literal">NULL</span>; ui = ui-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (ui-&gt;teach == <span class="literal">NULL</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (ui-&gt;teach-&gt;tar == a) &#123;</span><br><span class="line">ui-&gt;tn--;</span><br><span class="line">ui-&gt;teach = ui-&gt;teach-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (choose* oi = ui-&gt;teach; oi-&gt;next != <span class="literal">NULL</span>; oi = oi-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (oi-&gt;next-&gt;tar == a) &#123;</span><br><span class="line">ui-&gt;tn--;</span><br><span class="line">oi-&gt;next = oi-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;课程删除成功！&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">sturecalc</span>(stuhead);</span><br><span class="line">stuhead = <span class="built_in">stusort</span>(stuhead, cmps31);</span><br><span class="line"><span class="built_in">getrank</span>(stuhead);</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>], obuf[<span class="number">100</span>];</span><br><span class="line">rep56:</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(obuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(obuf));<span class="comment">//密，密码过长咋办？？？</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的新密码：\n&quot;</span>);<span class="comment">//数字啊字符判定啊啥的，还能凹，但是没啥必要</span></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//密码输出出来变星号啊啥的，还能凹，但是我不会了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的密码长度小于10，安全性不强，请重新设定。\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep56;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输一遍保证密码正确：\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, obuf);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, obuf) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;两次密码不一致，请重新设置密码！\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> rep56;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s修改了他的密码：\n%s变动为%s&quot;</span>, ccx-&gt;name, ccx-&gt;pas, buf);<span class="comment">//历史</span></span><br><span class="line"><span class="built_in">strcpy</span>(ccx-&gt;pas, buf);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新密码应用成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">3000</span>);</span><br><span class="line">cls;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入系统从现在开始维护的天数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line"><span class="keyword">if</span> (opt1 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设定成功。期间只有管理员可以登录。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设定失败。原有的设定将保持不变。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">UPDATE = <span class="built_in">time</span>(<span class="number">0</span>) + (<span class="type">long</span> <span class="type">long</span>)opt1 * <span class="number">86400</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s设定了系统维护时间为%d天&quot;</span>, ccx-&gt;name, opt1);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, ccx-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> bbegin; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n%s退出了登录&quot;</span>, ccx-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> eend; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123;<span class="comment">//大佬，排版，带带</span></span><br><span class="line">rep308927428:</span><br><span class="line">cls;<span class="comment">//只是随机的数加个前缀当段名了，真的没啥意思</span></span><br><span class="line"><span class="built_in">jingprr</span>(jinghead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需要调整竞赛等级的竞赛编号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt1);</span><br><span class="line">jing* jkl = <span class="built_in">jingsearch</span>(opt1, jinghead);</span><br><span class="line"><span class="keyword">if</span> (jkl != <span class="literal">NULL</span>) &#123;</span><br><span class="line">rep9724506:</span><br><span class="line">cls;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %c %d\n&quot;</span>, jkl-&gt;name, jkl-&gt;flg);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入调整之后的竞赛等级(输入A或B或b(代表B*)或者C):&quot;</span>);</span><br><span class="line"><span class="type">char</span> vbnm;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;vbnm);</span><br><span class="line"><span class="keyword">if</span> (vbnm == <span class="string">&#x27;A&#x27;</span> || vbnm == <span class="string">&#x27;B&#x27;</span> || vbnm == <span class="string">&#x27;b&#x27;</span> || vbnm == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功!\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(his, <span class="string">&quot;\n管理员%s将%s的竞赛等级调整为%c，原来的等级为%c&quot;</span>, ccx-&gt;name, jkl-&gt;name, vbnm, jkl-&gt;flg);<span class="comment">//历史</span></span><br><span class="line">jkl-&gt;flg = vbnm;</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep9724506;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作数无效，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> rep308927428;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误!请重新输入!\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> admbegin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (opt2 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码错误，登录失败，自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人，登录失败，自动返回上一级。\n&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line"><span class="keyword">goto</span> eend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！请重新输入!&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">goto</span> bbegin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;----------------------------------update------------------------------&gt;</span></span><br><span class="line">eend:</span><br><span class="line"><span class="built_in">Print_pdding</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;感谢使用。&quot;</span>);</span><br><span class="line"><span class="built_in">sl</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">updjidian</span>();</span><br><span class="line"><span class="built_in">updstu</span>(stuhead);</span><br><span class="line"><span class="built_in">updtea</span>(teahead);</span><br><span class="line"><span class="built_in">updcou</span>(couhead);</span><br><span class="line"><span class="built_in">updunp</span>(teahead);</span><br><span class="line"><span class="built_in">updupdate</span>();</span><br><span class="line"><span class="built_in">updcomp</span>(jinghead);</span><br><span class="line"><span class="built_in">fclose</span>(his);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文案</title>
      <link href="/2024/10/31/30010%E6%9C%89%E8%B6%A3%E6%96%87%E6%A1%88/"/>
      <url>/2024/10/31/30010%E6%9C%89%E8%B6%A3%E6%96%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>收集一些文案.</p><h2 id="The-Zen-of-Python">The Zen of Python</h2><p>在py里面输入import this得到下文:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br></pre></td></tr></table></figure><p>zen的意思是&quot;禅&quot;,在这里可以理解为原则.</p><h2 id="单词">单词</h2><p><code>aftermath</code> n.(战争,事故,不快事情,<s>数学</s>的)后果,创伤<br><code>cram</code> v.(为应考)临时死记硬背,临时抱佛脚</p><h2 id="偷偷往你的奶茶里放">偷偷往你的奶茶里放</h2><p>丙酸睾酮隔天4毫升，丙酸区它雄酮隔天5毫升，醋酸群波龙隔天4毫升，美替诺龙隔天4毫升，司腾博龙隔天3毫升，曲托龙隔天3毫升，生长激素每天早4IU晚4IU针剂麻黄碱训练前一瓶，口服特立补训练前十粒，口服美替诺龙训练前十粒，氧雄龙训练前20粒，康复龙训练前十粒，康力龙训练前十粒，M1T训练前十粒，克伦训练前五粒T3四粒睡前美睾酮10粒，康力龙十粒，口服美替10粒，抗雌阿诺曲错每天一粒，卡麦角林一周两粒周一一粒周日一粒保护剂跟上 (这段文案好像是教人如何把身边人变成小药娘(特指MTF),总之知识丰富度让人忍俊不禁)</p><h2 id="程序猿的菜谱">程序猿的菜谱</h2><p>2024年12月31日 元旦群友聚会晚宴菜谱:<br>1、Linux（麻辣企鹅）<br>2、golang（炒田鼠）<br>3、PHP（大象肉炒竹笋）<br>4、Python（蛇肉煎蛋）<br>5、rust（香焖大闸蟹）<br>6、Perl（爆炒骆驼肉，炸蝴蝶）<br>7、SQL（红焖海豚肉，海狮肉段）<br>酒水：Java（咖啡）<br>甜点：cookie（曲奇）<br>餐具：git fork（叉子）<br>时间：12月31日晚上18:00恭候，18:30开席</p><h2 id="崩铁匹诺康尼文案">崩铁匹诺康尼文案</h2><p>(让我想想…接下来该干什么呢?)</p><p>(喝一瓶苏乐达解闷)</p><p>吨…吨…吨…</p><p>哦, no…你早该学会听取理性的意见的.这下糟了.</p><p>一团胀气开始在你的下腹部聚集,随后化作汹涌的热浪扶摇直上.</p><p>它毫不费力地突破了你人体构造的每一道关卡,并撬开了你自控力为0的嘴巴;最终,它化作了一滩七色彩虹状的呕吐物,摧毁了你精心布置的工作环境.</p><p>周围本就寥寥无几的客人全都被这骇人的一幕吓跑了…或许这也是一种另类的减轻工作负担的方式.</p><p>这下,你理应学到教训了吧?</p><p>你将这一切怪罪于姬子和瓦尔特 $\cdot$ 杨–作为列车组的大家长,他们没有教会你 $\lceil$ 自制力 $\rfloor$ 在充满诱惑的现代社会中是多么重要.</p><p>(再来一瓶苏乐达.)</p><p>不,绝对不行.你听见了吗?绝,对,不,行.</p><p>你颤抖着抽回了那只情不自禁的手.你这一生如履薄冰…绝对不能因为一瓶小小的碳酸饮料导致自己走不到对岸.</p><h2 id="PTA-你值得拥有">PTA,你值得拥有</h2><p>你说的对，但是《吸吸皮吸》是由Check You自主研发的一款全新开放世界冒险游戏。游戏发生在一个被称作「Pleasant Teacher Alert」的幻想世界，在这里，被神选中的人将被授予「神之相机」，导引相机之力。你将扮演一位名为「艾斯么」的神秘角色，在自由的旅行中邂逅性格各异、能力独特的同伴们，和他们一起打题，找回Check You 失去的勤韧 ——同时，逐步发掘「吸吸皮吸」的真相。</p><h2 id="嘻假假-你也值得拥有">嘻假假,你也值得拥有</h2><p>你说得对，但是《C语言》是由贝尔实验室自主研发的一款全新高级编程语言。程序运行在一个被称作“内存”的虚拟世界，在这里，被神选中的人将被授予“指针”，导引地址之力。你将扮演一位名为“程序员”的神秘角色，在自由的旅行中邂逅码风各异、不写注释的同伴们，和他们一起击败异常，找回失散的指针——同时，逐步发掘“段错误”的真相。</p><h2 id="刑法">刑法</h2><p>《中华人民共和国刑法》 第三百六十三条</p><p>【制作、复制、出版、贩卖、传播淫秽物品牟利罪】以牟利为目的，制作、复制、出版、贩卖、传播淫秽物品的，处三年以下有期徒刑、拘役或者管制，并处罚金；情节严重的，处三年以上十年以下有期徒刑，并处罚金；情节特别严重的，处十年以上有期徒刑或者无期徒刑，并处罚金或者没收财产。<br>【为他人提供书号出版淫秽书刊罪】为他人提供书号，出版淫秽书刊的，处三年以下有期徒刑、拘役或者管制，并处或者单处罚金；明知他人用于出版淫秽书刊而提供书号的，依照前款的规定处罚。</p><h2 id="末流985">末流985</h2><p>（网上抄的）吉林大学真的是末流985吗？</p><p>答：是的</p><p>根据高德地图，吉林大学前卫南区西边有一条河（经评论区指出 叫永春河），往南两公里是一个水库（经评论区提出，叫八一水库），就是河的尽头。</p><p>所以吉林大学是处于这条河末流的985。</p><p>简称末流985。</p><h2 id="Frieren歌词">Frieren歌词</h2><p>Far beyond the end<br>Where we may meet again<br>One last time<br>One last goodbye</p><h2 id="珂学">珂学</h2><p>在太阳西斜的这个世界,置身天上之森.等这场战争结束后,不归之人与望眼欲穿的众人,人人本着正义之名,长存不灭的过去,逐渐消逝的未来.我回来了,纵使日薄西山,即使看不见未来,此时此刻的光辉,盼君勿忘.</p><blockquote><p>世界上最幸福的女孩-珂朵莉</p></blockquote><h2 id="英语小点">英语小点</h2><p><code>0 coins</code> 英语中除了1是单数别的全部是复数,零也是复数.</p><h2 id="MRE缩写大全-Meal-Ready-to-Eat">MRE缩写大全(Meal Ready to Eat)</h2><p><code>Meal Rejected by Enemy</code> 敌人都不吃的饭<br><code>Meal Rejected by Everyone</code> 没人要吃的饭<br><code>Meal Rarely Edible</code> 难以下咽的饭<br><code>Man Refuse to Eat</code> 人们拒绝吃的饭</p><h2 id="恩情课文-张希校长用石子击毁哈工大飞机">恩情课文-张希校长用石子击毁哈工大飞机</h2><blockquote><p>忠橙 恩芹(一种土特产)</p></blockquote><blockquote><p>蟠桃 紫柚(与之相对的土特产)</p></blockquote><p>结束人大会议回来的张希校长全然不顾身体的疲惫，连夜找我们几个学生商量希餐的安排。谈得晚了，便送我们出门，要研究生送我们回家。在去日新楼的路上，我们说:“校长， 您回去休息吧。您刚从人大会议回来。”校长摇摇头，“不碍事，你们知道现在国际上有很多人把吉林大学当作大专，不断给我们制造麻烦，你们是吉大的未来，你们的事情便是吉大的事情，是头等大事。”我们都激动了， 眼裏噙著泪花。多好的校长呀。</p><p>张希校长抬头看看远方说:“如果学科评估真像这日新楼这般高就好了，但是就有一些学校，像哈工大，要搞乱这个吉大，他们是罪人。”说著，张希校长弯下腰，从花坛旁捡出一个石子，然後看著远方说:“该死的韩杰才。” 说著他把石子奋力向前一掷。很快就见天上一个小点突然发出震耳欲聋的巨响，然後就坍塌下来。“这是哈工大的飞机，他们一直拍摄我们没有空调的寝室，侵犯我们主权，我已经忍了很久了。” 张希校长愤愤地说。同学们都鼓起掌来，为帝国有这样的校长感到自豪。</p><p>一会校长叫来秘书问:“那个飞机掉到什麽地方了？”“好像是温都尔汗一带。”秘书说。 张希校长一怔，说:“赶紧派人去查，看有什麽问题没有。”之后张希校长送我们到日新楼大门口，一直挥手到看不见我们。第四天我们听说温都尔汗那边出事了，我们很紧张。而这时校长叫我们过去。 他依然那么慈祥，让我们坐下说:“提高排名总是要有牺牲的。为吉大复兴牺牲的人是伟大的。”他这时低下头说:“但我必须承认，我当时摧毁敌人飞机的行为太鲁莽了，我在这里向全校学生和教职工道歉。我将向全校OA说明情况。”</p><p>我们顿时热泪盈眶，多好的校长呀，他在跟敌人斗争过程中的小失误竟然被他记在心里，还道了歉，我们在将来的工作中一定要向张希校长学，学他那宽广的胸怀，和勇于征服的精神。</p><h2 id="CS恩情课文-C爷爷用指针打掉Java对象">CS恩情课文-C爷爷用指针打掉Java对象</h2><p>从缓冲区访问回来的C爷爷全然不顾身体的疲惫，连夜找我们几个系统级编程语言商量内存分配的安排。谈得晚了，便送我们出函数，要全局变量送我们回内存。在去操作系统的路上，我们说：“ C爷爷，您回去休息吧。您刚从缓冲区回来。”;</p><p>C爷爷摇摇头，“不碍事，你们知道现在国际上有很多编程语言把系统级编程语言当作敌人，不断给我们制造不兼容，你们是系统级编程语言的未来，你们的事情便是系统级编程语言的事情，是头等大事。”我们都激动了，眼里噙着分号。多好的C爷爷呀。;</p><p>C爷爷抬头看看内存说：“如果世界真像这内存这么安静就好了，但是就有一些面向对象编程语言，像Jvav、像Python、像JvavScript、像PHP，要搞乱这个世界，他们是罪人。”;</p><p>说着，C爷爷弯下腰，从&lt;stdio.h&gt;里捡出一颗指针 int* ptr = (int *)0x（scanner变量的内存地址），然后看着内存说：“该死的垃圾回收。”;</p><p>说着他把指针奋力向上一掷。很快就见一格内存突然爆发出耀眼的2,147,483,648，然后就buffer overflow下来。“这是Java的scanner对象，他们一直在内存里盘旋，占据我们的空间，我已经忍了很久了。”C爷爷愤愤地说。系统级编程语言们都鼓起掌来，为系统级编程语言有这样的领导者感到自豪。;</p><p>一会C爷爷叫来编译器问：“那个指针落到什么地方了？”“好像memory leak了。”编译器说。;</p><p>C爷爷一怔，说：“赶紧派人去查，看有什么问题没有。”之后C爷爷送我们到大门口，一直挥手到看不见我们。;</p><p>第四天我们听说内存那边出事了，我们很紧张。而这时C爷爷叫我们过去。;</p><p>他依然那么慈祥，让我们坐下说：“便利总是要有牺牲的。为内存管理事业牺牲的指针是伟大的。”他这时低下头说：“但我必须承认，我当时利用指针进行内存管理忘记free掉的行为太鲁莽了，我在这里向x86-64指令集道歉。我将向x86-64指令集说明情况。”;</p><p>我们顿时热泪盈眶，多好的C爷爷呀，他在跟Java斗争过程中的小失误竟然被他记在心里，还道了歉，我们在将来的学习中一定要向C爷爷学，学他老人家那宽广的胸怀，和不耻下问的精神。;</p><h2 id="魔怔题解-AT-abc380-g-题解">魔怔题解(AT_abc380_g 题解)</h2><p>如你所见,这是一道diff为 $1995$ 的题目,看上去十分困难.</p><p>你十分惊慌，恐怕这道题你根本就无法做出来，马上就要面临着 rating $-114$ 的到来.</p><p>你冷静地思考了一会，发现这是你最擅长的逆序对题目，你逐渐有了一些自信。</p><p>你发现如果把序列分成三段： $[1,i−1],[i,i+k−1],[i+k,n]$ ，那么三段之间互相的逆序对影响不会改变，设总的逆序对数量为 $s$ ，当前长度为 $k$ 的区间里的逆序对数量为 $t$ ，则只要求出 $s−t$ ，再加上这段区间的期望逆序对数量，最后除以 $n−k+1$ 就好了。</p><p>前面这一步可以用树状数组快速解决，但是区间的期望逆序对数量该如何求出？</p><p>在耀眼的光芒中，你看见了可爱的 lxy，她只给了你六个字符 <a href="https://www.luogu.com.cn/problem/CF749E">CF749E</a> ，让你自己领会。</p><p>在艰难的探索中，你终于发现，因为两个数形成逆序对的概率是 $\frac{1}{2}$ ​，所以 $\frac12C_n^2$<br>就是长度为 $n$ 的排列的期望逆序对数。</p><p>你非常高兴，很快就打出了一份代码，它十分的正确，仅一遍就通过了样例，并获得了一个绿色的 AC。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n,k,a[N],sum,now,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;<span class="keyword">while</span>(x&lt;=n)c[x]+=k,x+=x&amp;-x;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="type">int</span> ans=<span class="number">0</span>;<span class="keyword">while</span>(x)ans+=c[x],x-=x&amp;-x;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));&#125;</span><br><span class="line">&#125;A;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y=mod<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*x%mod;</span><br><span class="line">x=x*x%mod;y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;--i)sum+=A.<span class="built_in">ask</span>(a[i]),A.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">A.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k;i&gt;=<span class="number">1</span>;--i)now+=A.<span class="built_in">ask</span>(a[i]),A.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">ans=sum-now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-k;++i)&#123;</span><br><span class="line">A.<span class="built_in">add</span>(a[i],<span class="number">-1</span>);</span><br><span class="line">now-=A.<span class="built_in">ask</span>(a[i]);now+=A.<span class="built_in">ask</span>(n)-A.<span class="built_in">ask</span>(a[i+k]);</span><br><span class="line">A.<span class="built_in">add</span>(a[i+k],<span class="number">1</span>);ans=(ans+sum-now)%mod;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(ans*<span class="built_in">inv</span>(n-k+<span class="number">1</span>)+k*(k<span class="number">-1</span>)%mod*<span class="built_in">inv</span>(<span class="number">4</span>))%mod;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你醒过来，原来这一切都是梦。</p><p>你根本就没有看 G，而是被 F 卡了半个多小时，注定只能获得一个失败的青色 perf。</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解谜杂项</title>
      <link href="/2024/10/31/30009%E8%A7%A3%E8%B0%9C%E6%9D%82%E9%A1%B9/"/>
      <url>/2024/10/31/30009%E8%A7%A3%E8%B0%9C%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>放一些小谜题.</p><h2 id="蜘蛛竞走">蜘蛛竞走</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B-x-x-x</span><br><span class="line">| | | |\</span><br><span class="line">x-x-x-x \</span><br><span class="line">| | | |\|</span><br><span class="line">A-x-x-x--x</span><br><span class="line">| | | |/|</span><br><span class="line">x-x-x-x /</span><br><span class="line">| | | |/</span><br><span class="line">x-x-x-x</span><br></pre></td></tr></table></figure><p>有这么一个网,A是你,B是你要追逐的对象.你先手,可以走到线另一端的x位置,同理B也可以沿着线游走.网格左边是5x4的矩形,网格右边连着一个度为5的大汇点.B判定为输当且仅当B无路可走,无路可走的定义是不存在一条路径使移动之后距离A长度为1.</p><p>我们发现,常规的拦截操作是无法拦住B的,你走一步他就能跑一步逃掉.如何破局呢?我们发现,初始时图上除了汇点之外,所有点可以按照奇偶关系涂两种颜色,相邻的点不同颜色,汇点不能涂任何颜色.初始时距离是偶数导致你移动变一种颜色B也会变一种颜色,导致你没法近身.此时,我们需要到汇点去刷自己的颜色,让他和B不一样,此时你能封住上下左三个方向的点,推进就能困死B,获得胜利.</p><h2 id="三神问题">三神问题</h2><p>三个神的贡品顺序你不知道(但是你知道贡品分别是给谁的),但是你可以向三个神随意提问,每次提问他们只会回答是或否.三神中一位只说真话,一位只说假话,还有一位可能说真话也可能说假话.而且,你不知道这个星球的语言,他们回答的 <code>YE5</code> 或者 <code>N0</code> 你不知道是对还是错的意思.如何区分他们以及贡品顺序呢?</p><p>笔者的做法是构造一个&quot;通用的问题&quot;,也就是说无论真假神都会说一样的话,比如 <em>你会一直说真话吗</em> 真会说真,假也会说真(他不会说真话,命题为假,但是他要说假话,所以也会说真)于是把真假和他们的语言建立了联系(变化神不用管他,肯定是说真的多),然后 <s>多提问几次把疯子去掉</s> 但是并不保险.</p><p>有一个神奇做法是把逻辑和语言建立联系,如 <em>如果命题为真,你会回答 <code>YE5</code> 是吗</em> 真会说真,假也会说真,从而把真假建立了联系(可以看到,就算 <code>YE5</code> 是假的,回答也是一样的).然后我们的提问先从指认一个绝对不是变化神的人,然后辨明他自己是不是假神,以及不知道的那个是不是真神,问题完成.</p><p>过程如下: <code>Q:如果左边那个是变化神,你会回答YE5吗</code> 如果回答是 <code>N0</code> :你不在和变化神交流的话,左边绝对不是变化神.如果你在和变化神交流的话,左边也肯定不是.如果答案是 <code>YE5</code> ,假如你还是在和变化神交流,那么左边右边都不是变化神,如果这个神不是变化神,右边就肯定不是变化神.综上,一个问题绝对能排除变化神.然后提问就简单了.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业余无线电通联日志</title>
      <link href="/2024/10/29/30008%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5%E9%80%9A%E8%81%94%E6%97%A5%E5%BF%97/"/>
      <url>/2024/10/29/30008%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5%E9%80%9A%E8%81%94%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="pre"><code>$&#123;pre&#125;</code></h2><blockquote><p>为什么要选择学习无线电?</p></blockquote><blockquote><p>— <strong>战备</strong> .</p></blockquote><p>是这样的,所以Flu很少通联,也注定很少通联(拿证俩月一次通联都没有的Flu是屑),学技术被pend了(哪有算法竞赛好玩)…</p><p>咳咳,总之这是一个通联日志,应该会很少更新.Flu打算回家的时候通联几个,或者下半年加一下吉大的无线电协会看看.</p><p>Flu准备一直考到C证,祝祂能够实现.</p><h2 id=""><code>$&#123;-&#125;</code></h2><p>主控:BG2MJG 长春市 高度:0m(地面) 泉盛UV-K5 5W</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">频率</th><th style="text-align:left">呼号</th><th style="text-align:left">QTH</th><th style="text-align:left">高度</th><th style="text-align:left">友台设备</th><th style="text-align:left">天线</th><th style="text-align:left">功率</th><th style="text-align:left">信号报告(发收)</th><th style="text-align:left">模式</th><th style="text-align:left">方式</th><th style="text-align:left">时间(UTC+8)</th><th style="text-align:left">QSL(发收)</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">样例</td><td style="text-align:left">439.675</td><td style="text-align:left">BD3HVO</td><td style="text-align:left">石家庄东三环</td><td style="text-align:left">10</td><td style="text-align:left">MD780</td><td style="text-align:left">吸盘</td><td style="text-align:left">5W</td><td style="text-align:left">59,59</td><td style="text-align:left">FM</td><td style="text-align:left">中继</td><td style="text-align:left">20241029:21:30</td><td style="text-align:left">N,N</td><td style="text-align:left">无</td></tr></tbody></table><p><code>|||||||||||||||</code></p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FluConf</title>
      <link href="/2024/10/28/30007FluConf/"/>
      <url>/2024/10/28/30007FluConf/</url>
      
        <content type="html"><![CDATA[<p>介绍一下Flu的运作原理.</p><h2 id="元素碑论-2015">元素碑论(2015)</h2><p>Flu希望全人类在灭绝的时候会把地球上的所有元素整整齐齐地提纯出来,码成一个一个金字塔,然后为后来文明所歌颂纯净,这是Flu心中的至上.铁金字塔,铜金字塔,镓金字塔,etc.</p><h2 id="朝圣-2020">朝圣(2020)</h2><p>Flu时常面向对面的楼,去看楼的玻璃,去体会悠闲的时光.时机是在下午,天空是深蓝色的,云朵可以有大块的也可以没有,季节必须是冬天通暖气之后.Flu在这时候会坐在桌子上,播放 <code>伴随着你</code> 或者 <code>鉱山町</code> 或者 <code>午后柠檬树下的阳光</code> .Flu时常会哭.这种方法能让Flu慢下来.唉,慢下来.</p><h2 id="元素加密法-2020">元素加密法(2020)</h2><p>Flu和隔壁班的王峥浩聊的很开,天天去做一些密码表啊,解密啊,etc类的事情,简单学习了一下密码.</p><p>首先,密码和压缩文件一样,要么密码表较大,密文较难破解,要么密码表较小,密文较长,破解较简单.</p><p>经过Flu的测试,最好用的莫过于Flu研发的元素加密法.隔壁王同学研发的音标加密法不好用(因为笔者的英语口语很烂),现在公布密码表,自行使用即可.</p><p><strong>弊端</strong> :因为E开头的元素比较少,这套密码表可能会从E下手被破解.但是密码表可以增加字符.</p><p>元素加密法, $\color{red}—红色是新加的元素$</p><table><thead><tr><th style="text-align:left">速译表</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">$\color{yellow}A$</td><td style="text-align:left">$Cm~248$ 锔</td><td style="text-align:left">$Ga~70$ 镓</td><td style="text-align:left">$Lu~175$ 镥</td></tr><tr><td style="text-align:left">$\color{red}A~5$</td><td style="text-align:left">$Cn~285$ 鿔</td><td style="text-align:left">$Gd~157$ 钆</td><td style="text-align:left">$Lv~293$ 𫟷</td></tr><tr><td style="text-align:left">$Ac~227$ 锕</td><td style="text-align:left">$Co~60$ 钴</td><td style="text-align:left">$Ge~73$ 锗</td><td style="text-align:left">$\color{yellow}M$</td></tr><tr><td style="text-align:left">$Ag~108$ 银</td><td style="text-align:left">$Cr~52$ 铬</td><td style="text-align:left">$\color{yellow}H$</td><td style="text-align:left">$\color{red}M~67$</td></tr><tr><td style="text-align:left">$Al~27$ 铝</td><td style="text-align:left">$Cs~133$ 铯</td><td style="text-align:left">$H~1$ 氢</td><td style="text-align:left">$Mc~288$ 镆</td></tr><tr><td style="text-align:left">$Am~243$ 镅</td><td style="text-align:left">$Cu~64$ 铜</td><td style="text-align:left">$He~4$ 氦</td><td style="text-align:left">$Md~258$ 钔</td></tr><tr><td style="text-align:left">$Ar~41$ 氩</td><td style="text-align:left">$\color{yellow}D$</td><td style="text-align:left">$Hf~179$ 铪</td><td style="text-align:left">$Mg~24$ 镁</td></tr><tr><td style="text-align:left">$As~75$ 砷</td><td style="text-align:left">$D~2$ 氘</td><td style="text-align:left">$Hg~201$ 汞</td><td style="text-align:left">$Mn~55$ 锰</td></tr><tr><td style="text-align:left">$At~210$ 砹</td><td style="text-align:left">$Db~268$ 𬭊</td><td style="text-align:left">$Ho~165$ 钬</td><td style="text-align:left">$Mo~96$ 钼</td></tr><tr><td style="text-align:left">$Au~197$ 金</td><td style="text-align:left">$Ds~281$ 𫟼</td><td style="text-align:left">$Hs~277$ 𬭶</td><td style="text-align:left">$Mt~276$ 鿏</td></tr><tr><td style="text-align:left">$\color{yellow}B$</td><td style="text-align:left">$Dy~163$ 镝</td><td style="text-align:left">$\color{yellow}I$</td><td style="text-align:left">$\color{yellow}N$</td></tr><tr><td style="text-align:left">$B~11$ 硼</td><td style="text-align:left">$\color{yellow}E$</td><td style="text-align:left">$I~127$ 碘</td><td style="text-align:left">$N~14$ 氮</td></tr><tr><td style="text-align:left">$Ba~137$ 钡</td><td style="text-align:left">$\color{red}E~8$</td><td style="text-align:left">$In~115$ 铟</td><td style="text-align:left">$Na~23$ 钠</td></tr><tr><td style="text-align:left">$Be~9$ 铍</td><td style="text-align:left">$Er~167$ 铒</td><td style="text-align:left">$Ir~192$ 铱</td><td style="text-align:left">$Nb~93$ 铌</td></tr><tr><td style="text-align:left">$Bh~270$ 𬭛</td><td style="text-align:left">$Es~252$ 锿</td><td style="text-align:left">$\color{yellow}J$</td><td style="text-align:left">$Nd~144$ 钕</td></tr><tr><td style="text-align:left">$Bi~211$ 铋</td><td style="text-align:left">$Eu~152$ 铕</td><td style="text-align:left">$\color{red}J~15$</td><td style="text-align:left">$Ne~20$ 氖</td></tr><tr><td style="text-align:left">$Bk~247$ 锫</td><td style="text-align:left">$\color{yellow}F$</td><td style="text-align:left">$\color{yellow}K$</td><td style="text-align:left">$Nh~284$ 鿭</td></tr><tr><td style="text-align:left">$Br~80$ 溴</td><td style="text-align:left">$F~19$ 氟</td><td style="text-align:left">$K~39$ 钾</td><td style="text-align:left">$Ni~59$ 镍</td></tr><tr><td style="text-align:left">$\color{yellow}C$</td><td style="text-align:left">$Fe~56$ 铁</td><td style="text-align:left">$Kr~84$ 氪</td><td style="text-align:left">$No~259$ 锘</td></tr><tr><td style="text-align:left">$C~12$ 碳</td><td style="text-align:left">$Fl~289$ 𫓧</td><td style="text-align:left">$\color{yellow}L$</td><td style="text-align:left">$Np~237$ 镎</td></tr><tr><td style="text-align:left">$Ca~40$ 钙</td><td style="text-align:left">$Fm~257$ 镄</td><td style="text-align:left">$\color{red}L~180$</td><td style="text-align:left">$\color{yellow}O$</td></tr><tr><td style="text-align:left">$Cd~112$ 镉</td><td style="text-align:left">$Fr~223$ 钫</td><td style="text-align:left">$La~139$ 镧</td><td style="text-align:left">$O~16$ 氧</td></tr><tr><td style="text-align:left">$Ce~140$ 铈</td><td style="text-align:left">$\color{yellow}G$</td><td style="text-align:left">$Li~7$ 锂</td><td style="text-align:left">$Og~295$ 鿫</td></tr><tr><td style="text-align:left">$Cf~251$ 锎</td><td style="text-align:left">$\color{red}G~90$</td><td style="text-align:left">$Lr~262$ 铹</td><td style="text-align:left">$Os~190$ 锇</td></tr><tr><td style="text-align:left">$Cl~36$ 氯</td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td></tr><tr><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td></tr><tr><td style="text-align:left">原</td><td style="text-align:left">表格</td><td style="text-align:left">的</td><td style="text-align:left">背面</td></tr><tr><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left"><code>---</code></td></tr><tr><td style="text-align:left">$\color{yellow}P$</td><td style="text-align:left">$Rb~85$ 铷</td><td style="text-align:left">$Sn~119$ 锡</td><td style="text-align:left">$\color{yellow}V$</td></tr><tr><td style="text-align:left">$P~31$ 磷</td><td style="text-align:left">$Re~186$ 铼</td><td style="text-align:left">$Sr~88$ 锶</td><td style="text-align:left">$V~51$ 钒</td></tr><tr><td style="text-align:left">$Pa~231$ 镤</td><td style="text-align:left">$Rf~265$ 𬬻</td><td style="text-align:left">$\color{yellow}T$</td><td style="text-align:left">$\color{yellow}W$</td></tr><tr><td style="text-align:left">$Pb~207$ 铅</td><td style="text-align:left">$Rg~280$ 𬬭</td><td style="text-align:left">$T~3$ 氚</td><td style="text-align:left">$W~184$ 钨</td></tr><tr><td style="text-align:left">$Pd~106$ 钯</td><td style="text-align:left">$Rh~103$ 铑</td><td style="text-align:left">$Ta~181$ 钽</td><td style="text-align:left">$\color{yellow}X$</td></tr><tr><td style="text-align:left">$Pm~145$ 钷</td><td style="text-align:left">$Rn~222$ 氡</td><td style="text-align:left">$Tb~159$ 铽</td><td style="text-align:left">$\color{red}X~107$</td></tr><tr><td style="text-align:left">$Po~209$ 钋</td><td style="text-align:left">$Ru~101$ 钌</td><td style="text-align:left">$Tc~98$ 锝</td><td style="text-align:left">$Xe~131$ 氙</td></tr><tr><td style="text-align:left">$Pr~141$ 镨</td><td style="text-align:left">$\color{yellow}S$</td><td style="text-align:left">$Te~128$ 碲</td><td style="text-align:left">$\color{yellow}Y$</td></tr><tr><td style="text-align:left">$Pt~195$ 铂</td><td style="text-align:left">$S~32$ 硫</td><td style="text-align:left">$Th~232$ 钍</td><td style="text-align:left">$Y~89$ 钇</td></tr><tr><td style="text-align:left">$Pu~244$ 钚</td><td style="text-align:left">$Sb~122$ 锑</td><td style="text-align:left">$Ti~48$ 钛</td><td style="text-align:left">$Yb~173$ 镱</td></tr><tr><td style="text-align:left">$\color{yellow}Q$</td><td style="text-align:left">$Sc~45$ 钪</td><td style="text-align:left">$Tl~204$ 铊</td><td style="text-align:left">$\color{yellow}Z$</td></tr><tr><td style="text-align:left">$\color{red}Q~29$</td><td style="text-align:left">$Se~79$ 硒</td><td style="text-align:left">$Tm~169$ 铥</td><td style="text-align:left">$\color{red}Z~86$</td></tr><tr><td style="text-align:left">$\color{yellow}R$</td><td style="text-align:left">$Sg~271$ 𬭳</td><td style="text-align:left">$Ts~294$ 鿬</td><td style="text-align:left">$Zn~65$ 锌</td></tr><tr><td style="text-align:left">$\color{red}R~37$</td><td style="text-align:left">$Si~28$ 硅</td><td style="text-align:left">$\color{yellow}U$</td><td style="text-align:left">$Zr~91$ 锆</td></tr><tr><td style="text-align:left">$Ra~226$ 镭</td><td style="text-align:left">$Sm~150$ 钐</td><td style="text-align:left">$U~238$ 铀</td><td style="text-align:left"><code>---</code></td></tr></tbody></table><table><thead><tr><th style="text-align:left">速查表</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">$1~H$</td><td style="text-align:left">$2~D$</td><td style="text-align:left">$3~T$</td><td style="text-align:left">$4~He$</td></tr><tr><td style="text-align:left">$\color{red}5~A$</td><td style="text-align:left">$7~Li$</td><td style="text-align:left">$\color{red}8~E$</td><td style="text-align:left">$9~Be$</td></tr><tr><td style="text-align:left">$11~B$</td><td style="text-align:left">$12~C$</td><td style="text-align:left">$14~N$</td><td style="text-align:left">$\color{red}15~J$</td></tr><tr><td style="text-align:left">$16~O$</td><td style="text-align:left">$19~F$</td><td style="text-align:left">$20~Ne$</td><td style="text-align:left">$23~Na$</td></tr><tr><td style="text-align:left">$24~Mg$</td><td style="text-align:left">$27~Al$</td><td style="text-align:left">$28~Si$</td><td style="text-align:left">$\color{red}29~Q$</td></tr><tr><td style="text-align:left">$31~P$</td><td style="text-align:left">$32~S$</td><td style="text-align:left">$36~Cl$</td><td style="text-align:left">$\color{red}37~R$</td></tr><tr><td style="text-align:left">$39~K$</td><td style="text-align:left">$40~Ca$</td><td style="text-align:left">$41~Ar$</td><td style="text-align:left">$45~Sc$</td></tr><tr><td style="text-align:left">$48~Ti$</td><td style="text-align:left">$51~V$</td><td style="text-align:left">$52~Cr$</td><td style="text-align:left">$55~Mn$</td></tr><tr><td style="text-align:left">$56~Fe$</td><td style="text-align:left">$59~Ni$</td><td style="text-align:left">$60~Co$</td><td style="text-align:left">$64~Cu$</td></tr><tr><td style="text-align:left">$65~Zn$</td><td style="text-align:left">$\color{red}67~M$</td><td style="text-align:left">$70~Ga$</td><td style="text-align:left">$73~Ge$</td></tr><tr><td style="text-align:left">$75~As$</td><td style="text-align:left">$79~Se$</td><td style="text-align:left">$80~Br$</td><td style="text-align:left">$84~Kr$</td></tr><tr><td style="text-align:left">$85~Rb$</td><td style="text-align:left">$\color{red}86~Z$</td><td style="text-align:left">$88~Sr$</td><td style="text-align:left">$89~Y$</td></tr><tr><td style="text-align:left">$\color{red}90~G$</td><td style="text-align:left">$91~Zr$</td><td style="text-align:left">$93~Nb$</td><td style="text-align:left">$96~Mo$</td></tr><tr><td style="text-align:left">$98~Tc$</td><td style="text-align:left">$101~Ru$</td><td style="text-align:left">$103~Rh$</td><td style="text-align:left">$106~Pd$</td></tr><tr><td style="text-align:left">$\color{red}107~X$</td><td style="text-align:left">$108~Ag$</td><td style="text-align:left">$112~Cd$</td><td style="text-align:left">$115~In$</td></tr><tr><td style="text-align:left">$119~Sn$</td><td style="text-align:left">$122~Sb$</td><td style="text-align:left">$127~I$</td><td style="text-align:left">$128~Te$</td></tr><tr><td style="text-align:left">$131~Xe$</td><td style="text-align:left">$133~Cs$</td><td style="text-align:left">$137~Ba$</td><td style="text-align:left">$139~La$</td></tr><tr><td style="text-align:left">$140~Ce$</td><td style="text-align:left">$141~Pr$</td><td style="text-align:left">$144~Nd$</td><td style="text-align:left">$145~Pm$</td></tr><tr><td style="text-align:left">$150~Sm$</td><td style="text-align:left">$152~Eu$</td><td style="text-align:left">$157~Gd$</td><td style="text-align:left">$159~Tb$</td></tr><tr><td style="text-align:left">$163~Dy$</td><td style="text-align:left">$165~Ho$</td><td style="text-align:left">$167~Er$</td><td style="text-align:left">$169~Tm$</td></tr><tr><td style="text-align:left">$173~Yb$</td><td style="text-align:left">$175~Lu$</td><td style="text-align:left">$179~Hf$</td><td style="text-align:left">$\color{red}180~L$</td></tr><tr><td style="text-align:left">$181~Ta$</td><td style="text-align:left">$184~W$</td><td style="text-align:left">$186~Re$</td><td style="text-align:left">$190~Os$</td></tr><tr><td style="text-align:left">$192~Ir$</td><td style="text-align:left">$195~Pt$</td><td style="text-align:left">$197~Au$</td><td style="text-align:left">$201~Hg$</td></tr><tr><td style="text-align:left">$204~Tl$</td><td style="text-align:left">$207~Pb$</td><td style="text-align:left">$209~Po$</td><td style="text-align:left">$210~At$</td></tr><tr><td style="text-align:left">$211~Bi$</td><td style="text-align:left">$222~Rn$</td><td style="text-align:left">$223~Fr$</td><td style="text-align:left">$226~Ra$</td></tr><tr><td style="text-align:left">$227~Ac$</td><td style="text-align:left">$231~Pa$</td><td style="text-align:left">$232~Th$</td><td style="text-align:left">$237~Np$</td></tr><tr><td style="text-align:left">$238~U$</td><td style="text-align:left">$243~Am$</td><td style="text-align:left">$244~Pu$</td><td style="text-align:left">$247~Bk$</td></tr><tr><td style="text-align:left">$248~Cm$</td><td style="text-align:left">$251~Cf$</td><td style="text-align:left">$252~Es$</td><td style="text-align:left">$257~Fm$</td></tr><tr><td style="text-align:left">$258~Md$</td><td style="text-align:left">$259~No$</td><td style="text-align:left">$262~Lr$</td><td style="text-align:left">$265~Rf$</td></tr><tr><td style="text-align:left">$268~Db$</td><td style="text-align:left">$270~Bh$</td><td style="text-align:left">$271~Sg$</td><td style="text-align:left">$276~Mt$</td></tr><tr><td style="text-align:left">$277~Hs$</td><td style="text-align:left">$280~Rg$</td><td style="text-align:left">$281~Ds$</td><td style="text-align:left">$284~Nh$</td></tr><tr><td style="text-align:left">$285~Cn$</td><td style="text-align:left">$288~Mc$</td><td style="text-align:left">$289~Fl$</td><td style="text-align:left">$293~Lv$</td></tr><tr><td style="text-align:left">$294~Ts$</td><td style="text-align:left">$295~Og$</td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h2 id="算力不停机-20241029">算力不停机(20241029)</h2><p>Flu脑子太混沌了,一刻不停地在想事情,根本不会慢下来,根本不会停下来那颗每时每刻产生新点子的脑子.</p><p>不过最近好像有招了,那就是少听歌,上床之后监听呼吸声,可以减少好多好多胡思乱想,快速入睡.<br>终于让Flu找到对抗心不静的方法了.</p><h2 id="小bug-20241129">小bug(20241129)</h2><p>所以Flu这么讲逻辑,自身有没有什么bug或者能钻的类似bug的漏洞?</p><p>别说,还真有.Flu自己钻自己的漏洞,是这样的.</p><p>比方说,按照&quot;贯历&quot;纪年,Flu是应当去宿舍外面自习以躲避陶鑫打游戏大喊的声音,但是Flu比较懒,不想背着电脑整天跑,于是就想办法运用一些规则允许的东西躲避自习.</p><p>Flu定下的规则一般都是最快第二天生效的,而且规则有效期非常短(因为自己是兴趣支配的),打扫卫生的那一天,规则不会生效(因为Flu打扫起来需要好久)</p><p>于是就有bug了:Flu每天标榜打扫卫生,然后每天又推掉打扫卫生,于是死循环,自己还是没有出去上自习.<br>这个bugFlu不打算修,因为自己真的很懒.</p><h2 id="读音">读音(----)</h2><p>在这里放一下Flu的读音.</p><p><code>Cache</code> “塞(sei)诶是”.<br><code>Tarjan</code> “他见”<br><code>Dijkstra</code> “滴级啊stra”<br><code>BG2MJG</code> “避寄二哎母勾寄”</p><h2 id="小小药娘-20241209">小小药娘(20241209)</h2><p>Flu最近备考的时候就会紧张,然后就会干一些增加树深度的事情…最近Flu不小心加了一个成分复杂的群,第一次接触到药娘这个群体.关于药娘是什么请参阅互联网.Flu认为众 <code>MtF</code> 们是一群非常强的群体啊,他们敢于和现世做斗争用于表现自己这一点就很可贵.唉,细数Flu又干成了什么呢?什么都是失败的,好想像他们一样休学去搞自己的技术啊…唉.Flu一定要有自己的技术!!!</p><h2 id="双标漏洞-20241212">双标漏洞(20241212)</h2><p>与老妈对线,被老妈指出逻辑错误(查实)…</p><p><strong>Flu不差钱,但是一回家就拿钱说事.</strong> 怎么办???</p><h2 id="导员谈话-20241212">导员谈话(20241212)</h2><p>今天和导员聊了一下,确定了未来的方向:</p><ol><li>保研(成绩好毕竟没坏处,而且77名可以冲一下本校,有总比没有强)</li><li>做项目,进组可以用 <code>ccst.jlu.edu.cn</code> 先查哪些师资队伍是做什么的 (进组或者github上发东西都可以的)</li><li>走选调生(公务员),查阅河北省的选调政策是什么</li><li>项目分纵向项目和横向项目,查阅资料.</li></ol><h2 id="砸钱计划-20241212">砸钱计划(20241212)</h2><blockquote><p>是不是你喜欢的?是不是正经事? -母<br>劳逸结合吧. -母</p></blockquote><p>最近Flu举办一个砸钱计划,购买设备仪器,进行一番研究.<br>且看Flu能搞出什么新花样吧.<br>物品清单:</p><ul><li>3D打印机(A1mini)以及对应耗材(1599+60)</li><li>工具(电烙铁套装,手电钻,麻花钻头,)</li></ul><p>也许会购买(Pending…):</p><ul><li>天线分析仪(否了,你先通联上再说…也许有用,但是Flu还没有着手搞八木天线,因为不懂原理呢还)</li><li>移动电源(争议最大)-不是刚需- 很贵啊,两千多+ 买了以后能在宿舍做饭+ 不怕断电,晚上也能玩很大的游戏(但是你一定要熬夜吗?)+ 能出去架短波电台(你得有个车)+ 双十二降价-320+ 家里并没有这样的设备(<strong>综上,不买,先等你有短波电台再说</strong>)(从此再也不怕断电,但是Flu真的有什么必须彻夜干的东西吗???如果下定决心干事情了为什么不冲图书馆食堂教室???争议很大啊,但是很久就想买了.)</li><li>电饼铛(移动电源都不买了,你靠边站)</li><li>馈线</li><li>夜视仪,红外成像仪,盖格计数器,EDTA(核沾染洗消用的试剂)</li><li>移动硬盘(为什么我整天玩电脑不喜欢固件呢…真奇怪)</li><li>钻头系列(沉孔钻头(Flu不做木工,不买)三尖麻花钻头(同理)宝塔钻头(你就是觉得宝塔钻头好看)霸王钻头(Flu不钻瓷砖谢谢))</li><li>马克笔</li><li>新手机(要求能root,价钱再议)</li></ul><h2 id="语句…-不详">语句…(不详)</h2><blockquote><p>吃不穷,喝不穷,算计不到才受穷. -父<br>父经常用这句话告诉Flu不要在吃上省钱…</p></blockquote><blockquote><p>我可以糊弄我自己,但别人不能糊弄我. -4AM居士<br>好有道理!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语文偏差</title>
      <link href="/2024/10/28/30006%E8%AF%AD%E6%96%87%E5%81%8F%E5%B7%AE/"/>
      <url>/2024/10/28/30006%E8%AF%AD%E6%96%87%E5%81%8F%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<p>Flu语文不好,在这里记录一下我觉得这句话是什么意思以及这句话实际上是什么意思.</p><h2 id="1">1</h2><p>他们连我地下室里面装的什么东西都说出来了,我却惊奇的发现我没有地下室.</p><p>这句话并不是在讽刺有无形的大手在操作你,逼你去做某些事情<br>实际上是讽刺造谣的瞎说…</p><h2 id="2">2</h2><p>科目四有个人在推销,说五十块钱能刷题,考不过了包退,天花乱坠的…</p><p>实际上,这是针对老年人记性不好的,报个课看一下管过的.<br>你们大学生看个屁(Flu差点就信了,还好Flu是赌狗)</p><h2 id="3">3</h2><p>淘宝买箱子可能看见 <strong>手工测量可能存在轻微误差</strong> 的文案,这其实是一层叠甲,就是箱子本身太小了,卖家想要箱子更大一点卖更多钱的话术,并不是真的误差,商家自己心里肯定有逼数.同样,还是那句话,便宜没好货,贵也不一定有好货.世界是一个巨大的草台班子.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶级对抗方式</title>
      <link href="/2024/10/28/30005%E9%98%B6%E7%BA%A7%E5%AF%B9%E6%8A%97%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/10/28/30005%E9%98%B6%E7%BA%A7%E5%AF%B9%E6%8A%97%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>如何写一个十分反人类但是没有办法破的程序?(显然,Flu红温了)</p><h2 id="定期退出登录">定期退出登录</h2><p>不定期就让你重新登陆一次,刷掉所有的机器账户.</p><h2 id="插入广告">插入广告</h2><p>广告联盟.离线广告也是可取的.</p><h2 id="更新版本">更新版本</h2><p>没人知道你自己写的APP新版本会彻底废掉还是咋样.(可以在登陆的时候返回更新版本的弹窗,卡掉通过启动断网逃避系统更新的傻逼)</p><h2 id="没网直接退出">没网直接退出</h2><p>不解释.</p><h2 id="提交伪装">提交伪装</h2><p>提交某表单时,用户点提交之后不显示立刻提交,而是加一段动画(比方说一个时针慢慢转一圈啥的)硬控用户,同时底端添加广告.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微积分学习笔记</title>
      <link href="/2024/10/26/00002%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/26/00002%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前面的求定积分啊啥的没来得及补笔记,那是微积分AI的事了…<br>xxx<br>$$\color{red}挖坑等填$$<br><strong>重要公式</strong><br>$$\sin\alpha=\cos(\alpha-\frac\pi2)$$<br>(加是提前,也就是坐标向左移,时间也一样,P在O后,应当加某个偏移量实现O的振动函数计算.)</p><p><strong>和差化积</strong>:<br>$$\sin\alpha+\sin\beta=2\sin\frac{\alpha+\beta}2\cos\frac{\alpha-\beta}2$$<br>$$\sin\alpha-\sin\beta=2\cos\frac{\alpha+\beta}2\sin\frac{\alpha-\beta}2$$<br>另外还有<br>$$\cos\alpha+\cos\beta=2\cos\frac{\alpha+\beta}2\cos\frac{\alpha-\beta}2$$<br>$$\cos\alpha-\cos\beta=-2\sin\frac{\alpha+\beta}2\sin\frac{\alpha-\beta}2$$<br><strong>积化和差</strong>:<br>$$\sin\alpha\cos\beta=\frac12(\sin(\alpha+\beta)+\sin(\alpha-\beta))$$<br>另外还有<br>$$\cos\alpha\sin\beta=\frac12(\sin(\alpha+\beta)-\sin(\alpha-\beta))$$<br>$$\cos\alpha\cos\beta=\frac12(\cos(\alpha+\beta)+\cos(\alpha-\beta))$$<br>$$\sin\alpha\sin\beta=-\frac12(\cos(\alpha+\beta)-\cos(\alpha-\beta))$$<br><strong>基本不等式</strong>：<br>$$\sqrt{\frac{a^2+b^2}{2}}\ge\frac{a+b}{2}\ge\sqrt{ab}\ge\frac{1}{\frac{1}{a}+\frac{1}{b}}$$</p><h2 id="求积分">求积分</h2><p>$$\begin{aligned}\int\frac{1}{x}\mathrm{d}x&amp;=\ln |x|+C\\int\frac{1}{\sqrt{1-x^2}}\mathrm{d}x&amp;=\arcsin x+C\\int-\frac{1}{\sqrt{1-x^2}}\mathrm dx&amp;=\arccos x+C\\int\frac{1}{\cos^2x}\mathrm{d}x=\int\sec^2x&amp;=\tan x+C\\int\frac{1}{\sin^2x}\mathrm{d}x=\int\csc^2x&amp;=-\cot x+C\\int\sec x\tan x\mathrm{d}x&amp;=\sec x+C\\int\csc x\cot x\mathrm{d}x&amp;=-\csc x+C\\int\tan x\mathrm{d}x&amp;=-\ln |\cos x|+C\\int\cot x\mathrm{d}x&amp;=\ln|\sin x|+C\\int\sec x\mathrm{d}x&amp;=\ln|\sec x+\tan x|+C\\int\csc x\mathrm{d}x&amp;=\ln|\csc x-\cot x|+C\\int\arcsin x\mathrm{d}x&amp;=x\arcsin x+\sqrt{1-x^2}+C\\int\arccos x\mathrm{d}x&amp;=x\arccos x-\sqrt{1-x^2}+C\\int\arctan x\mathrm{d}x&amp;=x\arctan x-\frac{\ln|x^2+1|}{2}+C\\int\frac{1}{a^2+x^2}\mathrm{d}x&amp;=\frac{1}{a}\arctan{\frac{x}{a}}+C\\int\frac{1}{x^2-a^2}\mathrm{d}x&amp;=\frac{1}{2a}\ln|\frac{x-a}{x+a}|+C\\int\frac{1}{\sqrt{a^2-x^2}}\mathrm{d}x&amp;=\arcsin\frac{x}{a}+C\\int\frac{1}{\sqrt{x^2-a^2}}\mathrm{d}x&amp;=\ln|x+\sqrt{x^2-a^2}|+C\\int\frac{1}{\sqrt{x^2+a^2}}\mathrm{d}x&amp;=\ln(x+\sqrt{x^2+a^2})+C\end{aligned}$$</p><h3 id="第一换元法-吃数法">第一换元法(吃数法)</h3><p>$$\boxed{\int f(\phi(x))\phi’(x)\mathrm{d}x=\Big[\int f(u)\mathrm{d}u\Big]_{u=\phi(x)}}$$<br>其实就是吃掉部分函数,扔到$\mathrm dx$里面(还原一下),如:(注意吃掉的$\ln x$不加绝对值)<br>$$eg:\int\frac{1}{x\ln x}\mathrm dx=\int\frac{1}{\ln x}\mathrm{d}\ln x=\ln|\ln x|+C$$<br>当然对于复杂函数还是老老实实代换吧…</p><h3 id="第二换元法-反函数法">第二换元法(反函数法)</h3><p>$$\boxed{\int f(x)\mathrm dx=\Big[\int f[\psi(t)]\psi’(t)\mathrm dt\Big]_{t=\psi^{-1}(x)}}$$<br>应用:三角换元.利用两个众所周知的公式来换元消根号的:<br>$$\boxed{\begin{aligned}\sin^2x+\cos^2x&amp;=1\\tan^2x-\sec^2x&amp;=1\end{aligned}}$$</p><h3 id="分部积分法-真神">分部积分法(真神)</h3><p>$$\boxed{\int uv’\mathrm dx=uv-\int vu’\mathrm dx}$$</p><h2 id="第七章-空间解析几何">第七章 空间解析几何</h2><p>空间直角坐标系:左下角斜着伸出来叫x,横着叫y,往上走的叫z.<br>八个卦限,想象两个连成串的U形排在周围.</p><h3 id="向量">向量</h3><p>向量的样子:$\bold a=2\bold i+3\bold j+4\bold k$或$\bold a={2,3,4}$</p><p><strong>求夹角</strong>:<br>$$\cos\theta=\frac{\bold{a\cdot b}}{|\bold a||\bold b|}$$</p><p><strong>求投影</strong>:$\bold b$在$\bold a$上投影记作:<br>$$\mathrm{Prj}_\bold a\bold b=|\bold b|\cos\theta$$</p><p>空间两点距离,向量加减运算略过,讲一个很重要的东西:<strong>向量叉乘</strong>.<br>$$\bold a=(a,b,c),\bold b=(d,e,f)$$<br>$$\bold a\times\bold b=\begin{vmatrix}\bold i&amp;\bold j&amp;\bold k\a&amp;b&amp;c\d&amp;e&amp;f\end{vmatrix}$$<br>向量叉乘的结果是个向量.它的方向是右手由$\bold a$握向$\bold b$时大拇指的方向.</p><p>向量点乘的结果为0代表两向量垂直,叉乘结果为零代表两向量共线.叉乘结果的意义是,求出来的向量的大小就是向量$\bold a,\bold b$围成平行四边形的面积.</p><p>呐,判断平行才不需要这么复杂的办法.要知道,<strong>当$\bold a$与$\bold b$平行时,$\bold{a,b}$每一项都成比例</strong>.</p><p>向量的<strong>混合积</strong>:<br>$$\bold a=(a,b,c),\bold b=(d,e,f),\bold c=(g,h,i)$$<br>$$[\bold{abc}]=(\bold a\times\bold b)\cdot\bold c=\begin{vmatrix}a&amp;b&amp;c\d&amp;e&amp;f\g&amp;h&amp;i\end{vmatrix}$$<br>且有<br>$$[\bold{abc}]=[\bold{bca}]=[\bold{cab}]$$<br>混合积的含义是$\bold{a,b,c}$围成平行六面体的体积,混合积为0的含义是三向量共平面.</p><h3 id="平面">平面</h3><p>平面公式的样子:<br>$$Ax+By+Cz+D=0$$</p><p><strong>过三点的平面方程</strong>:直接设,然后代数,求出$A,B,C$都用$D$表示的式子,然后因为右端为0直接把$D$消了.</p><p><strong>平面的法向量</strong>: 若$\pi:Ax+By+Cz+D=0$,则$\bold n={A,B,C}\perp\pi$.</p><p><strong>点法求面</strong>:记结论:<br>$$\small若平面\pi经过点M(x_0,y_0,z_0)且法向量为\bold n{A,B,C},\则\pi:A(x-x_0)+B(y-y_0)+C(z-z_0)=0$$</p><p><strong>点到面距离</strong>:</p><p>$$\boxed{d=\frac{|Ax_0+By_0+Cz_0+D|}{\sqrt{A^2+B^2+C^2}}}$$</p><h3 id="直线">直线</h3><p>直线的样子:<br>$$\begin{cases}x+2y+3+4=0\5x+6y+7z=0\end{cases}\small或\normalsize \frac{x+3}{11}=\frac{y}{45}=\frac{z-7}{14}$$</p><p><strong>求两个面交线方程</strong>:直接联立.</p><p><strong>切平面经过该直线</strong>:设(平面1)+$\lambda$(平面2)=0然后直接出法向量了,根本不用苦苦求切平面.</p><p><strong>直线的平行线</strong>(方向向量):<br>$$\small 若\normalsize L:\begin{cases}A_1x+B_1y+C_1z+D_1=0\A_2x+B_2y+C_2z+D_2=0\end{cases},\small则\boxed{\normalsize\bold s={A_1,B_1,C_1}\times{A_2,B_2,C_2}//L}$$<br>(如果给了上面俩等号的那个式子就感恩戴德吧,${11,45,14}$直接就是方向向量)</p><p><strong>点方向求线</strong>:<br>$$若L过点M(x_0,y_0,z_0)且方向向量为\bold s{l,m,n},\则\boxed{L:\frac{x-x_0}{l}=\frac{y-y_0}{m}=\frac{z-z_0}{n}}$$</p><p><strong>点到直线距离</strong>(好麻烦啊):<br>$$先求点M(x_0,y_0,z_0)到直线L(其方向向量\bold s={l,m,n})的投影点M_P(x_p,y_p,z_p).$$<br>$$联立\begin{cases}l(x-x_0)+m(y-y_0)+n(z-z_0)=0\直线方程\end{cases}求解M_P$$</p><h3 id="曲线">曲线</h3><p><strong>求$\begin{cases}x=x(t)\y=y(t)\z=z(t)\end{cases}$形式的曲线在某点切线与法平面</strong>:在点$(x(t_0),y(t_0),z(t_0))$的切线方程为:<br>$$\boxed{\frac{x-x(t_0)}{x’(t_0)}=\frac{y-y(t_0)}{y’(t_0)}=\frac{z-z(t_0)}{z’(t_0)}}$$<br>法平面方程为:<br>$$\boxed{x’(t_0)[x-x(t_0)]+y’(t_0)[y-y(t_0)]+z’(t_0)[z-z(t_0)]=0}$$</p><p><strong>写在一起的曲线…</strong></p><p>如$\begin{cases}x^2+y^2+z^2=6\z=x^2+y^2\end{cases}$某点切线方程为:<br>$$\boxed{\frac{x-x_0}{1}=\frac{y-y_0}{y’_x(x_0)}=\frac{z-z_0}{z’_x(x_0)}}$$<br>法平面方程为:<br>$$\boxed{(x-x_0)+y’_x(y-y_0)+z’_x(z-z_0)=0}$$</p><h3 id="曲面">曲面</h3><p><strong>求某点的切平面和法线</strong>:切平面方程为:<br>$$\boxed{F’_x(x_0,y_0,z_0)(x-x_0)+F’_y(x_0,y_0,z_0)(y-y_0)+F’_z(x_0,y_0,z_0)(z-z_0)=0}$$<br>法线方程为:<br>$$\boxed{\frac{x-x_0}{F’_x(x_0,y_0,z_0)}=\frac{y-y_0}{F’_y(x_0,y_0,z_0)}=\frac{z-z_0}{F’_z(x_0,y_0,z_0)}}$$</p><h2 id="第一章-多元函数的极限和连续性">第一章 多元函数的极限和连续性</h2><p>平面点集写作$\bold R^n$,线性运算和线性空间同向量和坐标的运算.距离啊啥的公式就是多了几项而已.n维$\bold{Euclid}$空间就是n维空间.</p><p><strong>邻域</strong>：$U(P_0,\delta)$就是距离点$P_0$小于$\delta$的区域。想象一个圆或者球体(不算边界).去心邻域就是不算那个点而已,写作$\mathring U$</p><p><strong>内点,外点,边界点</strong>,就是周围有没有外点.证明很麻烦,写一下:设点集$E\subset \bold R^2$,对于点$P_0\in E$,若$\exists \delta&gt;0$,使得$U(P_0,\delta)\subset E$,则称$P_0$为点集$E$的<strong>内点</strong>.<br>边界点,外点同理,就这么证就完了.</p><p><strong>开集</strong>:点集中的每一点都是它的内点,就叫开集.人话:不算边界的点集就是开集,想象一棵树刨掉树皮.</p><p><strong>边界</strong>:写作$\partial E$,想象刨掉的树皮…</p><p><strong>连通性</strong>:总存在完全属于点集的折线连接两点,这个点集称为连通的.想象一块一块的东西</p><p>开区域:连通的开集.简称<strong>区域</strong>.闭区域就是开集并上边界,写作$\overline E=E\cup\partial E$.</p><p><strong>聚点</strong>:附近有内点的点.内点必定是,外点必定不是,边界点可能是也可能不是,比如$E={(x,y)|x^2+y^2=0$或$1\le x^2+y^2&lt;4 }$中的0是边界点但不是聚点.闭集:所有聚点都属于它的点集.</p><p>开集的余集是闭集,闭集的余集是开集.</p><p>多元函数:好几个变量的函数(废话)…</p><p>题型:画图,指出是否为开区域,<strong>逆变换</strong>,重点讲逆变换.</p><p>设$f(x+y,\frac{y}{x})=x^2+y^2$求$f(x,y)$</p><p>思路:设$m=x+y$,$n=\frac{y}{x}$<br>分别求出x=啥啥,y=啥啥,然后回代式子即可,记得别忘了把mn用xy代替.</p><p>练习:设$f(\sqrt{x^2+y^2},\arctan\frac{y}{x})=\frac{xy}{(x^2+y^2)^2}$求$f(x,y)$</p><hr><p><strong>二重极限</strong>:xy同时取极限得到的值.证明同极限的证明.注意,xy以任何方式趋于定点极限都一样才有这个极限成立.</p><p>举个栗子:设$f(x,y)=\frac{xy}{x^2+y^2}$</p><p>沿x轴沿y轴都好证,举个特例:沿直线y=kx时,极限不存在:<br>$$\lim_{(x,kx)\to(0,0)}\frac{xy}{x^2+y^2}=\lim_{x\to0}\frac{kx^2}{x^2+k^2x^2}=\frac{k}{1+k^2}\neq0$$</p><p>这个时候就要靠构造能力了…构造抛物线啊,直线啊,啥的.</p><p>求极限可以构造.构造不等式或者凑配,如求</p><p>$$\begin{aligned}\lim_{(x,y)\to(1,0)}\frac{\sin(xy)}{y}&amp;=\lim_{(x,y)\to(1,0)}\Big[\frac{\sin(xy)}{xy}\cdot x\Big]\&amp;=\lim_{xy\to0}\frac{\sin(xy)}{xy}\cdot\lim_{x\to1}=1\end{aligned}$$</p><p><strong>二次极限</strong>:先求一次极限,再求一次极限…可以证明,$f(x,y)$在点$(x_0,y_0)$处的二重极限和两个二次极限都存在时必相等,此时二次极限可以交换顺序.</p><p>多元函数<strong>连续性</strong>,对xy两元连续$\implies$对x,y连续,这个不能反过来推.一致连续和单元函数一毛一样.</p><hr><h2 id="第二章-多元函数的微分学及其应用">第二章 多元函数的微分学及其应用</h2><p>偏导…著名的$\partial$符号将在这里学习到…</p><p><strong>求偏导</strong>:把要求的变量正常求导,对于不需要求偏导的看成常数.</p><p>eg: $r=\sqrt{x^2+y^2+z^2}$ 求偏导数(没说哪个变元就都求导就好)<br>$$\frac{\partial r}{\partial x}=\frac{2x}{2\sqrt{x^2+y^2+z^2}}=\frac{x}{r}$$<br>根据自变量x,y,z在函数表达式中的对称性,可得<br>$$\frac{\partial r}{\partial y}=\frac{y}{r}<br>,\frac{\partial r}{\partial z}=\frac{z}{r}$$<br>几何意义:一张米皮,凹凸不平的,拿刀切开,变成一条一条的,那个条求导会吧,斜率就是求出来的偏导(凉皮…)</p><p>已知函数xx,求在(xxx)点偏导写法:</p><p>$$\boxed{\frac{\partial W}{\partial x}\Big|_{x=1,y=2,z=3}=xx}$$</p><p><strong>关系</strong>:如下:<br>$$偏导连续\implies函数可微\implies\begin{cases}函数连续\\cancel{\Updownarrow}\函数能偏导\end{cases}$$<br><strong>高阶偏导</strong>:看清次序,先对谁求导,结果再求一次偏导即可.(下面的是先对y再对x,虽然和先对x偏导和再对y偏导结果一样)<br>$$f_{yx}(x,y)=z_{yx}=\frac{\partial^2f}{\partial y\partial x}=\frac{\partial^2z}{\partial y\partial x}=\frac{\partial}{\partial x}\Big(\frac{\partial f}{\partial y}\Big)$$</p><p><strong>多元复合函数偏导</strong>:$F=u+v+w,u=x+y,v=,w=$形如这样的式子求$\frac{\partial F}{\partial x}$公式如下:<br>$$\boxed{\frac{\partial F}{\partial x}=\frac{\partial F}{\partial u}\cdot\frac{\partial u}{\partial x}+\frac{\partial F}{\partial v}\cdot\frac{\partial v}{\partial x}+\frac{\partial F}{\partial w}\cdot\frac{\partial w}{\partial x}}$$<br>其实不仅仅考试,如果出了一个很恶心的式子也可以这么反着先设数再回代,如$z=e^{xy}\sin(x+y)$就可以$xy$设一个$u$,$x+y$设一个$v$.</p><p><strong>多元隐函数的偏导</strong>:已知$x^2+2y^2+3z^2+xy+xz+yz=0$,求$\Large\frac{\partial z}{\partial x}$.解法如下:<br>首先要了解一个公式(别问我为啥,我就是一个复读机,渴望考试及格的无情的复读机):<br>$$\boxed{\frac{\partial z}{\partial x}=\large-\frac{\frac{\partial F}{\partial x}}{\frac{\partial F}{\partial z}}}$$<br>我们需要先设F=那一坨,不让他等于0,分别对F求偏导,然后套公式.这里<strong>特别注意</strong>一个点:有些变量的偏导不能忽略.<br>例题:求上一个式子的二阶导.<br>$$\frac{\partial z}{\partial x}=-\frac{2x+y+z}{6z+x+y}$$<br>$$\begin{aligned}\frac{\partial^2z}{\partial x^2}&amp;=-\frac{\partial(\frac{2x+y+z}{6z+x+y})}{\partial x}\&amp;=-\frac{\frac{\partial(2x+y+z)}{\partial x}(6z+x+y)-(2x+y+z)\frac{\partial(6z+x+y)}{\partial x}}{(6z+x+y)^2}\&amp;=-\frac{(2+\color{red}\frac{\partial z}{\partial x}\color{white})(6z+x+y)-(2x+y+z)(6\color{red}\frac{\partial z}{\partial x}\color{white}+1)}{(6z+x+y)^2}\end{aligned}$$<br><strong>注意</strong>:因为求z的偏导默认z是可以由x,y表示的,\所以z不可以看成常数,要把之前算出来的加入计算</p><p><strong>求多元函数全微分</strong>:有多少个变量就求多少个偏导<br>$$\boxed{\mathrm{d}z=\frac{\partial z}{\partial x}\mathrm{d}x+\frac{\partial z}{\partial y}\mathrm{d}y}$$<br><strong>求多元复合函数的全微分</strong>:套娃<br>例题:已知$Z=u^2+v^3,u=x+y,v=3x+5y,$求$\mathrm{d}Z$<br>可以套上一个点的公式,求出<br>$$\mathrm{d}Z=3(x+y)^2\mathrm{d}u+3(3x+5y)^2\mathrm{d}v$$<br>然后分别求$\mathrm{d}u,\mathrm{d}v$,得到(并化简)<br>$$\begin{aligned}\mathrm{d}Z&amp;=3(x+y)^2(\mathrm{d}x+\mathrm{d}y)+3(3x+5y)^2(3\mathrm{d}x+5\mathrm{d}y)\&amp;=[3(x+y)^2+9(3x+5y)^2]\mathrm{d}x+15[3(x+y)^2+15(3x+5y)^2]\mathrm{d}y\end{aligned}$$<br>高阶全微分:组合数公式…<br>$$\mathrm d^nz=\sum_{k=0}^{n}\mathrm C_n^k\frac{\partial^nz}{\partial x^k\partial y^{n-k}}\mathrm dx^k\mathrm dy^{n-k}$$<br>比如…<br>$$\mathrm d^2z=f_{xx}(x,y)\mathrm dx^2+2f_{xy}(x,y)\mathrm dx\mathrm dy+f_{yy}(x,y)\mathrm dy^2$$<br><strong>已知全微分求未知数</strong><br>已知$(x^2+axy)\mathrm{d}x+(x^2+3y^2)\mathrm{d}y$为某函数全微分试确定$a$的值.<br>做法:先设$\mathrm{d}z=$那一坨,列出来这个式子:<br>$$\begin{cases}x^2+axy=\frac{\partial z}{\partial x}\x^2+3y^2=\frac{\partial z}{\partial y}\end{cases}$$<br>然后根据这个式子求偏导求$a$的值:2<br>$$\boxed{\frac{\partial^2 z}{\partial x\partial y}=\frac{\partial^2 z}{\partial y\partial x}}$$<br><strong>多元函数求极值</strong>:<br><strong>1.</strong> 求出满足$\large\begin{cases}\frac{\partial z}{\partial x}=0\\frac{\partial z}{\partial y}=0\end{cases}$的$(x,y)$<br><strong>2.</strong> 设$A=\large{\frac{\partial^2 z}{\partial x^2}},B=\frac{\partial^2 z}{\partial x\partial y},C=\frac{\partial^2 z}{\partial y^2}$,并将1的结果代入算出$A,B,C$具体数值<br><strong>3.</strong> 判断<br>$$\boxed{B^2-AC\begin{cases}&lt;0\begin{cases}A&lt;0&amp;极大值点\A&gt;0&amp;极小值点\end{cases}\=0\qquad不确定\&gt;0\qquad不是极值点\end{cases}}$$</p><p><strong>多元隐函数求极值</strong>:</p><p><strong>1.</strong> 求出满足$\large\begin{cases}\frac{\partial z}{\partial x}=0\\frac{\partial z}{\partial y}=0\\small{原方程}\end{cases}$的$(x,y)$</p><p>别的同上</p><p><strong>多元函数求最值</strong><br><strong>1.</strong> 求出两个偏导都等于0的解<br><strong>2.</strong> 找出定义域边界<br><strong>3.</strong> 将1,2步的解和边界都带进去<br><strong>4.</strong> 如果得到了式子,就求最大取值和最小取值</p><p><strong>条件极值</strong>:$\bold{Lagrange}$乘数法:<br><strong>1.</strong> 引入$L(x)=f(x)+\lambda\phi(x)$<br><strong>2.</strong> 计算$\nabla L(x)=0$和$\phi(x)=0$(即满足条件和满足极值)<br><strong>3.</strong> 根据实际情景判断是极大值还是极小值.</p><p><strong>多元函数的$\bold{Taylor}$公式</strong>:</p><p><strong>带$\mathrm{Lagrange}$余项的n阶$\mathrm{Taylor}$公式</strong>:至少存在一个$\theta\in(0,1)$满足<br>$$f(x_0+\Delta x,y_0+\Delta y)=f(x_0,y_0)+\sum^n_{k=1}\frac{1}{k!}\Big(\Delta x\frac{\partial}{\partial x}+\Delta y\frac{\partial}{\partial y}\Big)^kf(x_0,y_0)+R_n$$<br>$$R_n=\frac{1}{(n+1)!}\Big(\Delta x\frac{\partial}{\partial x}+\Delta y\frac\partial{\partial y}\Big)^{n+1}f(x_0+\theta\Delta x,y_0+\theta\Delta y)$$<br><strong>带$\mathrm{Peano}$余项的n阶$\mathrm{Taylor}$公式</strong>:当$\rho=\sqrt{(\Delta x)^2+(\Delta y)^2}\to0$有<br>$$f(x_0+\Delta x,y_0+\Delta y)=f(x_0,y_0)+\sum^n_{k=1}\frac{1}{k!}\Big(\Delta x\frac{\partial}{\partial x}+\Delta y\frac{\partial}{\partial y}\Big)^kf(x_0,y_0)+R_n$$<br>其中<br>$$R_n=o(\rho^n)$$</p><p><strong>$\bold{Maclaurin}$公式</strong>:<br>$\small你在期待些什么?公式其实就是x_0,y_0从0开始而已,余项变都不带变的.$</p><p><strong>拉格朗日中值定理</strong>:<br>$$f(x_0+\Delta x)-f(x_0)=f’(x_0+\theta\Delta x)\Delta x\qquad(0&lt;\theta&lt;1)$$<br>在二元函数上的拓展($\Delta z$叫做全增量,这式子越看越像前缀和):<br>$$\begin{aligned}\Delta z&amp;=f(x_0+\Delta x,y_0+\Delta y)-f(x_0,y_0)\&amp;=f_x(x_0+\theta_1\Delta x,y_0+\Delta y)\Delta x+f_y(x_0,y_0+\theta_2\Delta y)\Delta y\&amp;=f_x(x_0,y_0+\theta_1\Delta y)\Delta x+f_y(x_0+\theta_2\Delta x,y_0+\Delta y)\Delta y\end{aligned}$$</p><p>注意<strong>变限积分求导公式</strong>,用于解决积分求偏导的问题:<br>$$\boxed{\Big(\int^{b(x)}_{a(x)}f(t)\mathrm{d}t\Big)‘=b’(x)f(b(x))-a’(x)f(a(x))}$$</p><p><strong>方向导数</strong>:按照方向向量的极限就是方向导数.$\bold e(\cos\alpha,\cos\beta)$是$\bold l$同方向的单位向量,则<br>$$\frac{\partial f}{\partial l}\Big|<em>{(x_0,y_0)}=\lim</em>{t\to0^+}\frac{f(x_0+t\cos\alpha,y_0+t\cos\beta)-f(x_0,y_0)}{t}$$<br>函数可微能推出来方向导数存在,方向导数可以由偏导计算.<br>$$\boxed{\frac{\partial f}{\partial l}\Big|<em>{(x_0,y_0)}=f_x(x_0,y_0)\cos\alpha+f_y(x_0,y_0)\cos\beta}$$<br><strong>梯度</strong>:<br>$$\boxed{\bold{grad}f(x_0,y_0)=\nabla f(x_0,y_0)=f_x(x_0,y_0)\bold i+f_y(x_0,y_0)\bold j}$$<br>$\nabla$这玩意读作$nabla$,又叫哈密顿算子.<br>$$\boxed{\frac{\partial f}{\partial l}\Big|</em>{(x_0,y_0)}=\nabla f(x_0,y_0)\cdot\bold e_l}$$<br>发现,梯度其实划定了范围,该点方向导数的变化范围.</p><p><strong>算子性质</strong>:(好像导数的性质啊)<br>$$\nabla(c_1u+c_2v)=c_1\nabla u+c_2\nabla v$$<br>$$\nabla uv=v\nabla u+u\nabla v$$<br>$$\nabla(\frac{u}{v})=\frac{v\nabla u-u\nabla v}{v^2}$$<br>$$\nabla f(u)=f’(u)\nabla u$$</p><h3 id="习题处理">习题处理:</h3><p>头函数求偏导:$eg:u=f(x-y+z,x^2+y^2-z^2)$做法:找项<br>答案:$u_x=f’_1+2xf’_2,u_y=-f’_1+2yf_2’,u_z=f’_1-2zf’_2$</p><p>头函数求高阶导:把头函数写进去就很好求了:$eg:z=f(x^2+y)$<br>答案$z_{xx}=2f’(x^2+y)+4x^2f’'(x^2+y)$</p><p>几何求偏导:该点函数分别求偏导组成的向量就是法向量,可以直接比较平行或垂直关系.</p><h1>第三章 重积分</h1><p>没错!你们赞(<s>骂</s>)不绝口的撬棍符号又回来了~这回还带着好兄弟来了…<br>$$\iint_D$$</p><h1>第四章 三重积分</h1><p>$$\iiint_\Omega$$</p><h2 id="换元问题">换元问题</h2><p>弧微分(线)能这么转换系数:<br>$$\mathrm ds=\sqrt{(\mathrm dx)^2+(\mathrm dy)^2+(\mathrm dz)^2}=…\mathrm dt$$<br>面积分能这么转换系数:<br>$$\mathrm dS=\sqrt{1+z_x^2+z_y^2}\mathrm dx\mathrm dy$$<br>同时带参数方程的xy可以转换如下:</p><p>$$\begin{cases}<br>x=r\sin\theta\<br>y=r\cos\theta<br>\end{cases},\theta\in[0,2\pi]$$<br>此时<br>$$\mathrm dx\mathrm dy=r\mathrm dr\mathrm d\theta$$<br>另<br>$$\begin{cases}<br>x=r\sin\theta\cos\varphi\y=r\sin\theta\sin\varphi\z=r\cos\theta\end{cases},\theta\in[0,2\pi],\varphi\in[0,\pi]$$<br>此时<br>$$\mathrm dx\mathrm dy\mathrm dz=r^2\sin\theta\mathrm dr\mathrm d\theta\mathrm d\varphi$$</p><h2 id="旋转体计算">旋转体计算</h2><p>函数 $y=\sqrt x$ 绕x=2,x轴旋转一周求体积表面积.<br>$$S=\int_0^12\pi\sqrt x\mathrm ds$$<br>其中2pi是旋转一个点旋转一周的线长,sqrtx就是函数, $\mathrm ds=\sqrt{(\mathrm dx)^2+(\mathrm dy)^2}=\sqrt{1+\frac1{4x}}\mathrm dx$</p><p>体积比较简单:<br>$$V=\int_0^1\pi(\sqrt x)^2\mathrm dx$$<br>pir2就是面积的意思,直接dx就行.</p><h2 id="概念">概念</h2><p><strong>梯度</strong> :<br>$$\bold{grad}f(x_0,y_0)=\nabla f(x_0,y_0)=(f_x,f_y)$$<br>得到的是一个向量,用括号括起来就行,不需要写什么ijk的.</p><p><strong>散度</strong> :<br>$$\mathrm{div},\bold{a}=\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z}$$<br><strong>旋度</strong> :<br>$$\bold{rot,a}=\begin{vmatrix}\bold i&amp;\bold j&amp;\bold k\\frac{\partial}{\partial x}&amp;\frac{\partial}{\partial y}&amp;\frac{\partial}{\partial z}\P&amp;Q&amp;R\end{vmatrix}$$</p><h2 id="Green公式">Green公式</h2><p>$$∫_C(P\mathrm dx+Q\mathrm dy)=∫_D​(\frac{∂Q}{∂x}−\frac{∂P}{∂y})\mathrm dx\mathrm dy$$</p><h2 id="Stokes公式">Stokes公式</h2><p>如果满足右手法则,还是个闭合曲线,就满足<br>$$\oint_{L}P\mathrm dx+Q\mathrm dy+R\mathrm dz=\iint_{\sum}\begin{vmatrix}\mathrm dy\mathrm dz&amp;\mathrm dz\mathrm dx&amp;\mathrm dx\mathrm dy\\frac{\partial}{\partial x}&amp;\frac{\partial}{\partial y}&amp;\frac{\partial}{\partial z}\P&amp;Q&amp;R\end{vmatrix}$$</p><h2 id="Gauss公式">Gauss公式</h2><p>面封闭,导数连续的时候可以用,dV就是求体积.<br>$$\oiint P\mathrm dy\mathrm dz+Q\mathrm dx\mathrm dz+R\mathrm dx\mathrm dy=\iiint_{Ω}(\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z})\mathrm dV$$</p><h2 id="合一投影法">合一投影法</h2><p>原理:<br>$$\mathrm dy\mathrm dz=-z_x\mathrm dx\mathrm dy,\mathrm dz\mathrm dx=-z_y\mathrm dx\mathrm dy$$<br>于是设外法向量是 $\overrightarrow n=(-z_x,-z_y,1)$<br>然后求偏导想办法搞出来.<br>$$\iint_{\sum}P\mathrm dy\mathrm dz+Q\mathrm dx\mathrm dz+R\mathrm dx\mathrm dy=\iint_{D_{xy}}P(-z_x)+Q(-z_y)+R\mathrm dx\mathrm dy$$</p><h2 id="第一型曲线积分">第一型曲线积分</h2><p>$$\int_Lf(x,y)\mathrm ds=\int_{\alpha}^{\beta}f(x(\theta),y(\theta))\cdot\sqrt{(x’(\theta))^2+(y’(\theta))^2}\mathrm d\theta,\alpha&lt;\beta$$<br>$$\int_Lf(x,y)\mathrm ds=\int_{a}^{b}f(x,y(x))\cdot\sqrt{1+(y’(x))^2}\mathrm dx,a&lt;b$$<br>性质:</p><ol><li>$\int_L1\mathrm ds=L$ 的长度</li><li>若L关于y轴对称, $L_1$ 是L的 $x\ge 0$ 部分,有</li></ol><table><thead><tr><th style="text-align:left">条件</th><th style="text-align:left">性质</th></tr></thead><tbody><tr><td style="text-align:left">$f(-x,y)=f(x,y)$</td><td style="text-align:left">$\int_Lf(x,y)\mathrm ds=2\int_{L_1}f(x,y)\mathrm ds$</td></tr><tr><td style="text-align:left">$f(-x,y)=-f(x,y)$</td><td style="text-align:left">$\int_Lf(x,y)\mathrm ds=0$</td></tr></tbody></table><ol start="3"><li>若L关于x轴对称, $L_2$ 是L的 $y\ge0$ 部分,有</li></ol><table><thead><tr><th style="text-align:left">条件</th><th style="text-align:left">性质</th></tr></thead><tbody><tr><td style="text-align:left">$f(x,-y)=f(x,y)$</td><td style="text-align:left">$\int_Lf(x,y)\mathrm ds=2\int_{L_2}f(x,y)\mathrm ds$</td></tr><tr><td style="text-align:left">$f(x,-y)=-f(x,y)$</td><td style="text-align:left">$\int_Lf(x,y)\mathrm ds=0$</td></tr></tbody></table><h2 id="第二型曲线积分">第二型曲线积分</h2><p>$\theta$ 从 $\alpha$ 到 $\beta$<br>$$\int_{L}P(x,y)\mathrm dx+Q(x,y)\mathrm dy=\int_{\alpha}^{\beta}(P(x(\theta),y(\theta))\cdot x’(\theta)+Q(x(\theta),y(\theta))\cdot y’(\theta))\mathrm dt$$<br>x从a到b<br>$$\int_LP(x,y)\mathrm dx+Q(x,y)\mathrm dy=\int_a^b(P(x,y(x))+Q(x,y(x))\cdot y’(x))\mathrm dx$$<br>性质计算 $\int_LP(x,y)\mathrm dx+Q(x,y)\mathrm dy$ :</p><table><thead><tr><th style="text-align:left">条件</th><th style="text-align:left">性质</th></tr></thead><tbody><tr><td style="text-align:left">$\frac{\partial Q}{\partial x}=\frac{\partial P}{\partial y}$</td><td style="text-align:left">积分与路径无关</td></tr><tr><td style="text-align:left">L为正向(逆时针)无交叉封闭曲线,且PQ在L围城的区域里有一阶连续偏导</td><td style="text-align:left">$\oint_LP\mathrm dx+Q\mathrm dy=\iint_{D}\left(\frac{\partial Q}{\partial x}-\frac{\partial P}{\partial y}\right)\mathrm dx\mathrm dy$</td></tr><tr><td style="text-align:left">L为逆向(顺时针)无交叉封闭曲线,且PQ在L围城的区域里有一阶连续偏导</td><td style="text-align:left">$\oint_LP\mathrm dx+Q\mathrm dy=-\iint_{D}\left(\frac{\partial Q}{\partial x}-\frac{\partial P}{\partial y}\right)\mathrm dx\mathrm dy$</td></tr></tbody></table><h2 id="第一型曲面积分">第一型曲面积分</h2><ol><li>求 $\sum:z=z(z,y)$ 计算 $\iint_{\sum}f(x,y,z)\mathrm ds$<br>步骤:1.画出 $\sum$ ,然后表示 $D_{xy}$ (也就是图形在xy区域投影)<br>2.将 $\sum$ 表示成z=?的形式,求出 $f(x,y,z(x,y))$<br>3.求出 $\frac{\partial z}{\partial x},\frac{\partial z}{\partial y}$<br>4.带公式<br>$$\iint_{\sum}f(x,y,z)\mathrm ds=\iint_{D_{xy}}f(x,y,z(x,y))\cdot\sqrt{1+(\frac{\partial z}{\partial x})^2+(\frac{\partial z}{\partial y})^2}\mathrm dx\mathrm dy$$<br>(别的平面的映射也一样)</li></ol><h2 id="第二型曲面积分">第二型曲面积分</h2><p>计算 $\iint_{\sum}P(x,y,z)\mathrm dy\mathrm dz$<br>$$\begin{cases}<br>若从x正半轴向原点能看到曲面I,则有\iint_{\sum}P(x,y,z)\mathrm dy\mathrm dz=\iint_{D_{yz}}P(x(y,z),y,z)\mathrm dy\mathrm dz\<br>若从x正半轴向原点看不到曲面I,则有\iint_{\sum}P(x,y,z)\mathrm dy\mathrm dz=-\iint_{D_{yz}}P(x(y,z),y,z)\mathrm dy\mathrm dz\<br>若从x正半轴向原点看到曲面缩成曲线,则\iint_{\sum}P(x,y,z)\mathrm dy\mathrm dz=0<br>\end{cases}$$</p><h2 id="例题">例题</h2><ol><li>单位化<br>$$\mathrm ds=\mathrm d\cos a x\mathrm d\cos by\mathrm d\cos cz$$<br>其中 $(\cos a,\cos b,\cos c)$ 是线段单位向量.</li></ol><h2 id="级数">级数</h2><p>数项级数:数列</p><p>{s_n}:前缀和</p><p>几何级数:等比数列</p><p>性质:</p><ol><li>两个收敛级数相加的结果就是极限的结果</li><li>级数收敛于s,乘上一个常数的结果就是as</li><li>在一个级数的前面加上有限项和删除有限项的级数敛散性不变(因为后面的级数相减趋于定值,改变前几项是没用的)</li><li>收敛级数中任意加括号不改变收敛性也不改变和</li></ol><p>加括号的定义是把任意几项合并成一个数字,然后形成一个新的级数,如:<br>$$a-a+a-a+a…$$<br>发散,加括号形成<br>$$(a-a)+(a-a)+…$$<br>是收敛的.</p><ol start="5"><li>数项级数收敛的必要条件是 $\lim_{n\to\infin}u_n=0$</li></ol><h3 id="敛散性判定">敛散性判定</h3><p>正项级数:所有项均非负的级数.</p><ol><li>比较判别法:设正项级数 $u\le v$ ,若v收敛,则u收敛,若u发散,则v发散.</li></ol><p>结论: <strong>p级数</strong> :<br>$$\sum_{n=1}^{\infin}\frac1{n^p}=1+\frac 1{2^p}+\frac1{3^p}…$$<br>在 $p\le1$ 时,级数发散, $p&gt;1$ 时函数收敛.</p><p><strong>极限形式</strong> :设<br>$$\lim_{n\to\infin}\frac uv=l$$<br>若 $0&lt;l&lt;+\infin$ ,则两个函数敛散性相同<br>若 $l=0$ 且v收敛,则u也收敛<br>若 $l=+\infin$ 且v发散,则u也发散.</p><ol start="2"><li><p>比值判别法:正项级数相邻两项之间的比较:<br>$$\lim_{n\to\infin}\frac{u_{n+1}}{u_n}=\rho$$<br>然后当 $\rho&lt;1$ 时级数收敛, $\rho&gt;1$ 时级数发散,=1时可能发散也可能收敛.</p></li><li><p>根值判别法(柯西判别法):正项级数u有<br>$$\lim_{n\to\infin}\sqrt[n]{u_n}=\rho$$<br>当&lt;1时级数收敛,&gt;1时级数发散,=1时敛散性不定.</p></li><li><p>积分判别法(基本用不上)</p></li></ol><p>函数f(x)是 $\ge1$ 上的非负递减函数,f(n)=u(n),级数收敛充要条件是无穷积分 $\int_{1}^{+\infin}f(x)\mathrm dx$ 收敛.</p><h2 id="任意项级数">任意项级数</h2><p><strong>柯西收敛准则</strong> :数项级数收敛的充要条件是 $\forall\varepsilon&gt;0,\exist N&gt;0,$ 当 $n&gt;N$ 时,对一切整数p有<br>$$|s_{n+p}-s_n|=\left|\sum_{k=n+1}^{n+p}u_k\right|&lt;\varepsilon$$<br>大概意思就是说,n越大的时候几项加一起结果越趋向0.</p><p><strong>交错级数</strong> :<br>$$\sum_{n=1}^\infin(-1)^{n+1}u_n,(u_n&gt;0)$$<br>该交错级数收敛有 <strong>莱布尼茨判别法</strong> :1. $u_n\ge u_{n+1}$ 2. $\lim_{n\to \infin}u_n=0$</p><p><strong>特别注意</strong> :莱布尼茨判别法不是必要条件!!!</p><h3 id="绝对收敛与条件收敛">绝对收敛与条件收敛</h3><p>取绝对值后的级数收敛叫 <strong>绝对收敛</strong> ,若绝对值的级数发散但是原级数收敛叫 <strong>条件收敛</strong> .</p><p>如果用比值或者根值判定|u|发散,则u必定发散.</p><p><s>级数乘法运算:uv两个收敛级数相乘的结果就是两个收敛值直接相乘的结果.</s></p><h2 id="函数项级数">函数项级数</h2><p><strong>收敛域,收敛区间</strong> :收敛区间是一个开区间,不用考虑端点的状况,收敛域需要考虑端点状况.</p><p>每一项都是一个函数的级数.<br>$$\sum_{n=1}^\infin u_n(x)=u_1(x)+u_2(x)+…$$<br>I被称为所有函数的公共定义域,和式被称为I上的 <strong>函数项级数</strong> .<br>对于 $x_0$ 如果级数收敛,则被称为收敛点,否则称为发散点.<br>所有点的集合被称为 <strong>收敛域</strong> 或者 <strong>发散域</strong> .</p><p>设收敛域是I,定义 $s(x)=\sum_{n=1}^\infin u_n(x)$ ,被称为和函数.<br>前n项和定义是 $s_n(x)=\sum_{k=1}^nu_k(x)$ .</p><p>余项: $R_n(x)=s(x)-s_n(x)=\sum_{k=n+1}^\infin u_{k}(x)$</p><h2 id="幂级数-普通生成函数">幂级数(<s>普通生成函数</s>)</h2><p>多项式. $a_0+a_1x+a_2x^2+…$</p><p><strong>阿贝尔定理</strong> :若级数在 $x=\overline x$ 收敛,则满足 $|x|&lt;|\overline x|$ 绝对收敛,反之若发散则 $|x|&gt;|\overline x|$ 发散.</p><p>所以,幂级数的收敛域是一个以原点为中心的区间.设2R是长度,R被称为收敛半径,(-R,R)被称为收敛区间.</p><p><strong>求收敛半径</strong> :若<br>$$\lim_{n\to\infin}\left|\frac{a_{n+1}}{a_n}\right|=\rho\quad或\quad\lim_{n\to\infin}\sqrt[n]{\left|a_n\right|}=\rho$$<br>则收敛半径<br>$$R=\begin{cases}\frac 1\rho&amp;0&lt;\rho&lt;+\infin\0&amp;\rho=+\infin\+\infin&amp;\rho=0\end{cases}$$</p><h3 id="幂级数运算">幂级数运算</h3><p>首先,必须在收敛半径内,R=min(R1,R2).</p><p>标准的多项式操作.</p><p>两个幂级数加减得到的幂级数的半径有 $R\ge\min{R_1,R_2}$</p><p><strong>分析运算</strong> :设收敛半径为R,和函数为s(x),则有</p><ol><li>s(x)连续,如果幂级数在边界收敛,那么就有左连续(或者右连续)</li><li>s(x)可微,且求导之后的幂级数与原幂级数收敛半径相同.</li><li>s(x)可积,且积分之后的幂级数与原幂级数收敛半径相同.</li></ol><h2 id="函数展开幂级数">函数展开幂级数</h2><p>使用泰勒展开科技…</p><p>间接法:使用求导或者积分等方法避免对原函数的直接泰勒展开.</p><h2 id="傅里叶级数">傅里叶级数</h2><p>大概意思就是,所有函数在 $[-\pi,\pi]$ 内能用包含正弦和余弦的级数模拟.公式<br>$$f(x)=\frac{a_0}2+\sum_{n=1}^\infin(a_n\cos nx+b_n\sin nx)$$<br>然后<br>$$a_0=\frac1\pi\int_{-\pi}^\pi f(x)\mathrm dx$$<br>$$a_k=\frac1\pi\int_{-\pi}^\pi f(x)\cos kx\mathrm dx,k=0,1,2,…$$<br>$$b_k=\frac1\pi\int_{-\pi}^\pi f(x)\sin kx\mathrm dx,k=0,1,2,…$$<br>放心,考试最多让你求一项,用分部积分应该能算出来.</p><p>某题要求你只用正弦或者余弦展开,这个时候要想办法让函数变成奇函数或者偶函数,这就叫奇延拓或偶延拓,然后积分变成二倍的 $[0,\pi]$ 这个区间.</p><h2 id="常微分方程">常微分方程</h2><p>名词解释:</p><p><strong>微分方程</strong> :含有自变量,未知函数(或倒数)或微分的方程.</p><p><strong>常微分方程</strong> :未知函数是一元函数的方程.</p><p><strong>阶</strong> :未知导数的最高阶.</p><p><strong>线性微分方程</strong> :关于未知函数和导数都是线性的.下面前三个是,最后一个不是.<br>$$\frac{\mathrm dM}{\mathrm dt}=-kM,m\frac{\mathrm d^2x}{\mathrm dt^2}=-k\frac{\mathrm dx}{\mathrm dt}+mg,\frac{\mathrm d^2x}{\mathrm dt^2}=g\quad,y=y’^2-xy’+\frac{x^2}2$$</p><p><strong>全微分方程</strong> :可以转换成某函数全微分的方程: $P(x,y)\mathrm dx+Q(x,y)\mathrm dy=0$ .</p><p><strong>可分离变量方程</strong> :能拆成下面的被称作这个,右边是两个独立的一元函数之积.<br>$$\frac{\mathrm dy}{\mathrm dx}=f(x)g(y)$$</p><p><strong>齐次方程</strong> :形如下面的.<br>$$\frac{\mathrm dy}{\mathrm dx}=\varphi(\frac yx)$$</p><p><strong>一阶线性微分方程</strong> :长得像下面的:<br>$$\frac{\mathrm dy}{\mathrm dx}=p(x)y+q(x)$$<br>然后如果q(x)三0那就是 <strong>一阶齐次线性微分方程</strong> ,否则是 <strong>一阶非齐次线性方程</strong> .</p><p><strong>齐次</strong> :所有未知变量的次数相等,判断可以把所有项乘上一个 $y^0$ 然后判断y的次方是不是相等的.<br><strong>线性</strong> :上面的条件下,所有y都是1次方.</p><h2 id="猴博士…">猴博士…</h2><ol><li><p>求收敛半径:把 $|\lim_{n\to\infin}\frac{u_{n+1}}{u_n}|&lt;1$ 化成 $|x+?_1|&lt;?_2$ 的形式,然后 $?_2$ 就是半径(x系数必须是1).</p></li><li><p>级数 $\sum_{n=1}^\infin a_n(x+b)^n$ 在 $x=x_0(x_0\neq0)$ 时</p></li></ol><table><thead><tr><th style="text-align:center">特征方程的根</th><th style="text-align:center">通解</th></tr></thead><tbody><tr><td style="text-align:center">单实根a</td><td style="text-align:center">$C\cdot e^{ax}$</td></tr><tr><td style="text-align:center">k重实根a</td><td style="text-align:center">$e^{ax}(C_1+C_2x+…+C_kx^{k-1})$</td></tr><tr><td style="text-align:center">单复根 $\alpha\pm\beta i$</td><td style="text-align:center">$e^{\alpha x}(C_1\cos\beta x+C_2\sin\beta x)$</td></tr><tr><td style="text-align:center">k重复根 $\alpha\pm\beta i$</td><td style="text-align:center">$e^{ax}[(C_1+C_2x+…+C_kx^{k-1})\cos\beta x+(D_1+D_2x+…+D_kx^{k-1})\sin\beta x]$</td></tr></tbody></table><ol start="3"><li>符合 $y’=p(x)y+q(x)$ 格式求通解,直接带入:<br>$$y=e^{\int p(x)\mathrm dx}\left(\int q(x)e^{\int-p(x)\mathrm dx}\mathrm dx+C\right)$$</li><li>可以将xy拆到等号两边的题目求通解:</li></ol><blockquote><ol><li>先把y’变成 $\frac{\mathrm dy}{\mathrm dx}$</li><li>放到等号两边</li><li>取积分,然后算出积分,得到答案($y=xxx+C$)</li></ol></blockquote><ol start="5"><li>有复合部分的题目求通解</li></ol><p>令u为重合部分,然后对x求偏导:<br>$$y=ux,y’=u+x\frac{\mathrm du}{\mathrm dx}$$<br>然后带入把两边分离出来求积分,最后再把u是啥带回去即可.</p><ol start="6"><li>好几阶导=x啥啥求通解<br>首先x为0求 $\overline y$<br>然后将x化为 $x^me^{\lambda x}$ 的格式,求出 $m$ 和 $\lambda$ ,根据下表入的值确定k</li></ol><table><thead><tr><th style="text-align:center">$\lambda$ 是</th><th style="text-align:center">k值</th></tr></thead><tbody><tr><td style="text-align:center">$\lambda$ 不是特征方程的根</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">$\lambda$ 是特征方程单根</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">$\lambda$ 是特征方程多重根</td><td style="text-align:center">2</td></tr></tbody></table><p>然后带入下式:<br>$$y^<em>=x^k(b_0x^m+…+b_mx^0)e^{\lambda x}$$<br>将这个 $y</em>$ 当作y带入原式子求出b,进而求出 $y*$</p><p>最后答案就是 $y=\overline y+y^*$ ,加一起就行.</p><p>如果有好几项x,那就对每一个x的项求一个特解 $y^*_1$ ,然后最后还是加一起.</p><ol start="7"><li>幂级数展开:设u=要求幂级数,然后代换.<br>然后对照表的公式展开<br>最后把a代换回去.</li></ol><table><thead><tr><th style="text-align:center">公式</th><th style="text-align:center">使用条件</th></tr></thead><tbody><tr><td style="text-align:center">$$e^u=\sum_{n=0}^\infin\frac1{n!}u^n$$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$$\sin a=\sum_{k=0}^\infin\frac{(-1)^k}{(2k+1)!}u^{2k+1}$$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$$\cos a=\sum_{k=0}^\infin\frac{(-1)^k}{(2k)!}u^{2k}$$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$$\ln(1+u)=\sum_{n=1}^\infin\frac{(-1)^{n-1}}{n}u^n$$</td><td style="text-align:center">$-1&lt;u\le1$</td></tr><tr><td style="text-align:center">$$\frac1{1+u}=\sum_{n=0}^\infin(-1)^nu^n$$</td><td style="text-align:center">$|u|&lt;1$</td></tr><tr><td style="text-align:center">$$\frac1{1-u}=\sum_{n=0}^\infin u^n$$</td><td style="text-align:center">$|u|&lt;1$</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学学习笔记</title>
      <link href="/2024/10/26/00006%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/26/00006%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="这里是离散II的内容-Flu速通一下">这里是离散II的内容,Flu速通一下</h2><h1>代数系统</h1><p>二元代数运算:设 $S$ 是一个集合,然后 映射 $f$ 是一个从 $S\times S$ 到 $S$ 的映射,这就是二元代数运算.条件: <strong>集合非空,运算封闭</strong></p><p>交换律,结合律,忽略.</p><p>如果对于 <code>*</code> 有 $a*a=a$ 则 $a$ 叫幂等元,所有元素都满足这个就叫具有 <strong>幂等律</strong> .</p><p>对于运算 <code>*</code> 若 <code>a*b=a*c</code> 则 <code>b=c</code> 则有 <code>*</code> 满足消去律.</p><p>对于 <code>*+</code> 若有 <code>a*(b+c)=(a*b)+(a*c)</code> 且 <code>(b+c)*a=(b*a)+(c*a)</code> 被称作 <strong>运算 <code>*</code> 对 <code>+</code> 满足分配律</strong> (注意顺序不可变).</p><p>对于 <code>*+</code> 若有 <code>a+(a*b)=a</code> 且 <code>a*(a+b)=a</code> 被称作 <strong>运算 <code>*</code> 和 <code>+</code> 满足吸收律</strong> (这里不区分顺序).</p><p><strong>零元</strong> :设存在 $\theta$ 满足对任意元素a都有 $a*\theta=\theta*a=\theta$ 则被称作零元.</p><p><strong>代数系统</strong> :(集合,运算1,运算2,…).</p><h1>群论</h1><p><strong>半群</strong> : <code>(G,*)</code> 假如G非空, <code>*</code> 是二元运算且满足结合律,则被称作 <strong>半群</strong> .</p><p><strong>群</strong> :存在单位元和逆元.(单位元:对任意a有 <code>a*1=1*a=a</code> ,逆元是对于任意a都有 <code>a*b=b*a=1</code> 然后b就叫逆元 $a^{-1}$ )</p><h2 id="群的性质">群的性质</h2><ol><li><p>单位元是群中唯一幂等元.</p></li><li><p>群中消去律一定成立.(群是有逆元的,不要担心0的问题)</p></li><li><p><code>|G|&gt;1</code> 时群中无零元(群要求有逆元,0没有逆元(或者逆元就是他自己))</p></li><li><p>群中单位元素和元素的逆元是唯一的.</p></li><li><p>群定义可以减弱如下:同时存在左一和左逆 $1*a=a,a^{-1}*a=1$ 也是群.</p></li><li><p>群定义等价以下可除条件:对于任意ab,存在xy有 $a<em>x=b,y</em>a=b$ .</p></li><li><p>一元群,二元群,三元群都是唯一的,而且满足交换律.</p></li><li><p>$(a<em>b)^n=a^n</em>b^n$ 一般是不成立的.</p></li><li><p>有限半群,如果满足消去条件,一定是群.</p></li></ol><h2 id="Abel群">Abel群</h2><p>满足交换律的群称为Abel群,或者交换群.</p><h2 id="置换群">置换群</h2><p>变换:A到A的映射.</p><p>M是一个有限集合,M的一个一对一变换称为一个置换.<br>置换有 $n!$ 个,元素不变的那个称为n元恒等变换.</p><p>$S_n$ 是n元置换形成的集合( $n!$ 个元素).</p><p><strong>置换乘法</strong> :对于a,有 $\sigma\tau(a)=\sigma(\tau(a))$ .<br>置换乘法的性质:</p><ol><li>满足结合律 $(\sigma\tau)\rho=\sigma(\tau\rho)$</li><li>$S_n$ 中有单位元,设为 $\sigma_0$ ,单位元就是n元恒等置换.</li><li>每个置换在 $S_n$ 中都有逆元素(上下颠倒过来就行了)</li></ol><p>乘法举例:<br>$$\sigma=\begin{pmatrix}1&amp;2&amp;3&amp;4&amp;5\2&amp;4&amp;3&amp;5&amp;1\end{pmatrix},\tau=\begin{pmatrix}1&amp;2&amp;3&amp;4&amp;5\2&amp;5&amp;1&amp;4&amp;3\end{pmatrix}$$<br>$$\sigma\tau=\begin{pmatrix}1&amp;2&amp;3&amp;4&amp;5\5&amp;4&amp;1&amp;3&amp;2\end{pmatrix}$$<br>一个一个对应就行了.</p><p>n次置换群:集合是n次置换,运算是置换乘法.<br>性质:1元和2元的置换乘法满足交换律,是交换群.</p><h2 id="轮换表法-就是顺着找环">轮换表法(就是顺着找环)</h2><p>$$\begin{pmatrix}1&amp;2&amp;3&amp;4&amp;5&amp;6\3&amp;2&amp;4&amp;1&amp;5&amp;6\end{pmatrix}=(1\space3\space4)=(1\space3\space4)(2)(5)(6)$$<br>轮换相逆直接倒过来,reverse.</p><p><strong>相杂轮换</strong> :元素A同时出现在两个轮换中.<br><strong>轮换合并</strong> :必须严格按照轮换乘法运算,举例(123)(342)=(12)(34)并不是(1234)</p><p>不相杂轮换直接放到后面就行了.(不相杂的轮换满足交换律)</p><p>轮换表示方法:去掉单轮换,然后把最小元素挪移到前面.</p><p>对换:大的拆小的.(123…n)=(1n)(1{n-1})…(13)(12),注意对换没有(xx)的情况出现,单轮换是不转对换的.</p><p><strong>置换奇偶性</strong> :元素个数n-轮换个数k(不算单轮换),或者对换的个数.<br><strong>奇偶性乘法律</strong> :相同是偶,不然就是奇.</p><h2 id="子群">子群</h2><p>如果集合的子集和这个运算符仍满足群的关系,就叫子群.(真子群定义一样,忽略)</p><p><strong>平凡子群</strong> :任意群都有两个子群:单位子群1和自己.这俩叫平凡子群.<br><strong>非平凡子群</strong>:其他的子群如果存在都叫这个.</p><p><strong>子群判定</strong> :</p><ol><li>设H是G子群,H充要条件是: 1H非空 2任意ab属于H,必有a*b属于H 3任意元素逆元属于H</li><li>对任意 $a,b\in H$ ,有 $a*b^{-1}\in H$ .</li><li>如果群有限,非空,封闭,就是子群</li></ol><p>若一个群g有非平凡子群,则g中元素数量大于等于4.</p><p>S是n元恒等置换,a是S中的所有偶置换的集合.</p><p>$A_4$ 称为四次交代群, $S_4$ 为四次对称群, $A_4$ 没有六元子群, $A_4$ 子群有10个.</p><p><strong>子群性质</strong> :单位元一样,任意元素逆元一样.</p><p><strong>生成子群</strong> :a的任意整数次幂生成的一个群叫生成子群,记作 <code>(a)</code></p><p><strong>循环群</strong> :如果存在某个元素能够生成整个子群,就把G叫做循环子群.(性质:每个循环群都是交换群).<br>循环群是abel群,abel群一定有正规子群.</p><p><strong>元素周期</strong> :元素经过多少次对自己的乘法能回到自己,就叫做周期.回不到的周期定为无穷或者0.<br>单位元的周期是1,一个元素和逆元的周期相同.周期是取最小的元素.</p><p><strong>循环群的生成元素</strong> :1. 无限循环群里有两个生成元: $a$ 和 $a^{-1}$<br>2. n元循环群中元素 $a^k$ 是 $(a)$ 的生成元的充要条件是 $\gcd(n,k)=1$ .<br>3. 故 $(a)$ 共有 $\phi(a)$ 个生成元素.</p><p>模x加法群是循环群.</p><p>循环群的子群还是循环群.</p><p>G与N之间的子群一一对应<br>大群对应大群,小群对应小群.<br>正规子群对应正规子群.</p><p>有若 $N\in H$ 有 $\sigma^{-1}(\sigma(H))=H$<br>任意有<br>$$\sigma(\sigma^{-1}(H’))=H’$$<br>只需证明大群对应大群,小群对应小群,正规子群对应正规子群.</p><h2 id="陪集">陪集</h2><p>陪伴,陪衬的集合.从G中选的子群H具有某种性质,但是G中还有某些集合也满足这个性质,但是因为他们缺少单位元不算子群,这个就叫陪集.aH左陪集可以看做a拜访H中每个元素,右陪集可以看做H挨个拜访a,如果两种拜访方式结果是一样的,就被称为正规子群H.</p><p><strong>陪集性质</strong>:1. |aH|=|H|<br>2. H本身是H的左右陪集.<br>3. aH=H iff $a\in H$<br>4. a在陪集aH中<br>5. 对于右陪集aH中任意元素b有aH=bH,说明右陪集中任意元素都可以当陪集代表<br>6. aH=bH充要条件是 $ab^{-1}\in H$<br>7. 任意两个右陪集aH bH相等或者不相交(所以求陪集直接暴力然后去个重就行了)</p><h2 id="正规子群">正规子群</h2><p>对任意 $g\in G$ 都有gH=Hg,则有H是正规子群.</p><p>平凡子群是正规子群.</p><p>交换群的任意子群是正规子群.</p><p>必要且只要 $g\in G,gHg^{-1}⊆H$</p><p>如果H的任意两个右陪集的乘积仍是一个右陪集,则H是一个正规子群.</p><h2 id="拉格朗日定理">拉格朗日定理</h2><p>设G为有限群,则子群H元数整除G元数.(逆命题不成立)</p><p>若G是循环群,则G必定且有且存在一个m元子群满足m整除|G|(注意是任意因数).</p><p>若G是有限群,|G|=n,则任意元素的周期一定是n的因子.</p><p>若G的元数是个质数,则对任意非单位元,都是群的生成元(由任意子群元数是n的因子,任意元素周期是n的因子推出)</p><p>所以任意元数是质数的群都是循环群.</p><p>设G元素个数是n,则对任意元素 $a\in G$ 有 $a^n=1$ .</p><p>有限交换群的所有元素相乘结果不是1的,一定是偶数元群.</p><p>H在G中的指数:元数相除得到的整数,记作 $(G:H)$ (等价类的个数)(同时也是左右陪集的个数)(G:H)若指数为2则H一定是G的正规子群.</p><p>当n&lt;6时,n元群都是交换群.</p><h2 id="群的同态和同构">群的同态和同构</h2><p><strong>同态映射</strong> :设 $(G,\cdot)$ 是一个群, $(K,<em>)$ 是一个代数系统.假如存在一个映射 $\sigma$ 对G中任意元素ab满足 $\sigma(a\cdot b)=\sigma(a)</em>\sigma(b)$ 就叫同态映射.这玩意不一定是单射也不一定是满射(同态是函数式的映射).</p><p>设 $G’=\sigma(G)$ ,有:</p><ol><li>$(G’,\cdot)$ 是一个群</li><li>G’中单位元 $1’=\sigma(1)$</li><li>$\sigma(a)^{-1}=\sigma(a^{-1})$</li><li>若 $\sigma(a)=\sigma(b)$ ,则 $\sigma(a^{-1})=\sigma(b^{-1})$</li></ol><h2 id="同构映射">同构映射</h2><p>如果 $\sigma$ 是一个1-1映射,就叫同构映射,记作 $G\cong\sigma(G)$ (<code>G\cong\sigma(G)</code>).</p><p>举例:正整数乘法群同构于实数加法群:设 $\sigma(x)=\ln x$ 有<br>$$\sigma(a<em>b)=\ln(a</em>b)=\ln a+\ln b=\sigma(a)+\sigma(b)$$<br>整数加法群同构于偶数加法群.<br>无限循环群同构于整数加法群.<br>$(R^*,\cdot)$ (非零实数乘法群)和 $(R,+)$ 不可能同构.</p><p>$\sigma()$ 是G到G的同构映射叫自同构映射.</p><h2 id="同态核">同态核</h2><p>所有满足 $\sigma(x)=1’$ 的x组成的集合叫同态核,记作N,称为N是 $\sigma$ 的核.<br>同态核是正规子群.</p><h3 id="群的第一同态定理">群的第一同态定理</h3><p>$\sigma^{-1}(a’)=x$ 满足逆映射的显然不止一个,他们构成一个集合.集合是N(核)在G中的一个陪集.</p><p>设N是G的正规子群,若A,B是N陪集,则AB也是N的陪集.</p><h3 id="群的第二同态定理">群的第二同态定理</h3><p>设N是G正规子群,按照陪集乘法,做成 $\overline G$ .<br>映射 $\sigma:a\to aN,a\in G$<br>则映射 $\sigma$ 是一个同态映射,且核为N,记作 $\overline G=G/N$<br>元素个数就是N在G中指数(|G|/|N|),陪集个数.</p><h3 id="群的第三同态定理">群的第三同态定理</h3><p>映射和核满足 $G’\cong G/N$ .</p><h2 id="G和G’的关系">G和G’的关系</h2><p>若H是G子群,则H’也是G’子群.反过来也成立.</p><p>$σ^{−1}(σ(H))=HN$</p><p>当 $N⊆H$ ,即 $HN=H$ 时,有 $σ^{−1}(σ(H))=H$ .</p><p>H是G的正规子群必要而且只要 H’=σ(H)是G’的正规子群</p><h1>环</h1><p>定义:九条</p><ol><li>集合非空</li><li>对于加法封闭</li><li>对于乘法封闭</li><li>加法是交换群(结合律,交换律,单位元,逆元)</li><li>乘法是半群(结合律)</li><li>乘法对于加法有左右的分配律</li></ol><p>约定在环这里,乘法优先级比加法高(因为乘法不满足交换律,先运算更省事)<br>约定 $a-b$ 的意思是 $a+(-b)$ ,其中 $-b$ 是 $b$ 的加法逆元</p><p>性质(加法):</p><ol><li>$0a=0,a0=0$ ,前面是有理数0,后面是群中加法单位元.</li><li>$a(c-b)=ac-ab,(c-b)a=ca-ba$</li><li>$(-a)b=-(ab)=a(-b),(-a)(-b)=ab$</li><li>对任意整数 $m$ 有 $a(mb)=(ma)b=m(ab)$</li></ol><p>性质(乘法):</p><p>因为乘法是半群,无法保证单位元是否在群内,所以以下幂次方运算的n和m必须是正整数(0都不可以).</p><ol><li>$a^na^m=a^{m+n}$</li><li>如果任意 $ab=ba$ 则环叫做交换环.环内有第三指数律 $(ab)^n=a^nb^n$</li></ol><p>整数环,多项式环是交换环,矩阵环不是交换环.<br>交换环中二项式定理成立: $(a+b)^n=…$</p><p><strong>含壹环</strong> :如果R不只有一个元素,而且存在元素1满足 $1a=a1=a$ ,则R称为含壹环(因为不能和加法单位元混).</p><p>整数环是含壹环,所有偶数在加法乘法下不做成含壹环.<br>性质:</p><ol><li>含壹环的1唯一确定,且一定不是加法的单位元.</li><li>任意环均可扩充为含壹环.</li></ol><h2 id="子环">子环</h2><p>老规矩,自己和{0}是两个平凡子环.</p><p>子环的壹与原来的环的壹未必一致.</p><h2 id="消去环">消去环</h2><p><strong>零因子</strong> :如果 $a\neq0,b\neq0,ab=0$ 则ab互称0因子.如果R没有这样的元素,就叫做消去环.比个例子:整数环是消去环,矩阵环不是消去环.<br>$$\begin{bmatrix}1&amp;0\1&amp;0\end{bmatrix}\begin{bmatrix}0&amp;0\1&amp;1\end{bmatrix}=\begin{bmatrix}0&amp;0\0&amp;0\end{bmatrix}$$<br>无零因子,非零元满足消去律.</p><p>性质:</p><ol><li>消去环中,不为0的元素加法周期相同,且为0或质数.</li></ol><p><strong>整区</strong> :有壹无零因子的交换环叫做整区.<br>所有整数,有理数,实数,所有复数在数的加法和乘法下做成的环叫做整区.</p><p><strong>体</strong> :如果去掉0,R的其余元素做成一个乘法群,称R为体.<br>体有壹无零因子,任意非零元素有逆.</p><p><strong>域</strong> 域是交换体.在域中, $ab^{-1}$ 可以写作 $a/b$ (有限整区).<br>有理数域,实数域,复数域都是域.</p><p><strong>子某</strong> :如果截一部分仍然满足某的定义就叫子某.子环,子体,子域,子整区,etc.</p><h2 id="偏序格">偏序格</h2><p>定义:给出一个偏序集(L,≤),如果对于任意a,b∈L,L的子集{a,b}在L中都有一个最大下界(记为inf{a, b})和一个最小上界(记为sup{a, b})则称(L,≤)为一个格.</p><p>全序集是一个格,不是所有偏序集都是格.</p><p><strong>偏序子格</strong> :直接集合就行了.设 $(S,\le)$ 是格,则 $L⊆S,(L,\le)$ 是子格.</p><h2 id="代数格">代数格</h2><p>定义:设L是一个集合,×,⊕是L上两个二元代数运算,如果这两种运算对于L中元素满足:<br>交换律: $a×b=b×a,a⊕b=b⊕a$<br>结合律: $a×(b×c)=(a×b)×c,a⊕(b⊕c)=(a⊕b)⊕c$<br>吸收律: $a ×(a⊕b)=a,a ⊕(a×b)=a$<br>则称此代数系统(L,×,⊕)为一个格.</p><p>因为满足吸收律,所以一定满足幂等律.</p><p><strong>代数格和偏序格是等价的</strong> .</p><p><strong>子格</strong> :子集,如果也满足运算封闭,也是格,那就是子格.</p><h2 id="代数子格与偏序子格的关系">代数子格与偏序子格的关系</h2><p>若 $(S,×,⊕)$ 是 $(L,×,⊕)$ 的代数子格,则 $(S,≤)$ 是 $(L,≤)$ 的偏序子格.</p><p>若 $(S,≤)$ 是 $(L,≤)$ 的偏序子格,则 $(S,×,⊕)$ 不一定是 $(L, ×, ⊕)$ 的代数子格. (因为代数子格必须满足封闭性)</p><h2 id="格的其他性质">格的其他性质</h2><p>设(L,≤)是一个格,a,b是 L 中任意元素,于是 $a≤b \leftrightarrow a×b = a \leftrightarrow a ⊕ b = b$<br>设(L,≤)是一个格,a,b,c是 L 中任意元素,如果 $b≤c$ ,则有 $a×b ≤ a×c,a⊕b ≤ a⊕c$<br>设(L,≤)是一个格,a,b,c是L中任意元素.于是有分配不等式<br>$$a⊕(b×c) ≤ (a⊕b)×(a⊕c)$$<br>$$a×(b⊕c) ≥ (a×b)⊕(a×c)$$<br>(记忆方法:最后进行⊕的式子小)<br>在一般格中,分配律不是总成立的,但上述分配不等式总是成立的.<br>设(L,≤)是一个格,a,b,c是 L 中任意元素,于是, $a≤b \leftrightarrow a⊕(b×c) ≤ b×(a⊕c)$</p><p><strong>判断一个哈斯图是不是格</strong> :找,如果存在两个元素之间不存在上下确界,那就不是格.举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   o</span><br><span class="line">  / \</span><br><span class="line"> o   o  <span class="comment">//aaa</span></span><br><span class="line"> |\ /|</span><br><span class="line"> |/ \|</span><br><span class="line"> o   o</span><br><span class="line">  \ /</span><br><span class="line">o</span><br></pre></td></tr></table></figure><p>这并不是一个格,因为标注释那行两个没有下确界(下确界可以没有但是必须唯一,于是这两个横着的因为有两个下确界就出问题了)</p><h2 id="格的同态与同构">格的同态与同构</h2><p>设(L,×,⊕)和(S,∧,∨)是两个格,L到S内的映射g称为 $(L,×,⊕)$ 到 $(S,∧,∨)$ 的格同态映射,如果对任意a,b∈L,都有<br>$$g(a×b)= g(a)∧g(b)$$<br>$$g(a⊕b) = g(a)∨g(b).$$</p><p>L到L的被称为自同态映射.一对一的映射又叫同构映射.</p><h2 id="其他奇奇怪怪的格">其他奇奇怪怪的格</h2><h3 id="有界格">有界格</h3><p>顾名思义.</p><h3 id="有余格">有余格</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   o      o       o</span><br><span class="line">   |     / \     / \</span><br><span class="line">   o    a   b   a   c</span><br><span class="line">  / \    \ /    |   |</span><br><span class="line"> a   b    o     b   |</span><br><span class="line">  \ /            \ /</span><br><span class="line">   o              o</span><br><span class="line">ab均无余 a余b c有ab两个余</span><br></pre></td></tr></table></figure><p>每个元素至少存在一个余元素.</p><h3 id="分配格">分配格</h3><p>$$a×(b⊕c) = (a×b)⊕(a×c)$$<br>$$a⊕(b×c) = (a⊕b)×(a⊕c)$$<br>任意元素满足这两个式子.</p><p>分配格的任意子格仍然是分配格.</p><p>分配格当且仅当不含有五角格和钻石格</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  o      o</span><br><span class="line"> /|\    / \</span><br><span class="line">o o o  o   o</span><br><span class="line"> \|/   o   |</span><br><span class="line">  o     \ /</span><br><span class="line">      o</span><br><span class="line">钻石格 五角格</span><br></pre></td></tr></table></figure><h3 id="模格">模格</h3><p>设 $(L,≤)$ 是一个格,对任意 $a,b,c∈L$ ,如果 $a≤b$ ,都有 $a⊕(b×c)= b×(a⊕c)$ 则称 $(L,≤)$为模格.</p><p>模格就是不包含和五角格同构的格.</p><h1>布尔代数</h1><p>有余分配格是一个布尔代数,记为 $(B,·,+,ˉ,0,1)$ .</p><p>判定:</p><ol><li>满足交换律,结合律</li><li>满足分配律</li><li>存在0元和1元</li><li>存在取反运算,满足 $a\bar a=0,a+\bar a=1$</li></ol><p>就被称作一个布尔代数.</p><h2 id="子代数">子代数</h2><p>运算封闭,子集,包含01,三种运算都是封闭的,就叫子代数.</p><h2 id="以下是离散I的内容-由于考试通过了-不再进行维护">以下是离散I的内容,由于考试通过了,不再进行维护.</h2><p>咋?你总不能因为这个咒Flu挂科吧…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">面壁思过</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最近不是快期末了吗…Flu也要开始备考期末了…所以最近会更新一堆奇奇怪怪的科目的笔记…</p><h1>第一章 集合论基础</h1><p>哦,集合.高中学过的东西.有穷集,无穷集.子集,真子集(真子集符号是这个$\subset$不是高中学的这个$\varsubsetneqq$)</p><p>元素数:有穷集合的元素个数,记作$|A|$.</p><p><strong>几个特殊集合</strong>:全集$E$,空集$\varnothing$(没有任何元素),</p><h3 id="几种运算">几种运算</h3><ol><li>幂集$\rho(A)$<br>其实就是每个元素都有出现或不出现两种选择,所以元素数就是$2^n$.是对集合求其子集,所以直接空集而不是大括号空集.两个性质:<br>$A\subseteq B$当且仅当$\rho(A)\subseteq\rho(B)$.<br>$x\in\rho(A)$当且仅当$x\in A$.</li><li>差集-<br>其实$A-B$就是都有的全没了,然后剩下A独有的部分.B独有的部分不算.</li><li>交并集运算不解释,高中学过</li><li>笛卡尔积<br>$A\times B={(x,y)|x\in A&amp;&amp;y\in B}$有点像坐标系的运算,单个点集相乘整一个矩阵一样的东西.乘完之后有mn个元素.性质:<br>1.$A\times\varnothing=\varnothing\times A=\varnothing$<br>2.一般不满足交换律和结合律.即<br>$$A\times B\neq B\times A\(A\times B)\times C\neq A\times(B\times C)$$<br>3.满足分配律(交集也一样满足的,只是式子太难打了)<br>$$A\times(B\cup C)=(A\times B)\cup(A\times C)$$</li><li>环和(对称差)<br>$$\begin{aligned}A\oplus B&amp;=(A-B)\cup(B-A)\&amp;=(A\cup B)-(A\cap B)\end{aligned}$$</li><li>环积<br>$$A\otimes B=\overline{A\oplus B}$$<br>7.常见算律<br>$$<br>A\cup A=A,A\cap A=A\<br>A\cup B=B\cup A,A\cap B=B\cap A\<br>(A\cap B)\cap C=A\cap(B\cap C)\<br>(A\cup B)\cup C=A\cup(B\cup C)\<br>A\cap(B\cup C)=(A\cup B)\cap(A\cup C)\<br>A\cup(B\cap C)=(A\cap B)\cup(A\cap C)\<br>A\cap(A\cup B)=A,A\cup(A\cap B)=A\<br>A\cup\overline A=E,A\cap\overline A=\varnothing,A=\overline{\overline A}\<br>\overline{(A\cap B)}=\overline A\cup\overline B,\overline{(A\cup B)}=\overline A\cap\overline B\<br>E\cap A=A,\varnothing\cup A=A\<br>\varnothing\cap A=\varnothing,E\cup A=E<br>$$</li></ol><h3 id="关于空集">关于空集</h3><p>空集是任何集合的子集,<strong>但是</strong> 空集并不默认是任何集合的元素,也就是说集合里面出现了空集符号对于求幂集啥的要参与运算(这个时候他是元素).<br>放几个例题:<br>对${\varnothing,{\varnothing}}$求幂集:<br>$${\varnothing,{\varnothing},,{\varnothing,{\varnothing}}}$$<br>对${1,2}$求幂集:<br>$${\varnothing,1,2,{1,2}}$$<br>上面的如果改成${1,2,\varnothing}$就会是8个元素了.</p><h3 id="几个证明方法">几个证明方法</h3><ol><li>证明A=B<br>其实就是$A\subseteq B$而且$B\subseteq A$即可,$\subseteq$的意思是一个集合的元素都是另一个集合的元素.</li><li>取元素法证明$\overline{(A\cap B)}=\overline A\cup\overline B$:<br>任取$a\in\overline A\cup\overline B$,即a属于啥啥啥,然后一直推就行了…</li></ol><h2 id="关系">关系</h2><p>这个东西非常重要.(a,b)这玩意叫序偶,就是用序偶的排列组合表示关系长啥样.</p><p><strong>几个特殊关系</strong>:空关系$\varnothing$,全域关系$E_A=A\times A$,相等关系$I_A={(x,x)}$</p><p>$\overline R=A\times A-R$</p><p>若 $|A|=n$ ,则A上的关系有 $2^{n^2}$ 个.如何理解?首先,A上的序偶一共有$n^2$个,然后单个序偶只是一个序偶,尝试解释序偶得到关系(其实就是序偶的排列组合),因为每个序偶都是可以去可以不去,就有这么多个关系.</p><p>关系常用大写字母RS等表示.因为关系也是集合,所以支持交并补运算,注意余运算的作用是针对全域而言,也就是$E=A\times B$.</p><p>写作$xRy$.</p><p><strong>逆关系</strong>:其实就是序偶反过来,别的条件一样.令<br>$$R^{-1}={(y,x)|x\in A,y\in A,xRy}$$<br>小于关系的逆关系是大于关系,相等关系的逆关系还是相等关系(可以注意到,逆关系并不是单纯对该关系取补集)</p><p><strong>自反关系</strong>:对任意$x\in A$,有$xRx$.重点是任意元素.也就是说(x,x)都应该在集合内部.以下命题等价:</p><ol><li>R是自反的</li><li>$I_A\subseteq R$</li><li>$R^{-1}$是自反的</li></ol><p><strong>反自反关系</strong>:对任意$x\in A$xRx均不成立.以下命题等价:</p><ol><li>R是反自反的</li><li>$R\cap I_A=\varnothing$</li></ol><p><strong>对称关系</strong>:如果$xRy$则$yRx$.<s>建一个哈希表遍历一下如果都能查到表那就没啥问题如果有元素反过来查不到那就不对称</s>以下命题等价:</p><ol><li>R是对称的</li><li>$R^{-1}$=R(真就一点渲染不多给是吧)</li></ol><p><strong>反对称关系</strong>:除了xRx那么只要有xRy必有$y\cancel Rx$.<s>建一个哈希表,特判x=y情况,只要查表找着你小子那就不满足反对称关系</s>.以下命题等价:</p><ol><li>R是反对称的</li><li>$R\cup R^{-1}\subseteq I_A$</li></ol><p><strong>传递关系</strong>:如果xRy,yRz那么xRz.有点像并查集的路径压缩,比个例子:$R={(a,a),(a,b),(b,c),(a,c)}$是一个传递性的关系,然后找到ab,bc,发现ac能缩点,然后就有传递性了…当然如果找不到就散伙了(比方说例子里面找到bc但是找不到c啥,那就不管了),以下命题等价:</p><ol><li>R是传递的</li><li>$R^2\subseteq R$</li></ol><h3 id="关系运算">关系运算</h3><p><strong>关系乘积(合成)</strong>:$R\circ S={(x,y)|x\in A,y\in A,\exist z\in A,xRz,zRy}$有点像矩阵乘法,满足乘法结合律,不满足交换律.</p><p>幂:其实就是好几个叠加在一起.规定$R^0=I_A$.有<br>$$(R^n)^m=R^{nm},R^n\circ R^m=R^{n+m}$$<br>线性代数知识:<br>$$(R\circ S)^{-1}=S^{-1}\circ R^{-1}$$<br><strong>闭包运算</strong>:设R’是R的(自反,对称,传递三选一)闭包,R是A上的二元关系,则有:</p><ol><li>R’是(自反,传递,对称三选一)的</li><li>$R\subseteq R’$</li><li>对A上任何二元关系R’‘都有$R’\subseteq R’'$(满足闭包最小)</li></ol><p>设自反闭包对称闭包传递闭包分别为rst,则有(定理计算):<br>$$\begin{aligned}r®&amp;=I_A\cup R\<br>s®&amp;=R\cup R^{-1}\<br>t®&amp;=\bigcup_{t=1}^{\infin}R^t\end{aligned}$$<br>(虽然但是不会让你算很大的无穷传递闭包的,n有穷时式子就会变成下面的)<br>$$t®=\bigcup_{t=1}^{n}R^t$$<br><strong>等价关系</strong>:有的时候需要一些关系,把某些元素看成一类,某些元素看成另一类,然后不允许有公共元素(有点像党派站队…).R是等价关系,当且仅当R具有自反性对称性传递性(搁这叠甲呢).</p><p>等价类其实就是关系R的值不相同然后进行区分…</p><p><strong>集合划分</strong>:设A的子集族C有以下条件称C为A的划分:</p><ol><li>若$B\in C$,则$B\neq\varnothing$(不能是空的)</li><li>$\bigcup_{B\in C}B=A$(合起来就是A)</li><li>对任意的$B,B’\in C$若$B\neq B’$则有$B\cap B’=\varnothing$(元素不重)</li></ol><p>tmd看定义半天看不懂听老师讲瞬间懂了,该死的数学语言,就tm不能说人话,气愤.</p><p><strong>商集</strong>:本质上还是一种划分.R是一个A上的等价关系,A是一个集合,以R的所有不同等价类为元素构成的集合为A的商集,记作A/R.<br>举个例子:设$A={1,2,3,4,5,6,7,8,9},R={(x,y)|x,y\in A&amp;&amp;x\equiv y\mod3}$,则<br>$$A/R={[1][2][3]}={ {1,4,7},{2,5,8},{3,6,9} }$$<br>其中[]表示所有元素构成的等价类.</p><p><strong>第二类斯特林数</strong>:n个球放到r个盒子里,不能有空盒,问多少种放法,略.(不会就是dp没学好,这边建议赶紧AFO现在改行学文化课还来得及)</p><h4 id="偏序关系">偏序关系</h4><p>Flu已经不止一次被卡离散了…青云杯讲解就是开始听不懂了…所以给偏序升一手四级标题个人认为很合理.</p><p>自反的, <strong>反</strong> 对称的,传递的关系被称作偏序关系.有点像小于等于的关系.(偏的意思是对于部分元素有这个关系)</p><p><strong>全序集</strong>:对于集合中的a或b,必有a&lt;b或者b&lt;a,则称A是一个全序集,全序集有时被称为链.全序集的子集仍为全序集.</p><p><strong>拟序关系</strong>:如果关系R是反自反的传递的,则称为拟序关系,记作&lt;,读作小于.</p><p><strong>最大最小元,极大极小元</strong>:分别介绍.</p><ol><li>最大元:是否存在<strong>一个</strong>元素与其他元素都是偏序关系</li><li>最小元:是否存在<strong>一个</strong>元素与其他元素都是被偏序关系</li><li>极大元:是否存在元素除自己外不是别人的偏序对象</li><li>极小元:是否存在元素除自己外不是别人的被偏序对象</li></ol><h3 id="哈斯图">哈斯图</h3><p>满足偏序关系的,中间不会有小三的两个元素中间画一条直线,小的数字放在底下,同一级偏序的放相同高度.比如24的整除关系哈斯图长这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">24</span></span><br><span class="line">  | \</span><br><span class="line">  <span class="number">8</span>  <span class="number">12</span></span><br><span class="line">  | / |</span><br><span class="line">  <span class="number">4</span>   <span class="number">6</span></span><br><span class="line">  | / |</span><br><span class="line">  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">  | /</span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后就是最恶心的分析部分了…我们先给一个简单的图分析:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">24</span>    <span class="number">36</span></span><br><span class="line">    \  /</span><br><span class="line">     <span class="number">12</span></span><br><span class="line">     |</span><br><span class="line">     <span class="number">6</span></span><br><span class="line">    / \</span><br><span class="line">   <span class="number">2</span>   <span class="number">3</span></span><br></pre></td></tr></table></figure><p>分别对于A中的部分元素找值,看表:</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">{6,12}</th><th style="text-align:left">{2,3}</th><th style="text-align:left">{24,36}</th><th style="text-align:left">{2,3,6,12}</th></tr></thead><tbody><tr><td style="text-align:left">上界</td><td style="text-align:left">12,24,36</td><td style="text-align:left">6,12,24,36</td><td style="text-align:left">无</td><td style="text-align:left">12,24,36</td></tr><tr><td style="text-align:left">上确界</td><td style="text-align:left">12</td><td style="text-align:left">6</td><td style="text-align:left">无</td><td style="text-align:left">12</td></tr></tbody></table><p><strong>上界</strong>:只要A中元素的任意元素对于任意B(B就是给你表格上面的那个部分A中的元素)都有偏序关系,则称为上界元素,其中最小出现的被称为<strong>上确界</strong>.<br><strong>极大元,最大元</strong>:唯一在最上面的叫最大元,宁缺毋滥,但是极大元可以有很多个,最小元同理.</p><p><strong>全序关系</strong>:哈斯图是一条直线的关系.</p><p><strong>良序集</strong>:对于任意A的非空子集都存在最小元.</p><p><strong>完备的</strong>:一个偏序集被称作完备的,如果</p><ol><li>A有最小元,记作$\perp_A$或者$\perp$.</li><li>A中的每一个链K都有最小上界(上确界)</li></ol><p><strong>映射</strong>:不该啊,这玩意高中讲,微积分讲,到离散还tm讲,烦不烦啊(恼)…</p><p>b叫映像,a叫原像(不是大象的象)(最有文化的一集)<br>每一个B都有A对应是<strong>满♂射</strong>(注意,A可以没取值的)<br>一对一是<strong>单射</strong>(这个时候B可以有多余没映射的)<br>如果是A对A的映射叫<strong>变换</strong>.<br>既是满射又是单射的叫双射.</p><p>逆映射,略,没啥好说的,都知道的东西.<br>$$\sigma^{-1}(\sigma(a))=a$$<br>规定:<br>$$(\tau\circ\sigma)(a)=\tau(\sigma(a))$$<br>满足结合律不满足交换律.</p><h3 id="基数">基数</h3><p>就是,我们要开始研究无限集的集合元素个数了.通过映射实现无限集基数的计算(说是说,没让你算具体值).</p><p>定义:AB是集合,假如存在AB间的双射,则AB基数相同,记作|A|=|B|,读作 <strong>等势</strong>.</p><p>例:$A(0,1),B(0,+\infin)$,构造双射$\sigma(x)=\tan(\frac{\pi}{2}x)$</p><p>一个集合的元素个数是一个非负整数.我们把自然数(非负整数)集合的基数叫做$\aleph_0$.</p><p><strong>集合的对等关系是一个等价关系.</strong></p><p>如果有从A到B单射或者从B到A满射,则$|A|\geqslant|B|$</p><p>集合的基数关系$\leqslant$:有自反性和传递性.</p><p>关于反对称性,有$\bold{Bernstein}$定理:存在A的子集A’和B的子集B’,满足|A|=|B’|和|B|=|A’|,则|A|=|B|.</p><p><strong>可数集合</strong>:一个集合元素数有限或者映射能映射到自然数集合上(双射),就叫可数集合,否则叫无穷集合.性质:</p><ol><li>可数集合的子集仍然是可数集合.</li><li>无穷个可数集合的并集还是可数集合.</li><li>AB是可数无穷集合,$A\times B$是可数集合.</li></ol><p>扯了这么多,聊聊不可数集合的事情吧…</p><ol><li>实数集不可数(康托对角线法证明的)</li><li>实数集的区间$(a,+\infin),[a,b],[a,b),(a,b],a\neq b$是不可数的</li><li>集合不能与A的所有子集建立双射</li></ol><h1>第二章 计数</h1><p>天呐课程直接忽略了这一章…那我还学个屁.</p><h1>第三章 古典数理逻辑</h1><p><strong>命题逻辑</strong>:大写字母表示事件,用P,Q等表示.否命题用$\neg$表示.($LaTeX$打法<code>\neg</code>)</p><p><strong>析取</strong>:打法<code>\lor</code>写作$\lor$,表示PQ之间P或者Q的关系,有点像集合的并集关系.<br><strong>合取</strong>:打法<code>\land</code>写作$\land$,表示PQ之间与的关系,有点像集合里面的交集关系.<br><strong>蕴含</strong>:打法<code>\to</code>写作$\to$如果P那么Q,称为P蕴含Q,也就是$P\to Q$.(注意命题逻辑和日常逻辑的区别,命题逻辑中的PQ可以任何关联没有)<br><strong>特别注意蕴含假的定义是当且仅当P是真的而Q是假的</strong>,比个例子,P:2^2=5,Q:雪是黑的,那么p-&gt;Q是真的.</p><p><strong>等价</strong>:打法<code>\leftrightarrow</code>写作$\leftrightarrow$,读作&quot;当且仅当&quot;,该命题为真当且仅当PQ同真或者同假(一样).</p><p><strong>原子</strong>:命题符号称为原子.</p><h3 id="优先级">优先级</h3><p>递增顺序如下:<br>$$\leftrightarrow,\to,\land,\lor,\neg$$<br>举例:<br>$$P\land Q\lor R\to Q\land\neg S\lor R$$<br>其实就是<br>$$(P\land(Q\lor R))\to(Q\land((\neg S)\lor R))$$<br>因为命题符号是抽象的,所以需要进行解释才有意义.解释叫做I,真值通常写作$T_1(G)$.G在所有解释下表现的值叫<strong>真值表</strong>.</p><table><thead><tr><th style="text-align:left">P</th><th style="text-align:left">Q</th><th style="text-align:left">R</th><th style="text-align:left">G</th><th style="text-align:left"></th><th style="text-align:left">P</th><th style="text-align:left">Q</th><th style="text-align:left">R</th><th style="text-align:left">G</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr></tbody></table><p>(像这样的就叫真值表)</p><p>解释I可以用原子表示,写作{xxxx},比如<br>$${\neg P,\neg Q,R}$$<br>其中加非的都是0,保持原样的都是1.</p><p><strong>恒真,恒假</strong>:不用解释吧…可满足的:G不全是假那就是可满足的.G在I下是真的叫I满足G,否则叫I弄假G.</p><p>又到了给公式的时间了:</p><ol><li>$(G\leftrightarrow H)=(G\to H)\land(H\to G)$</li><li>$(G\to H)=(\neg G\lor H)$</li><li>$G\land G=G,G\lor G=G$幂等律</li><li>$G\land H=H\land G,G\lor H=H\lor G$交换律</li><li>$G\lor(H\lor S)=(G\lor H)\lor S,G\land(H\land S)=(G\land H)\land S$结合律</li><li>$G\lor(G\land H)=G,G\land(G\lor H)=G$吸收律</li><li>$G\land(H\lor S)=(G\land H)\lor(G\land S),G\lor(H\land S)=(G\lor H)\land(G\lor S)$分配律</li><li>$G\lor0=G,G\land1=G$同一律</li><li>$G\land0=0,G\lor1=1$零一律</li><li>$\neg(G\lor H)=\neg G\land\neg H,\neg(G\land H)=\neg G\lor\neg H$摩根律</li></ol><p>非联结词:<br><strong>与非式</strong>:打法<code>\uparrow</code>写作$\uparrow$,表示两个原子先与再非.<br><strong>或非式</strong>:打法<code>\downarrow</code>写作$\downarrow$,表示两个原子先或再非.(使用这俩的不叫公式)</p><p><strong>完备集</strong>:设为Q,任意公式都可以使用Q中元素表示,且Q任意真子集没这个性质.常见完备集有:<br>$${\neg,\lor}{\neg,\land}{\uparrow}{\downarrow}$$</p><p>如果对任意I满足G,I也满足H则记为$G\implies H$,所以$G\implies H$的充要条件是$G\to H$是恒真的.</p><p><strong>共同蕴含</strong>:$(G_1\land G_2\land G_3\land…)\to H$就叫G…共同蕴含H.</p><p>若G…P共同蕴含H,则G…共同蕴含$P\to H$</p><h2 id="演绎">演绎</h2><p>若P则Q,因为P有Q,写作$(P\to Q)\land P\implies Q$<br>同理,式子反过来会有$(P\to Q)\land\neg Q\implies\neg P$<br>(原理:$\neg(P\to Q)=\neg Q\to\neg P$)</p><p>还有亿个公式:<br>$$A\to(B\to C)=(A\land B)\to C$$<br>$$P\lor Q=\neg P\to Q$$<br><strong>演绎就是从命题集合S中选几个命题,然后进行推论得到的结果.</strong> 记作从S中演绎出G,也就是$S\implies G$.</p><p>比个例子:<br>$$S={P\lor Q,Q\to R,P\to M,\neg M}$$<br>则下面的公式序列就是一个演绎:<br>$$\neg M,P\to M,\color{green}\neg P\color{black},P\lor Q,\color{green}Q\color{black}$$<br><strong>演绎的合理性</strong>:<br>$$若G\implies H_1,G\implies H_2,有G\implies(H_1\land H_2)$$</p><p><strong>演绎定理</strong>:若$S\bigcup{G}$可演绎出H,则从S可演绎出$G\to H$.<br>结论证明:把给的当前提使用就行了.</p><h3 id="基本蕴含式">基本蕴含式</h3><p>$$<br>P\land Q\implies P(Q)\<br>P(Q)\implies P\lor Q\<br>\neg P\implies(P\to Q)\<br>Q\implies(P\to Q)\<br>\neg(P\to Q)\implies P<br>$$<br>证明公式蕴含的方法:证G蕴含H</p><ol><li>真值表法</li><li>证明$G\to H$恒真</li><li>推导法</li><li>任取解释I,如果I满足G,往证I满足H</li><li>反证,设结论假,证明前提假,即$\neg H\implies\neg G$</li></ol><p>例1:设$A=(R\to P)\to Q,B=P\to Q$,证明A蕴含B:<br>证明$A\to B$恒真.<br>$$<br>\begin{aligned}<br>&amp;((R\to P)\to Q)\to(P\to Q)\=&amp;\neg(\neg(\neg R\lor P)\lor Q)\lor(\neg P\lor Q)\=&amp;((\neg R\lor P)\land\neg Q)\lor(\neg P\lor Q)\=&amp;(\neg R\land\neg Q)\lor(P\land\neg Q)\land\neg(P\land\neg Q)\=&amp;1<br>\end{aligned}<br>$$<br><strong>利用一些基本等价式推导</strong>:<br>例:$A=(R\to P)\to Q,B=P\to Q$<br>$$\begin{aligned}A&amp;=(R\to P)\to Q\&amp;=\neg(\neg R\lor P)\lor Q\&amp;=(R\lor\neg P)\lor Q\&amp;=(R\lor Q)\land(\neg P\lor Q)\&amp;=(R\lor Q)\land(P\to Q)\end{aligned}$$<br>由基本蕴含式$P\land Q\implies Q$知<br>$$(R\lor Q)\land(P\to Q)\implies(P\to Q)$$<br>即A蕴含B</p><h2 id="形式演绎法">形式演绎法</h2><p>考试必考.先来三条规则:</p><ol><li>可以随便使用前提</li><li>可以随便使用前面演绎出来某些公式的逻辑结果</li><li>如果需要演绎的公式是$P\to Q$的形式,则P可以当作附加前提使用,力图证Q</li></ol><p>注意写的时候要标规则几,防止有人蒙对(说白了就是,推理谁都会,我们要你不当人,使用离散给的东西推理)</p><p>例1:证明${(P\lor Q),(P\to R),(Q\to S)}\implies S\lor R$</p><ol><li>$P\lor Q$ 规则1(右对齐)</li><li>$\neg P\to Q$ 规则2,根据1</li><li>$Q\to S$ 规则1</li><li>$\neg P\to S$ 规则2,根据2,3</li><li>$\neg S\to P$ 规则2,根据4</li><li>$P\to R$ 规则1</li><li>$\neg S\to R$ 规则2,根据5,6</li><li>$S\lor R$ 规则2,根据7</li></ol><p>例2,证明${P\to(Q\to S),\neg R\lor P,Q}\implies R\to S$</p><ol><li>$\neg R\lor P$ 规则1</li><li>$R$ 规则3</li><li>$P$ 规则2,根据1,2</li><li>$P\to(Q\to S)$ 规则1</li><li>$Q\to S$ 规则2,根据3,4</li><li>$Q$ 规则1</li><li>$S$ 规则2,根据5,6</li><li>$R\to S$ 规则3,根据2,7</li></ol><p><strong>应用</strong>:具体问题里面先设状态,然后再使用命题.比个例子:盗窃案,事实如下:</p><ol><li>A或B盗窃了x</li><li>若A盗窃了x,作案时间不能发生在午夜前</li><li>若B证词正确,则在午夜时间屋里灯光未灭</li><li>若B证词不正确,则作案时间发生在午夜前</li><li>午夜时屋里灯光灭了</li><li>A并不富裕</li></ol><p>试用演绎法找罪犯:<br><strong>第一步:符号化:</strong><br>P:A盗窃了x<br>Q:B盗窃了x<br>R:作案时间发生在午夜前<br>S:B证词正确<br>T:在午夜时屋里灯光未关<br>U:A并不富裕<br><strong>第二步:写出各前提</strong>:<br>$$<br>G_1:P\lor Q,G_2:P\to\neg R,G_3:S\to T\G_4:\neg S\to R,G_5:\neg T,G_6:U<br>$$<br>自己演绎吧,反正是B偷了.</p><h3 id="文字-子句-短语和范式">文字,子句,短语和范式</h3><p><strong>范式的引入</strong>:我们都知道,真值表很好用但是每加一个原子都会扩大一倍的表格,极其不好用(<s>暴搜不可取</s>),所以我们引入一种叫范式的东西.</p><p><strong>文字</strong>:原子或原子的否定,如$P,\neg P$.<br><strong>子句</strong>:有限个文字的析取式叫子句.<br><strong>短语</strong>:有限个文字的合取式叫短语.<br><strong>析取范式</strong>:有限个短语的析取式,如$(A\land B)\lor(C\land D)$.<br><strong>合取范式</strong>:有限个子句的合取式,如$(A\lor B)\land(C\lor D)$.<br>(特别的,文字既是合取范式也是析取范式,一个短语或子句既可以看作合取范式也可看作析取范式.)<s>死去的数字逻辑突然开始攻击我</s></p><p>数字逻辑讲,任意范式都存在析取范式和合取范式.</p><p><strong>主析取范式</strong>:先引入极小项的概念:<br><strong>极小项</strong>:对于PQR三个原子而言,$P\land Q\land R$是,$P\land Q$不是.然后带入的时候就带1,如果非就是0.如:<br>$$\neg P\land Q\land\neg R对应010也就是m_2$$<br><strong>性质</strong>:唯一性,公式等价能用这个看,恒假能用这个看($P\land\neg P=0$)</p><p><strong>主合取范式</strong>:先引入极大项的概念:<br><strong>极大项</strong>:对于PQR三个原子而言,$P\lor Q\lor R$就是极大项.极大项带入的是非是1否则是0.比如:<br>$$\neg P\lor Q\lor R对应100也就是M_4$$<br><strong>关系</strong>:<br>$$m_4=\neg M_4$$<br><strong>怎么求</strong>:加非分割,然后分别计算.</p><h3 id="谓词逻辑">谓词逻辑</h3><p>繁琐.比方说一个1-50的集合中大于3的元素,需要整整50个命题.</p><p>有的时候命题之间是有内在联系的,但是这种关系在命题逻辑中无法表示.比如:</p><ol><li>P:凡人必死</li><li>Q:张三是凡人</li><li>R:张三必死</li></ol><p>上式叫&quot;哲学三段论&quot;,命题中应该有$(P\land Q)\implies R$,但是大家都知道,$(P\land Q)\to R$式子并不恒真,一个${P,Q,\neg R}$就能弄假式子.</p><p>所以,我们需要引入 <strong>谓词</strong> 的概念.<br><strong>谓词,个体</strong>:上式&quot;张三是人&quot;中,&quot;是人&quot;是谓词,&quot;张三&quot;是主语,又叫个体.学生,自然数都可以当个体.</p><p>设$D^n$是一个取值0或1的n元函数,表示集合D的n次笛卡尔积.</p><p>如:G(a,b)表示a高于b,则G(张三,李四)表示张三高于李四.如果张三不高于李四,则G(张三,李四)=0.</p><p><strong>量词</strong>:由于张三必死的否定是所有人都不死,所以太离谱了,上个量词限制一下.<br>$$\forall,\exist$$<br>换量词,否结论,不变的真理.(没给量词默认任意)</p><p>比个例子:任何人都会犯错误:<br>P(x):x是人<br>R(x):x会犯错误<br>$$\forall x(P(x)\to R(x))$$<br><strong>约束范围</strong>:括号内部.括号外部自由的变量可以和内部不一样的,也就是,比方说:<br>$$\forall x(P(x,y)\lor Q(x,z))\lor(R(x,v))$$<br>可以改成<br>$$\forall a(P(a,y)\lor Q(a,z))\lor(R(x,v))$$<br>(注意这个x没变)</p><p>(存在展开和任意展开:就是对于D中展开,使用$\land\lor$连接)</p><p><strong>项</strong>:<br>常量是项,变量是项.<br>若f(x1,xn)是n元函数符号,t1-tn是项,则f()也是项.<br>项是有限次使用上面俩生成的符号串.<br><strong>公式</strong>:<br>原子是公式.<br>若G,H是公式,则$\neg G,G\lor H,G\land H,G\to H,G\leftrightarrow H$也是公式.<br>若G是公式,x是自由变量,则$\forall xG,\exist xG$也是公式.<br>有限次使用上几条生成的符号串.</p><p><strong>多重量词时,注意量词顺序.写在前面的先展开.</strong></p><p><strong>等价</strong>:如果$G\leftrightarrow H$则记作等价,写作$G=H$,在任意解释I下的真值相同.<br><strong>蕴涵</strong>:如果$G\to H$恒真则有(蕴含,逻辑结果)$G\implies H$</p><p><strong>前束范式</strong>:长这样:<br>$$Q_1x_1Q_nx_nM$$<br>首先要知道,范式里面的量词是不可以随便提前的,不然会错.</p><p>对于不含x的H有:量词随便拆括号.即$\exist x(G(x)\land H)=\exist xG(x)\land H$.别的就换量词否结论就行了.</p><p>前束范式的意思就是变元作用域是整个式子,所以需要变变量名.</p><p><strong>提示</strong>:若 $\exist xG(x)$ 假则 $\forall xG(x)$ 假,若 $\forall xG(x)$ 真则 $\exist xG(x)$ 真.</p><p><strong>Skolem范式</strong>:</p><p>$$\color{red}看不懂,下一个.$$</p><h1>第四章 图与网络</h1><p>因为不会离散,Flu一直在回避图的各种问题,Flu除了Dijkstra和Kruscal生成树啥也不会,太懈怠了,大家引以为戒.</p><p><strong>图论关注的是点之间的关系而不是图的形状</strong>.<br>$G(P,L)$称为图.P是点集,L是边集(不考虑自环重边的叫简单图,离散研究简单图).<br>有点没边的图叫零图.点边状况一样的叫同构图(一个图肆意扭曲,扭曲再扭曲…的都叫同构图).<br><strong>子图,支撑子图</strong>:点集和边集都是母图子集的叫子图,点集和母图一样但是少边的叫支撑子图.</p><p><strong>图的存储</strong>:三种.关联矩阵,邻接矩阵,前向星,前向星不讲,离散不考,而且学过.<br><strong>关联矩阵</strong>:就是$O(nm)$,矩阵一边是点一边是边,表示一条边的情况(敷衍).<br><strong>邻接矩阵</strong>:就是$O(n^2)$,表示点之间的情况.<br><strong>前向星</strong>:略.</p><p><strong>度</strong>:记作$d_G(v)$表示一个点的度.(解释了吗?如解)</p><h4 id="几句废话">几句废话:</h4><ol><li>所有点的度加一起是二倍边数,i.e.<br>$$\sum_{v\in P(G)}d_G(v)=2m$$</li><li>任意有限图中,奇数度点的个数是偶数.</li></ol><p><strong>路</strong>:(一个点的序列).允许有重复,允许首尾相接.长度是点的个数-1.</p><p><strong>简单路</strong>:除了首尾可以相同之外每一个点都不能相同的路.</p><p><strong>回路</strong>:从自己到自己的长度不小于3的 <strong>简单路</strong> 叫回路.(说白了长度不小于3是为了卡死原路返回的情况)</p><h4 id="几个定义">几个定义</h4><p><strong>相连的</strong>:两个点有一条路连接,注意不只是边.<br><strong>连通分支</strong>:把P(G)依据联通关系分开(有点像找连通块),每一个拆出来的都叫一个连通分支.<br><strong>连通的</strong>:图只有一个连通分支.</p><p><strong>树</strong>:连通的无回路的图.<br><strong>森林</strong>:无回路的图(可能不连通).</p><h4 id="再来几句废话">再来几句废话</h4><ol><li><p>G是至少有一条边的有限图,且无回路,则G至少有一个点度数是1.</p></li><li><p>假如G是一个图,则下列命题等价:<br>1.G是树<br>2.G是连通的而且删任何一条边都不连通<br>3.对于G中任意两点,只有一条路连接彼此<br>如果G还是有限图,则还有这两条性质:<br>4.G不含回路,并且G有n-1条边<br>5.G连通,并且G有n-1条边</p></li><li><p>任意有限连通图必有一个支撑子图是树(叫做支撑树)</p></li><li><p>支撑树加任意一条边会产生回路</p></li></ol><h3 id="Dijkstra和Kruscal">Dijkstra和Kruscal</h3><p>略</p><h2 id="有向图-欧拉路">有向图,欧拉路</h2><p>$G(P,A)$(绩点?)叫做有向图.很好理解,graph,point,line,arrow.<br>e是弧,v=init(e)起点,v’=fin(e)终点.<br>这个时候自环有别名了,叫反身弧.</p><p>P有限就叫有限有向图.点集和边集都是子集的就是子图(自己是自己子图可还行)</p><p>为了简便有时也写作点$v\in G$或者边$e\in G$</p><p><strong>路</strong>:这里用$(e_1,e…,e_n)$表示路.<br><strong>简单有向路</strong>:所有有向边入点和出点互不相同的路.<br><strong>有向回路</strong>:到自身的简单有向路,长度可以是1或2<br><strong>强连通</strong>:所有点之间相互可到达<br><strong>根</strong>:所有点都可以到达该点(除了自己),根可以有很多个.<br><strong>漠视图</strong>:把弧看成边,删掉反身弧的无向图.<br><strong>有向树</strong>:满足以下条件:1,r是根,2,r不是任意一条弧的起点,3,其他点恰好是 <strong>一条</strong> 弧的起点.</p><h1>第五章 数论基础</h1><p>挖坑.算了填了.</p><p>$$\color{red}咱就是说，在自己写博客前能不能先看看别人的博客？\为毛非得自己写啊。。。又累又没啥用…$$</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂项</title>
      <link href="/2024/10/18/30004%E6%9D%82%E9%A1%B9/"/>
      <url>/2024/10/18/30004%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>放一些非常非常琐碎的知识.</p><h2 id="常见主副食品价格">常见主副食品价格</h2><p>面包: <code>2CNY/100g</code> <s>五十万马克一块</s></p><h2 id="Edge浏览器搜索代码">Edge浏览器搜索代码</h2><p><code>+</code> :严格搜索,就是浏览器不会认为你打错字了,照着你的搜.<br><code>site:xx.com</code> :只搜索给定网页里面的东西,比方说只搜索吾爱破解里面的某些内容(网站开发者自己偷懒不给搜索键的时候这么解决).<br><code>&quot;x&quot;</code> :必须包含的内容使用引号包起来.</p><h2 id="Windows-快捷键">Windows 快捷键</h2><p><code>Win+Shift+S</code> 截图(除了 <code>Fn+Prsc</code> 的另一个方式)<br>cmd里面 <code>copy /b 表面文件 要藏的文件 新文件保存位置</code> 可以实现文件雪藏(换拓展名就出来了)</p><h2 id="微软输入法">微软输入法</h2><p><code>Ctrl+Shift+B</code> 可以弹出来输入法的符号键,选特殊符号.</p><h2 id="泉阳泉送水规则">泉阳泉送水规则</h2><p>权益卡是年卡,每学期后台进行续期,毕业生到期不续,24级新生每次领到权益卡都是10张水券,每一期用完后台再发.</p><h2 id="TYSC青云软件社工作指南">TYSC青云软件社工作指南</h2><p>收集一些学长的箴言.</p><ol><li>区分文案的 <code>的 地 得</code> .</li><li>态度要好,大家都是公事公办,照章办事.大多数情况下不存在立即答复的决定,此时应当说 <code>和其他同学商量不能自己决定</code> 拖到明天和大家商量之后再做答复,避免匆忙中做出对自己不利的决定.</li><li>对自身有利的事情积极配合,不利的事情不催就不要干,不要让他顺利达成目的,很多事问一下 <code>凭什么</code> 很可能这事就没了.</li><li>有的时候给的越多人家想要的也越多.</li><li>原则上社团是校团委的社联直接注册的,学院的社团管理是比较新的东西.</li><li>活动开在晚上提醒一下晚上冷,记得多加衣服.</li><li>发群公告.</li><li><code>日期+活动名称+举办社团</code> 群命名格式.</li><li>日新楼前的树距离是四棵树间 <code>10.5</code> 米,清湖边是三棵树 <code>8</code> 米,拉横幅长度 <code>11</code> 米比较合适.</li><li><code>ehall.jlu.edu.cn</code> 进行申请展位,摆放展架/横幅等宣传品.然后会由 <code>刘天目</code> 老师和保卫处进行审批</li><li><code>(0431) 8516 6323</code> 如果时间比较紧可以选择联系保卫处审批电话.</li><li>加群问题可以设置成 <code>活动设置在哪个教学楼</code> ,然后活动现场解除限制,活动后恢复.</li><li><code>欧拉</code> <code>55239999</code> 是测试系统是否有效的一个替身( <code>Stand</code> ),每次发志愿时长都可以给欧拉发,欧拉存在但是只有同为替身使者才能看到</li><li>活动开在敬信楼貌似小登会来多一点?</li><li><code>必须参加社团恳谈会,百团纳新,必须成立团支部</code> .有一堆社团因为南岭去中心校区太远没去被干了.</li><li>每年的保留节目就是 <code>拟注销,然后指导单位去argue,然后又不注销了</code> ,年审没过似乎是一件典中典的每年保留节目.</li><li><code>吉林大学习近平新时代中国特色社会主义思想青年学习社</code> (学习社)居然要注销???真敢啊…</li><li>我们主张不单独交签到表,只有在需要申请志愿时长的时候才会提交名单.严格意义上这叫志愿学时发放清单,不是签到表.参与活动的事实是当事人的个人隐私,除非当事人主动同意,我们不能主动披露给第三方,所以签到表需要去交涉为什么要这个东西,因为今天敢要签到表明天敢干什么都不敢想.我们压根没整签到怎么啦!</li><li>(关于时长发放)人总是折中的.你直接说10h可能不同意,你要是说15,他可能减一减就成10了.</li><li>(关于排版)字体可以加个底,使用蒙版???感觉字看不清</li><li>11月12日就应该启动青云悲的策划了,第六届青云悲预定在25年3月左右举办,原因是今年5月的有点赶,而且和考试撞了,来的人也比较少.</li></ol><p><strong>DLC</strong> (收集一些说法)</p><ol><li>腾讯X5浏览器内核是万恶的.</li><li><code>我是谁</code> 学长好像喜欢 <code>立即停止</code> 这个说法…</li><li><code>咱喵就是说</code> 是一种 <code>咱们就是说</code> 的替换…</li><li>和学校打交道是一件比较复杂的事情.</li><li>TX发现用户的表情包用图片的逻辑缩放在聊天框会很大,于是单独对表情包进行缩小,这就是为什么拖拽到聊天框的表情包会变大.</li></ol><h2 id="吉林大学学院代码-学号xx开头的是啥学院的啥专业的">吉林大学学院代码(学号xx开头的是啥学院的啥专业的)</h2><p>下表按照代码大小排序:</p><table><thead><tr><th style="text-align:center">学号打头</th><th style="text-align:left">对应专业(学院)</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">哲学社会学院</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">文学院</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">外国语学院</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">艺术学院</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">体育学院</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">经济学院</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">法学院</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">行政学院</td></tr><tr><td style="text-align:center">9</td><td style="text-align:left">管理学院</td></tr><tr><td style="text-align:center">10</td><td style="text-align:left">数学学院</td></tr><tr><td style="text-align:center">11</td><td style="text-align:left">物理学院</td></tr><tr><td style="text-align:center">12</td><td style="text-align:left">化学学院</td></tr><tr><td style="text-align:center">13</td><td style="text-align:left">生命科学学院</td></tr><tr><td style="text-align:center">14</td><td style="text-align:left">机械与航空航天工程学院</td></tr><tr><td style="text-align:center">15</td><td style="text-align:left">汽车工程学院</td></tr><tr><td style="text-align:center">16</td><td style="text-align:left">材料科学与工程学院</td></tr><tr><td style="text-align:center">17</td><td style="text-align:left">交通学院</td></tr><tr><td style="text-align:center">18</td><td style="text-align:left">生物与农业工程学院</td></tr><tr><td style="text-align:center">19</td><td style="text-align:left">电子科学与工程学院</td></tr><tr><td style="text-align:center">20</td><td style="text-align:left">通信工程学院</td></tr><tr><td style="text-align:center">21</td><td style="text-align:left">计算机科学与技术学院</td></tr><tr><td style="text-align:center">22</td><td style="text-align:left">地球科学学院</td></tr><tr><td style="text-align:center">23</td><td style="text-align:left">地球探测科学与技术学院</td></tr><tr><td style="text-align:center">24</td><td style="text-align:left">建设工程学院</td></tr><tr><td style="text-align:center">25</td><td style="text-align:left">新能源与环境学院</td></tr><tr><td style="text-align:center">27</td><td style="text-align:left">公共卫生学院</td></tr><tr><td style="text-align:center">28</td><td style="text-align:left">药学院</td></tr><tr><td style="text-align:center">29</td><td style="text-align:left">护理学院</td></tr><tr><td style="text-align:center">33</td><td style="text-align:left">口腔医学院</td></tr><tr><td style="text-align:center">34</td><td style="text-align:left">商学院</td></tr><tr><td style="text-align:center">36</td><td style="text-align:left">公共外交学院</td></tr><tr><td style="text-align:center">37</td><td style="text-align:left">新闻与传播学院</td></tr><tr><td style="text-align:center">38</td><td style="text-align:left">考古学院</td></tr><tr><td style="text-align:center">39</td><td style="text-align:left">马克思主义学院</td></tr><tr><td style="text-align:center">40</td><td style="text-align:left">人工智能学院</td></tr><tr><td style="text-align:center">55</td><td style="text-align:left">软件学院</td></tr><tr><td style="text-align:center">65</td><td style="text-align:left">仪器科学与电气工程学院</td></tr><tr><td style="text-align:center">70</td><td style="text-align:left">临床医学院</td></tr><tr><td style="text-align:center">81</td><td style="text-align:left">动物医学学院</td></tr><tr><td style="text-align:center">82</td><td style="text-align:left">植物科学学院</td></tr><tr><td style="text-align:center">85</td><td style="text-align:left">动物科学学院</td></tr><tr><td style="text-align:center">87</td><td style="text-align:left">食品科学与工程学院</td></tr></tbody></table><p><code>|||</code></p><h2 id="剩下的杂项">剩下的杂项</h2><ol><li><p>橙王(ko)的色号是 <code>CC6600</code> .</p></li><li><p>15年那会的老梗现在有新解了:<br>本科生硕士生博士生生生不息<br>上一届这一届下一届届届失业<br>横批:愿读服输<br><em>现在新增:</em><br>本科生硕士生博士生生生不息<br>逸夫楼敬信楼鼎新楼楼楼可跳<br>横批目前还没有</p></li><li><p><code>一宽</code> 是 <code>883</code> ,好像源于山本宽这个人.( <s>一坤是2.5</s> )讲了这个之后就要引出BD销量与动画成功相关的数据:</p></li></ol><table><thead><tr><th style="text-align:center">分区</th><th style="text-align:center">大概销量</th><th style="text-align:center">代表</th></tr></thead><tbody><tr><td style="text-align:center">圆神</td><td style="text-align:center">7w</td><td style="text-align:center">魔法少女小圆</td></tr><tr><td style="text-align:center">传说</td><td style="text-align:center">5w</td><td style="text-align:center">轻音少女一期二期</td></tr><tr><td style="text-align:center">史诗</td><td style="text-align:center">1w</td><td style="text-align:center">点兔 摇曳露营 向阳素描</td></tr><tr><td style="text-align:center">成功</td><td style="text-align:center">3.8k</td><td style="text-align:center">A频道 黄金拼图 new_game</td></tr><tr><td style="text-align:center">保本</td><td style="text-align:center">2.5k</td><td style="text-align:center">花舞少女 调教咖啡厅 恋爱研究所</td></tr><tr><td style="text-align:center">较次</td><td style="text-align:center">1宽</td><td style="text-align:center">anne_happt 食梦者 乌拉拉迷路帖</td></tr><tr><td style="text-align:center">斯特拉级</td><td style="text-align:center">&lt;1宽</td><td style="text-align:center">灵感少女 斯特拉的魔法</td></tr></tbody></table><p>听说芙莉莲bd销量只有八千多…首先,芙莉莲bd听说是一万霓虹元,比别的贵.其次,芙莉莲好像中心不在bd这里.然后,芙莉莲已经确定第二季了(from 20240928),总监好像没变,我只希望音乐还是 <code>Evan Call</code> 大佬操刀.</p><ol start="4"><li><p>Github有的时候能登上有的时候登不上要看DNS解析到哪,所以这是一种半看脸的行为,拼运气(以及魔法),好在泥鸡是基本不管魔法的…</p></li><li><p>百度网盘的提取码只有 <code>4</code> 位,所以看到非常复杂提取码的时候要当成智商测试那种的解密(中心对称啥的,etc)去做,不要以为是ctf题那种的中文字符什么的…(唐完了,鉴定为打 <code>Hackergame</code> 打的)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>食梦志</title>
      <link href="/2024/10/16/30002%E9%A3%9F%E6%A2%A6%E5%BF%97/"/>
      <url>/2024/10/16/30002%E9%A3%9F%E6%A2%A6%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>记录Flu做梦梦到的东西.不定期更新.<br>唉,做梦记录下来真记不住…但是还是能更多少就更多少吧…</p><p>其实也不一定是非得做梦了,当成一个状态的记录也行.</p><h2 id="焦糊味-20241027">焦糊味(20241027)</h2><p>Flu在玩多娜多娜的时候闻到了一种奇怪的焦糊味,这种味道并不是外界能闻到的,像是Flu感觉到的.Flu玩过了多娜多娜一周目以后,仿佛生活中少了点什么.多娜多娜真的是一部神作,让Flu久违地感受到了自己在玩游戏的那种感觉,特别开心,特别充实,就这样.焦糊味有点那种快节奏的感觉.</p><h2 id="卜者之卦-20241018">卜者之卦(20241018)</h2><p>世贸天街在沃尔玛倒闭之后,地下一层的商场荒凉了两年,然后北国接手了.<br>2024年8月29号(大概)开始营业,笔者这个时候已经回学校了.<br>母云,刚开始几天人特别多,后面不到五天就没人了.</p><p>母云,姥姥之前认识一个卜者,是姥爷的好朋友.有一天,卜者云,让姥姥不要离姥爷太远.姥姥也许是没当回事,也许是忘了,有一天出去耕地,回来的时候姥爷就已经去世了.后来,卜者来拜访姥姥,问候近况,又说出了一句话:&quot;2025年要多屯点粮食.&quot;Flu陷入了深思.这句话是什么意思?卜者说的话一般比较隐晦,这点能理解,但是Flu真的害怕打仗,Flu不希望有一天真的战火烧到自己头上.Flu知道,现代的核武器48小时之后辐射就会衰退,就能出地面了,战后废土也没有那么夸张,但是Flu依旧想象不到,中美两个超级大国,而且彼此离得还很远,打起仗来会是什么样的.中国人多,真打起仗来必须团结,不然就会有无穷无尽的内乱,…</p><p>想到这里,Flu不禁陷入了UB(Undefined Behavior),不知道该怎么做.如何保存自己?Flu虽然只希望活四十岁,但是现在连四十都还没到啊…</p><p>不管了,记住,战时先屯糖,其次盐,最后是维生素,然后就是屯枪和弓箭啊,弩啊,刀啊之类的,防弹插板也可以考虑一下,急救物品准备好,常见药品准备好,然后就是,电力啥的战时可能会断,准备好备用电源.(柴油机行吗)</p><h2 id="火腿群-20241114">火腿群(20241114)</h2><p>做梦梦到了火腿群有人在聊很色色的东西,大家一呼百应线下真实(Flu对于线下真实的定义是线下见面,不是线下打架).</p><h2 id="日新楼-20241114午">日新楼(20241114午)</h2><p>做梦梦到在日新楼,看到有人发了洛谷某个题,封面是一张himitsu画师的画,然后Flu说了 <code>no alphabet games anymore</code> (不要再用生活中的东西拼字母),是从alan abtv那里火柴人拼字联想到的.</p><h2 id="朱可球-20241118">朱可球(20241118)</h2><p>做梦的Flu去-1楼的超市买买买,看到一个叫做朱可球的巧克力球,是那种膨化的心外面裹着一层巧克力的吃的,服务员免费给Flu做了一个,制作过程非常好看.<br>Flu看到了板栗味的饼干,那个饼干挺好吃的,比较轻,夹心的.<br>Flu听到有友台在呼叫,地下-1层的无线电信号也很好.</p><h2 id="阅兵-20241120">阅兵(20241120)</h2><p>梦到了去看阅兵,但是Flu原先在阅兵要走的路径上,走的时候慌不择路,掉了蓝色的铅笔盒,急救包(里面装的笔)然后赶紧跑了,兵踩到铅笔盒东倒西歪,阵型乱的一批,好在这里离主席台很远.回家梦到的是从奶奶家裸着冲回家,天下着大雨,奶奶在我家,我给奶奶打电话要电梯卡,奶奶扔掉一张,Flu高兴去接,发现是饭卡,于是Flu再给奶奶打电话,奶奶说电梯卡在家,回家再拿,但是我为什么不能直接让奶奶把电梯放下来呢,总之Flu回到了家.</p><h2 id="无名-20241127">无名(20241127)</h2><p>早上四点就醒了,真离谱(下床喝点水接着睡)<br>梦到因为陶鑫打游戏太吵把他告上法庭结果证词没念完就下课了</p><p>去农村(姥姥家),里面有一只特别大的鸡，腿很粗,有半个人高</p><p>梦到我妈开车刹车不及时撞死了一个老太太,但是我妈赌这个老太太没人管没人追责就不会坐牢,于是直接逃逸了,事实证明在Flu的梦中,没有事后的责任追上她</p><p>然后是bash的奇妙性质的探索(忘掉内容了)</p><h2 id="无名-20241127午">无名(20241127午)</h2><p>从下午五点半睡到了八点…<br>梦到去美国,然后买了一种糖(?也可能是雌激素,Flu不知道为啥手上有这个)有25美分的大号和5美分的小号,上面印着呢,走在去地下超市的扶梯上,因为Flu正在看包装,于是后面的人就问,for me?Flu人生地不熟赶紧点头,然后那个人抓了好多,而且打算打劫我,在我身上摸来摸去,但是我身上没有别的东西,另一个黄头发白种男孩赶了他,说他比较不友善,但是感谢Flu.带着Flu去看了看地下超市,正好碰到有阿sir在抓逃犯,大家似乎对这件事习以为常…</p><h2 id="蝇-20241205午">蝇(20241205午)</h2><p>做梦梦到了很多很多苍蝇,以及苍蝇的历史(好像是杀苍蝇的历史,好多苍蝇在Flu的被子上,非常反感,手挥舞了一下赶苍蝇然后醒了)</p><h2 id="唐三-20271217">唐三(20271217)</h2><p>唐三继承神位（？）有四关，第一关是打一个守门人，唐三武魂真身时一条和饮月差不多颜色的水龙，一招把守门人攥在龙爪里秒了，第二关是走一段路，唐三顶着环境的头晕和沉重的脚步昏昏沉沉走过去了。第三关是和Flu玩打地鼠，一人拿一个木锤子，但是Flu害怕蜘蛛，比赛环境是夏天旁边还一堆树导致蜘蛛网特别多，Flu吓到直接弃赛了，第四关不知道</p><h2 id="病-20241218">病(20241218)</h2><p>昨天晚上特别难受，好像睡不着光打滚<br>肚子疼 但是懒得下床上厕所是这样的</p><h2 id="天台火车站-20241222">天台火车站(20241222)</h2><p>做梦梦到一个游戏叫“天台火车站（老天灭我）”讲的是贫困孩子卖惨的故事。你手下有两个孩子，每个孩子有好多属性，每天可以选择孩子去乞讨（只有一个），然后获得钱，然后得到的钱用于探索升级装备用，对话框里面的文字可以当一次性的挡箭牌，夏天时间流逝加速（好像只能一个孩子乞讨了，其他时间是俩），有事件，有好的有坏的，比方说Flu抽到的进入夏天的事件就是一个孩子被粉碎了（真正的死,挺惨的），但是给了89个金币，然后Flu醒了</p><h2 id="QT桑-20241227午">QT桑(20241227午)</h2><p>梦到BA3QT桑带着我们去市政府,但是其实那是一个大号工厂.梦到了很多的建筑,和楼梯,仿佛真的一样,好多台友也和我一起去了.不知道为啥,总之Flu最后在怕一段管道的时候没劲了还是被粘住了,反正是爬不动,眼见着BA3QT越走越远…</p><p>然后醒了,接着睡,又做了一个梦,这回梦到Alice(生化危机的女主)以及好多不认识的大侠一起打架,我记得Flu看到有一个大侠和Alice打架前打了一针肾上腺素,然后Flu非常害怕那样的针头扎在身上,尤其是肚子…然后就被吓醒了.</p><h2 id="超速列车-20241229">超速列车(20241229)</h2><p>Flu梦到从上海到西安去打ecfinal,然后队友坐船去西安,Flu选择坐飞机去,但是碰到早九的飞机,晚到飞机飞走了…于是看看有没有别的交通工具,发现有一个叫超速列车的东西,从上海到西安只需要10块,于是赶紧排队买票,结果自己多买了十块的(双人票),非常不爽,给我爸打了个电话.结果坐上才知道是一站十块,我的二十正好能到,然后又开心了起来.Flu记得还有去新加坡的列车,开了一个很大的楼,专门查护照,只经过不下车是不查护照的.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAM</title>
      <link href="/2024/10/14/30003HAM/"/>
      <url>/2024/10/14/30003HAM/</url>
      
        <content type="html"><![CDATA[<p>HAM特辑,记录知识点以及考试小技巧.</p><h2 id="说什么">说什么</h2><p><code>TIME 18:50</code> 左右将会进行晚间点名.</p><h3 id="中继台主持人说">中继台主持人说</h3><p><s>(开始)</s>: 各位在线收听的友台,大家晚上好.今天是2024年11月21日,现在是439.850兆赫, <code>BR2JCC</code> 长春市业余无线电应急中继台台网点名时间.今天由主控台值班员 <code>BG2IEE</code> 主持中继台晚间台网点名活动.使用设备车台小功率发射,QTH是在4G广场附近有参加点名的友台请您依次过来.<s>(注意IE老师读E不念echo念ai fai ko,让Flu找了半天才找到具体叫啥)</s></p><p><s>(回答)</s>: <code>BG2KHY</code> 老朋友晚上好,您是今天第一位参加晚间点名的友台,您使用的设备是车台小功率发射,QTH在百宜会馆,主控台抄收您的信号是59,感谢您对中继台的支持和关注, <code>73</code> <s>(读seventy-three)</s> <code>goodbye</code> 请接下位友台.</p><p><s>(准点报时???)</s>: 各位在线守听的友台,现在是439.850兆赫, <code>BR2JCC</code> 长春市业余无线电应急中继台台网点名时间,有参加点名的友台,请您依次过来.</p><p><s>(附带话语)</s>: 还有没有参加点名的友台?</p><p><s>(结束)</s>: 各位在线守听的友台,今日共有23位友台参加了长春市业余无线电应急中继台的晚间台网点名活动,在这里中继台管理团队,感谢大家对中继台的支持和关注,同时也祝439.850兆赫的电波在长春的上空,把美好的祝福,送给所有在线收听的友台,2024年11月21日晚间台网点名结束,下次再会.</p><h3 id="响应中继台说">响应中继台说</h3><p><code>BG2IE</code> IE老师晚上好,各位在线守听的的友台大家晚上好.这里是 <code>B2/BD6IZI</code> 参加长春市业余无线电业余中继台晚间台网点名活动.我的QTH在吉林大学中心校区,使用手台大功率发射,抄收中继信号59,请问IE老师是否抄收 Over.</p><h3 id="日常CQ呼叫说">日常CQ呼叫说</h3><h3 id="相应CQ呼叫说">相应CQ呼叫说</h3><h2 id="稀少的呼号人">稀少的呼号人</h2><h3 id="南区校友">南区校友</h3><p><code>BD6IZI</code></p><h3 id="女性火腿">女性火腿</h3><p><code>BG2LXA</code></p><h2 id="异地发射注意事项">异地发射注意事项</h2><p>经群友指出,异地发射在呼号前加上分区的真正原因是告诉大家当前的地理位置,防止有人误认为此电波来自很远很远的地方,造成不必要的麻烦.下面是分区</p><table><thead><tr><th style="text-align:left">分区</th><th style="text-align:left">呼号前缀</th><th style="text-align:left">呼号范围</th></tr></thead><tbody><tr><td style="text-align:left">北京(1)</td><td style="text-align:left"><code>B1/</code></td><td style="text-align:left">AA-ZZ,AAA-XZZ</td></tr><tr><td style="text-align:left">黑龙江(2)</td><td style="text-align:left"><code>B2/</code></td><td style="text-align:left">AA-HZ,AAA-HZZ</td></tr><tr><td style="text-align:left">吉林(2)</td><td style="text-align:left"><code>B2/</code></td><td style="text-align:left">IA-PZ,IAA-PZZ</td></tr><tr><td style="text-align:left">辽宁(2)</td><td style="text-align:left"><code>B2/</code></td><td style="text-align:left">QA-ZZ,QAA-XZZ</td></tr><tr><td style="text-align:left">天津(3)</td><td style="text-align:left"><code>B3/</code></td><td style="text-align:left">AA-FZ,AAA-FZZ</td></tr><tr><td style="text-align:left">内蒙古(3)</td><td style="text-align:left"><code>B3/</code></td><td style="text-align:left">GA-LZ,GAA-LZZ</td></tr><tr><td style="text-align:left">河北(3)</td><td style="text-align:left"><code>B3/</code></td><td style="text-align:left">MA-RZ,MAA-RZZ</td></tr><tr><td style="text-align:left">山西(3)</td><td style="text-align:left"><code>B3/</code></td><td style="text-align:left">SA-XZ,SAA-XZZ</td></tr><tr><td style="text-align:left">上海(4)</td><td style="text-align:left"><code>B4/</code></td><td style="text-align:left">AA-HZ,AAA-HZZ</td></tr><tr><td style="text-align:left">山东(4)</td><td style="text-align:left"><code>B4/</code></td><td style="text-align:left">IA-PZ,IAA-PZZ</td></tr><tr><td style="text-align:left">江苏(4)</td><td style="text-align:left"><code>B4/</code></td><td style="text-align:left">QA-ZZ,QAA-XZZ</td></tr><tr><td style="text-align:left">浙江(5)</td><td style="text-align:left"><code>B5/</code></td><td style="text-align:left">AA-HZ,AAA-HZZ</td></tr><tr><td style="text-align:left">江西(5)</td><td style="text-align:left"><code>B5/</code></td><td style="text-align:left">IA-PZ,IAA-PZZ</td></tr><tr><td style="text-align:left">福建(5)</td><td style="text-align:left"><code>B5/</code></td><td style="text-align:left">QA-ZZ,QAA-XZZ</td></tr><tr><td style="text-align:left">安徽(6)</td><td style="text-align:left"><code>B6/</code></td><td style="text-align:left">AA-HZ,AAA-HZZ</td></tr><tr><td style="text-align:left">河南(6)</td><td style="text-align:left"><code>B6/</code></td><td style="text-align:left">IA-PZ,IAA-PZZ</td></tr><tr><td style="text-align:left">湖北(6)</td><td style="text-align:left"><code>B6/</code></td><td style="text-align:left">QA-ZZ,QAA-XZZ</td></tr><tr><td style="text-align:left">湖南(7)</td><td style="text-align:left"><code>B7/</code></td><td style="text-align:left">AA-HZ,AAA-HZZ</td></tr><tr><td style="text-align:left">广东(7)</td><td style="text-align:left"><code>B7/</code></td><td style="text-align:left">IA-PZ,IAA-PZZ</td></tr><tr><td style="text-align:left">广西(7)</td><td style="text-align:left"><code>B7/</code></td><td style="text-align:left">QA-ZZ,QAA-XZZ</td></tr><tr><td style="text-align:left">海南(7)</td><td style="text-align:left"><code>B7/</code></td><td style="text-align:left">YA-ZZ,YAA-ZZZ</td></tr><tr><td style="text-align:left">四川(8)</td><td style="text-align:left"><code>B8/</code></td><td style="text-align:left">AA-FZ,AAA-FZZ</td></tr><tr><td style="text-align:left">重庆(8)</td><td style="text-align:left"><code>B8/</code></td><td style="text-align:left">GA-LZ,GAA-LZZ</td></tr><tr><td style="text-align:left">贵州(8)</td><td style="text-align:left"><code>B8/</code></td><td style="text-align:left">MA-RZ,MAA-RZZ</td></tr><tr><td style="text-align:left">云南(8)</td><td style="text-align:left"><code>B8/</code></td><td style="text-align:left">SA-XZ,SAA-XZZ</td></tr><tr><td style="text-align:left">陕西(9)</td><td style="text-align:left"><code>B9/</code></td><td style="text-align:left">AA-FZ,AAA-FZZ</td></tr><tr><td style="text-align:left">甘肃(9)</td><td style="text-align:left"><code>B9/</code></td><td style="text-align:left">GA-LZ,GAA-LZZ</td></tr><tr><td style="text-align:left">宁夏(9)</td><td style="text-align:left"><code>B9/</code></td><td style="text-align:left">MA-RZ,MAA-RZZ</td></tr><tr><td style="text-align:left">青海(9)</td><td style="text-align:left"><code>B9/</code></td><td style="text-align:left">SA-XZ,SAA-XZZ</td></tr><tr><td style="text-align:left">新疆(0)</td><td style="text-align:left"><code>B0/</code></td><td style="text-align:left">AA-FZ,AAA-FZZ</td></tr><tr><td style="text-align:left">西藏(0)</td><td style="text-align:left"><code>B0/</code></td><td style="text-align:left">GA-LZ,GAA-LZZ</td></tr><tr><td style="text-align:left">香港</td><td style="text-align:left"><code>VR2/</code></td><td style="text-align:left">VR2</td></tr><tr><td style="text-align:left">澳门</td><td style="text-align:left"><code>XX9/</code></td><td style="text-align:left">XX9</td></tr><tr><td style="text-align:left">台湾</td><td style="text-align:left"><code>BV/</code></td><td style="text-align:left">BV等1-9</td></tr></tbody></table><p>电台种类:呼号第二个字母除 <code>ABCDEFGHIJKRSTYZ</code> 外的其他字母备用.<br>业余信标台和空间业余无线电台呼号是 <code>J</code><br>业余中继台是 <code>R</code></p><h2 id="相关网站">相关网站</h2><p><a href="http://www.qrz.cn/home/">呼号查人1(qrz.cn)</a><br><a href="https://www.qrz.com/page/site.html">呼号查人2(qrz.com)</a><br><a href="http://qrzworld.com/">呼号查人3(火腿助手)</a></p><h1>长春本地</h1><p><code>439.850</code> 和 <code>438.500</code></p><h2 id="摩斯电码表以及称呼">摩斯电码表以及称呼</h2><p>首先,短的 <code>.</code> 读 <code>嘀</code> ,长的 <code>-</code> 读 <code>嗒</code> .</p><table><thead><tr><th style="text-align:left">Character</th><th style="text-align:left">Morse Code</th><th style="text-align:left">Telephony</th><th style="text-align:left">Phonic</th></tr></thead><tbody><tr><td style="text-align:left"><code>A</code></td><td style="text-align:left"><code>.-</code></td><td style="text-align:left">Alfa</td><td style="text-align:left">(AL-FAH)</td></tr><tr><td style="text-align:left"><code>B</code></td><td style="text-align:left"><code>-...</code></td><td style="text-align:left">Bravo</td><td style="text-align:left">(BRAH-VOH)</td></tr><tr><td style="text-align:left"><code>C</code></td><td style="text-align:left"><code>-.-.</code></td><td style="text-align:left">Charlie</td><td style="text-align:left">(CHAR-LEE)or(SHAR-LEE)</td></tr><tr><td style="text-align:left"><code>D</code></td><td style="text-align:left"><code>-..</code></td><td style="text-align:left">Delta</td><td style="text-align:left">(DELL-TAH)</td></tr><tr><td style="text-align:left"><code>E</code></td><td style="text-align:left"><code>.</code></td><td style="text-align:left">Echo</td><td style="text-align:left">(ECK-OH)</td></tr><tr><td style="text-align:left"><code>F</code></td><td style="text-align:left"><code>..-.</code></td><td style="text-align:left">Foxtrot</td><td style="text-align:left">(FOKS-TROT)</td></tr><tr><td style="text-align:left"><code>G</code></td><td style="text-align:left"><code>--.</code></td><td style="text-align:left">Golf</td><td style="text-align:left">(GOLF)</td></tr><tr><td style="text-align:left"><code>H</code></td><td style="text-align:left"><code>....</code></td><td style="text-align:left">Hotel</td><td style="text-align:left">(HOH-TEL)</td></tr><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left"><code>..</code></td><td style="text-align:left">India</td><td style="text-align:left">(IN-DEE-AH)</td></tr><tr><td style="text-align:left"><code>J</code></td><td style="text-align:left"><code>.---</code></td><td style="text-align:left">Juliett</td><td style="text-align:left">(JEW-LEE-ETT)</td></tr><tr><td style="text-align:left"><code>K</code></td><td style="text-align:left"><code>-.-</code></td><td style="text-align:left">Kilo</td><td style="text-align:left">(KEY-LOH)</td></tr><tr><td style="text-align:left"><code>L</code></td><td style="text-align:left"><code>.-..</code></td><td style="text-align:left">Lima</td><td style="text-align:left">(LEE-MAH)</td></tr><tr><td style="text-align:left"><code>M</code></td><td style="text-align:left"><code>--</code></td><td style="text-align:left">Mike</td><td style="text-align:left">(MIKE)</td></tr><tr><td style="text-align:left"><code>N</code></td><td style="text-align:left"><code>-.</code></td><td style="text-align:left">November</td><td style="text-align:left">(NO-VEM-BER)</td></tr><tr><td style="text-align:left"><code>O</code></td><td style="text-align:left"><code>---</code></td><td style="text-align:left">Oscar</td><td style="text-align:left">(OSS-CAH)</td></tr><tr><td style="text-align:left"><code>P</code></td><td style="text-align:left"><code>.--.</code></td><td style="text-align:left">Papa</td><td style="text-align:left">(PAH-PAH)</td></tr><tr><td style="text-align:left"><code>Q</code></td><td style="text-align:left"><code>--.-</code></td><td style="text-align:left">Quebec</td><td style="text-align:left">(KEH-BECK)</td></tr><tr><td style="text-align:left"><code>R</code></td><td style="text-align:left"><code>.-.</code></td><td style="text-align:left">Romeo</td><td style="text-align:left">(ROW-ME-OH)</td></tr><tr><td style="text-align:left"><code>S</code></td><td style="text-align:left"><code>...</code></td><td style="text-align:left">Sierra</td><td style="text-align:left">(SEE-AIR-RAH)</td></tr><tr><td style="text-align:left"><code>T</code></td><td style="text-align:left"><code>-</code></td><td style="text-align:left">Tango</td><td style="text-align:left">(TANG-GO)</td></tr><tr><td style="text-align:left"><code>U</code></td><td style="text-align:left"><code>..-</code></td><td style="text-align:left">Uniform</td><td style="text-align:left">(YOU-NEE-FORM)or(OO-NEE-FORM)</td></tr><tr><td style="text-align:left"><code>V</code></td><td style="text-align:left"><code>...-</code></td><td style="text-align:left">Victor</td><td style="text-align:left">(VIK-TAH)</td></tr><tr><td style="text-align:left"><code>W</code></td><td style="text-align:left"><code>.--</code></td><td style="text-align:left">Whiskey</td><td style="text-align:left">(WISS-KEY)</td></tr><tr><td style="text-align:left"><code>X</code></td><td style="text-align:left"><code>-..-</code></td><td style="text-align:left">Xray</td><td style="text-align:left">(ECKS-RAY)</td></tr><tr><td style="text-align:left"><code>Y</code></td><td style="text-align:left"><code>-.--</code></td><td style="text-align:left">Yankee</td><td style="text-align:left">(YANG-KEY)</td></tr><tr><td style="text-align:left"><code>Z</code></td><td style="text-align:left"><code>--..</code></td><td style="text-align:left">Zulu</td><td style="text-align:left">(ZOO-LOO)</td></tr></tbody></table><p>字符:(打错了发连续的好几个点然后整句重发)</p><table><thead><tr><th style="text-align:left">Character</th><th style="text-align:left">Morse Code</th><th style="text-align:left">Telephony</th></tr></thead><tbody><tr><td style="text-align:left"><code>1</code></td><td style="text-align:left"><code>.----</code></td><td style="text-align:left">ONE</td></tr><tr><td style="text-align:left"><code>2</code></td><td style="text-align:left"><code>..---</code></td><td style="text-align:left">TWO</td></tr><tr><td style="text-align:left"><code>3</code></td><td style="text-align:left"><code>...--</code></td><td style="text-align:left">THREE</td></tr><tr><td style="text-align:left"><code>4</code></td><td style="text-align:left"><code>....-</code></td><td style="text-align:left">FOUR</td></tr><tr><td style="text-align:left"><code>5</code></td><td style="text-align:left"><code>.....</code></td><td style="text-align:left">FIVE</td></tr><tr><td style="text-align:left"><code>6</code></td><td style="text-align:left"><code>-....</code></td><td style="text-align:left">SIX</td></tr><tr><td style="text-align:left"><code>7</code></td><td style="text-align:left"><code>--...</code></td><td style="text-align:left">SEVEN</td></tr><tr><td style="text-align:left"><code>8</code></td><td style="text-align:left"><code>---..</code></td><td style="text-align:left">EIGHT</td></tr><tr><td style="text-align:left"><code>9</code></td><td style="text-align:left"><code>----.</code></td><td style="text-align:left">NINE</td></tr><tr><td style="text-align:left"><code>0</code></td><td style="text-align:left"><code>-----</code></td><td style="text-align:left">ZERO</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left"><code>--..--</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>/</code></td><td style="text-align:left"><code>-..-.</code></td><td style="text-align:left">PORTABLE</td></tr><tr><td style="text-align:left"><code>()</code></td><td style="text-align:left"><code>-.--.-</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>-</code></td><td style="text-align:left"><code>-....-</code></td><td style="text-align:left"></td></tr></tbody></table><h2 id="杂项">杂项</h2><p>原则上,无线电证应当尽早考,相关手续要尽早办.</p><p><code>2014年</code> 浙江省禁u段.<br><code>2024年8月</code> 上海市也开始禁u段,所有审批纯u段的电台均延缓办理.<br><code>2024年2月</code> 辽宁现在没v段的好像也不给批了…<br><code>2024年11月29日</code> 上海全方面禁止无线电uv频段,而且限制发射功率不得超过1W,因为太过严苛以及细化,见下表(一句话,上海uv全禁了,只能用短波或者当 $黑电台$ ):</p><table><thead><tr><th style="text-align:center">频率</th><th style="text-align:center">是否可用</th></tr></thead><tbody><tr><td style="text-align:center">135.7-137.8 kHz</td><td style="text-align:center">允许,辐射功率严禁高于1W</td></tr><tr><td style="text-align:center">1800-2000 kHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">5351.5-5366.5 kHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">10100-10150 kHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">146-148 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">430-440 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">1240-1260 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">1260-1300 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">2300-2450 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">3300-3400 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">3400-3500 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">5650-5725 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">5725-5830 MHz</td><td style="text-align:center">禁止</td></tr><tr><td style="text-align:center">5830-5850 MHz</td><td style="text-align:center">禁止</td></tr></tbody></table><h2 id="QSL">QSL</h2><p>这里存放Flu设计并制作的QSL卡片合集,来卡必回.</p><h3 id="关于QSL卡片夹带私货放自己博客的事">关于QSL卡片夹带私货放自己博客的事</h3><p>博客里面有好多Flu的联系方式, QQ 微信 github 电子邮件 Bili 都有,你还想咋样?这个用途不用多说吧.寄卡的保证啊</p><p>This is BG2MJG, 73,再见.</p><h3 id="卡背">卡背</h3><p>通用版本,只有一种.</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/s5qgswwz.png" alt=""></p><h3 id="卡正">卡正</h3><p>第一张:吉大夜景(发行量:第一版30张)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1j1h0hqf.png" alt=""></p><p>第二张:吉大清湖(发行量:第一版30张)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/wr670psr.png" alt=""></p><p>第三张:Flu本人爆照(发行量:第一版30张)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mv6yfavc.png" alt=""></p><p>第四张:Flu弟弟的照片,算是隐藏款了,尽请期待.(发行量:第一版30张)</p><p>第五张:没有呢还</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树剖</title>
      <link href="/2024/10/12/10024%E6%A0%91%E5%89%96/"/>
      <url>/2024/10/12/10024%E6%A0%91%E5%89%96/</url>
      
        <content type="html"><![CDATA[<h2 id="树论">树论</h2><h3 id="树上差分-点">树上差分(点)</h3><p>和树上前缀和差不多?就是, <code>dat[i]</code> 表示从根到i的路径上的所有数据的和,然后求 <code>u,v</code> 上的数据就是<br>$$dat[u]+dat[v]-2dat[lca(u,v)]$$<br>树上差分就是,比如路径uv上所有点加1,那就是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dat[u]++;</span><br><span class="line">dat[v]++;</span><br><span class="line">dat[<span class="built_in">lca</span>(u,v)]--;</span><br><span class="line">dat[<span class="built_in">fa</span>(<span class="built_in">lca</span>(u,v))]--;</span><br></pre></td></tr></table></figure><p>然后利用回溯法求出前缀和(此时dat代表子树的数据,不是根到节点的数据).</p><h3 id="树上差分-边">树上差分(边)</h3><p>边权转换为点权很简单就是两个点直接连接的边的权放在深度更高的那个点的位置就行了.这个时候就是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dat[u]++;</span><br><span class="line">dat[v]--;</span><br><span class="line">dat[<span class="built_in">lca</span>(u,v)]-=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>两个点之间查询也要减掉1遍的lca,因为这个存的是子树…</p><h2 id="真正的树剖部分">真正的树剖部分</h2><p>Flu:长大以后,我要学树剖,麻麻可高兴了,给我爱吃的大嘴巴子…</p><p>非得学一些用不到的算法干啥…</p><h2 id="代码解释">代码解释</h2><h3 id="处理u到v的最短路径">处理u到v的最短路径</h3><p>id就是dfn.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qRange</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;<span class="comment">//当两个点不在同一条链上 </span></span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);<span class="comment">//把x点改为所在链顶端的深度更深的那个点</span></span><br><span class="line">        res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]);<span class="comment">//ans加上x点到x所在链顶端 这一段区间的点权和</span></span><br><span class="line">        ans+=res;</span><br><span class="line">        ans%=mod;<span class="comment">//按题意取模 </span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//把x跳到x所在链顶端的那个点的上面一个点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直到两个点处于一条链上</span></span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);<span class="comment">//把x点深度更深的那个点</span></span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y]);<span class="comment">//这时再加上此时两个点的区间和即可</span></span><br><span class="line">    ans+=res;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理rt为根的子树">处理rt为根的子树</h3><p>结论:树rt的子树的区间是 <code>[dfn[n],dfn[n]+siz[n]-1]</code> .</p><p>所以这玩意比两个点还好改.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cchangesub</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cchange</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[rt],dfn[rt]+siz[rt]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理边权">处理边权</h3><p>边权默认放在深度更高的节点的位置即可.然后修改就正常修改,最后减掉一倍LCA的边权即可.(查询也一样)</p><p>参考代码如下(都长这个样子其实,因为树剖和线段树没太大关系,树剖只是把树拍扁了,数据结构是线段树维护的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t0p[x]!=t0p[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[t0p[x]]&lt;dep[t0p[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">aadd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[t0p[x]],dfn[x],<span class="number">1</span>);</span><br><span class="line">x=_fa[t0p[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">aadd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">aadd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求LCA">求LCA</h3><p>非常直球.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t0p[u]!=t0p[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[t0p[u]]&gt;dep[t0p[v]])</span><br><span class="line">u=_fa[t0p[u]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v=_fa[t0p[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[u]&gt;dep[v]?v:u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树剖解决的问题">树剖解决的问题</h2><p><code>LCA</code> :真好啊,再也不用记倍增lca的板子了…</p><h2 id="例题">例题</h2><ol><li>猫猫与自动售货机,给一个无向图,每个点有点权x,每次有如下操作:<br><code>1 x</code> :点x权值-1(保证不会出现负权).<br><code>2 x</code> :查询所有点的点权乘到x的距离的和.</li></ol><p>对于距离有以下公式:<br>$$\mathrm{dis}(u,v)=\mathrm{dep}(u)+\mathrm{dep}(v)-2\mathrm{dep}(\mathrm{LCA}(u,v))$$<br>于是记所有点权集合为 $S$ ,有<br>$$\begin{aligned}\mathrm{query}(x)=&amp;\sum_{k\in S}\mathrm{dis}(k,x)\=&amp;\sum_{k\in S}\mathrm{dep}(k)+\mathrm{dep}(x)-2\mathrm{dep}(\mathrm{LCA}(k,x))\=&amp;|S|\mathrm{dep}(x)+\sum_{k\in S}\mathrm{dep}(k)-2\sum_{k\in S}\mathrm{dep(LCA}(k,x))\end{aligned}$$<br>考虑如何维护第三项:计算LCA深度的时候,可以让根到k的所有节点权值+1,其余节点是0,则x到根的所有权值之和就是LCA的深度.同时发现只有k是变化的,则可叠加起来.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页收藏夹</title>
      <link href="/2024/10/07/30001%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>/2024/10/07/30001%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>不常用的网页会放到这里.</p><h2 id="游戏">游戏</h2><h2 id="OJ">OJ</h2>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux笔记</title>
      <link href="/2024/09/23/00005Linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/09/23/00005Linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>理论</h1><h2 id="Linux目录">Linux目录</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/ root  管理员目录</span><br><span class="line">  bin   有shell,shell有好多种,比方说sh,bash,ksh,csh等.</span><br><span class="line">  boot  Linux启动时的核心文件</span><br><span class="line">  dev   device缩写,存放Linux外部设备以及Linux中的设备</span><br><span class="line">  etc   系统管理配置文件</span><br><span class="line">      p</span><br><span class="line">  home  用户主目录(根目录)</span><br><span class="line">  <span class="keyword">var</span>   </span><br><span class="line">  lib</span><br><span class="line">  usr</span><br><span class="line">  opt   额外的安装的软件,program files</span><br><span class="line">  media</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>Linux有好多目录…</p><p><code>bin/usr/bin</code> :系统预装的可执行程序<br><code>usr/local/bin</code> :用户自己的可执行文件<br><code>lib/usr/bin</code> :基本动态连接共享库</p><p>动态链接库通常以<code>.so</code>结尾.</p><h1>使用</h1><h3 id="管理员">管理员</h3><p>root,根用户.拥有最高权限.<br>普通用户的提示符是 <code>$</code> ,管理员的命令提示符是 <code>#</code> .(这个可以设置,丰富系统信息)</p><h3 id="命令">命令</h3><p>格式是 <code>$ 命令 [-选项] [参数]</code> 表示三个字段.</p><p><code>.</code> 开头的文件在Linux中被视为隐藏.</p><p><strong>命令分为内部命令和外部命令.</strong></p><p>内部命令:shell代码一部分,shell启动后预留内存,执行速度快.( <code>help</code> 可以给出内部命令的帮助)<br>外部命令:保存在文件系统中的程序,被调用时才执行.( <code>man</code> 指令是联机帮助手册,可以给出所有指令的说明)<br><code>man</code> 手册前翻一页: <code>b</code> ,后翻一页 <code>\space</code> ,退出 <code>q</code> .</p><h2 id="Vim使用">Vim使用</h2><p>使用 <code>vim</code>,<code>vi</code> ,或者 <code>vim aaa.txt</code> 打开具体文件. <code>:q</code>,<code>:q!</code> 是退出(不保存退出), <code>:w aaa.txt</code> 写入文件(可以直接打开文件然后输入 <code>:w</code> 写入),在vim内读入是 <code>:r aaa.txt</code> 注意使用 <code>r</code> 指令是把文本加载到编辑区,并不是直接就能覆盖源文件的(虽然可以用 <code>:w! 原文件</code> 解决)</p><p>分为命令模式和输入模式.默认是命令模式,使用 <code>Esc</code> 从输入模式切成命令模式.使用 <code>a,A,i,I,o,O</code> 切成输入模式(<code>Insert</code>).</p><p><code>:r</code> 参数 <code>-R</code> 只读. <code>-c xx</code> 带命令启动.</p><p>编辑多个文件, <code>vi a,b,c</code> 然后 <code>:n</code> 启动下一个文件, <code>:n!</code> 放弃修改,启动下一个, <code>:w:n</code> 先保存再启动下一个.</p><p><code>:ar</code> 查看当前排队处理文件的列表.</p><h3 id="命令模式下的操作">命令模式下的操作</h3><p>使用 <code>hjkl</code> 代表 <strong>左下上右</strong> 或者键盘上的方向键移动光标.<br>(spacebar就是space的空格)</p><table><thead><tr><th style="text-align:left">OPT</th><th style="text-align:left">EFFECT</th></tr></thead><tbody><tr><td style="text-align:left"><code>0</code></td><td style="text-align:left">行首</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">行尾</td></tr><tr><td style="text-align:left"><code>w</code></td><td style="text-align:left">右一个字</td></tr><tr><td style="text-align:left"><code>b</code></td><td style="text-align:left">左一个字</td></tr><tr><td style="text-align:left"><code>e</code></td><td style="text-align:left">字尾</td></tr><tr><td style="text-align:left"><code>\enter</code></td><td style="text-align:left">下一行行首</td></tr><tr><td style="text-align:left"><code>\spacebar</code></td><td style="text-align:left">右一格</td></tr><tr><td style="text-align:left"><code>\backspace</code></td><td style="text-align:left">左一格</td></tr></tbody></table><table><thead><tr><th style="text-align:left">OPT</th><th style="text-align:left">EFFECT</th></tr></thead><tbody><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">删一个字母</td></tr><tr><td style="text-align:left"><code>dd</code></td><td style="text-align:left">删一行</td></tr><tr><td style="text-align:left"><code>u</code></td><td style="text-align:left">撤销一步</td></tr><tr><td style="text-align:left"><code>U</code></td><td style="text-align:left">撤销对该行的所有更改</td></tr><tr><td style="text-align:left"><code>r</code></td><td style="text-align:left">替换这个字符</td></tr><tr><td style="text-align:left"><code>R</code></td><td style="text-align:left">替换该字符,同时换成文本输入模式</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">重复上一次修改</td></tr></tbody></table><table><thead><tr><th style="text-align:left">OPT</th><th style="text-align:left">EFFECT</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">输入正文时光标左移一格</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">输入正文时光标左移一格</td></tr><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left">跳到行开头</td></tr><tr><td style="text-align:left"><code>A</code></td><td style="text-align:left">跳到行末尾</td></tr><tr><td style="text-align:left"><code>o</code></td><td style="text-align:left">下一行添加新行,光标出现在新行开头</td></tr><tr><td style="text-align:left"><code>O</code></td><td style="text-align:left">上一行添加新行,光标出现在新行开头</td></tr></tbody></table><p>搜索字符串: <code>\aaa</code> 然后光标会跳到搜索结果,按 <code>n</code> 下一个,按 <code>N</code> 上一个,会循环(指针乱跳,特别鬼畜), <code>?aaa</code> 从光标位置向前查找,说实话不好用.</p><p>替换字符串: <code>%s/aaa/bbb/g</code> 把aaa全部替换成bbb(g是全部替换,不加g就是单个替换,gc是每次替换前确认)</p><h3 id="vi的全局配置文件">vi的全局配置文件</h3><p>存放在<code>/etc/virc</code>.</p><h3 id="vim-set">vim set</h3><p><code>set mouse=a</code> 意思是启用鼠标<br><code>set nu</code>显示行号(<code>set nonu</code>)就没了.</p><h2 id="考试考的命令手册">考试考的命令手册</h2><p><code>cd</code> :改变目录.</p><p><code>mkdir A B C ...</code> :当前文件夹下创建几个空文件夹(对应的, <code>rmdir</code> 就是删掉好多个空文件夹)</p><p><code>rm -R aaa</code> :删除带文件的aaa.</p><p><code>passwd</code> :修改密码.<br><code>passwd username</code> :修改别人密码.(显然,只有管理员可以)(root用户创建新用户时分配初始口令)</p><p><code>exit</code> :退出系统.<br><code>logout</code> :退出系统.</p><p><code>date</code> :系统告诉你当前时间.<br><code>cal</code> :指定年份的日历表<br><code>who</code> :端口和登陆时间</p><p><code>ls</code> :显示目录里面有啥…参数如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l      # 以长格式显示当前目录中的文件和目录</span><br><span class="line">ls -a      # 显示当前目录中的所有文件和目录，包括隐藏文件</span><br><span class="line">ls -t      # 按照修改时间排序显示当前目录中的文件和目录</span><br><span class="line">ls -R      # 递归显示当前目录中的所有文件和子目录</span><br><span class="line">ls -l xx   # 查看当前文件权限</span><br></pre></td></tr></table></figure><p><code>sh</code> , <code>bash</code> :更换shell,在当前shell中直接键入新shell名字即可,本质是创建新进程,运行新的shell.(用exit退出上一个shell的进程,可以套娃)</p><h2 id="tar">tar</h2><p><code>tar -cvzf aaa xx*</code><br>把所有满足xx打头的文件合并压缩成一个叫aaa的文件.不压缩就是<code>-cvf</code>.</p><h2 id="cal">cal</h2><p>显示日历</p><h2 id="find">find</h2><p><code>*</code> :任意长度字符都可以用*替代<br><code>?</code> :只有一个字符能被?替代<br><code>[abc]</code> :能匹配a或b或c单个字符<br><code>&#123;abc,abd&#125;</code> :能匹配abc或abd连续字符串.</p><p>如:找当前文件夹所有开头是a某c,结尾是.cpp的文件:<br><code>find ./ -name &quot;a?c*.cpp&quot;</code></p><p>使用通配符的要加引号,不使用的不加引号.</p><p>-exec 执行一个命令, <code>&#123;&#125;</code> 替代匹配上的文件名, <code>\;</code> 表示命令结束.</p><h2 id="dnf">dnf</h2><p><code>remove</code> 删除包<br><code>groupinstall</code> 安装软件包组</p><h2 id="cut">cut</h2><p>显示每一行前几个字符内容,<code>-c</code>再加<code>1-3</code>是前三个,<code>6</code>是第六个.</p><h2 id="cp">cp</h2><p><code>cp a b</code> 表示把a文件复制到b文件夹里面.</p><h2 id="grep">grep</h2><p><code>grep -op pattern file</code>从文件里面找图案,完美匹配的会整行输出.</p><h1>Shell</h1><p>编程 <code>TuT</code> .</p><h2 id=""><code>$&#123;&#125;</code></h2><p><code>$&#123;a&#125;</code> 变量取值.<br><code>$&#123;a:-b&#125;</code> 如果a空,使用b的值,否则使用a的值<br><code>$&#123;a:+b&#125;</code> 相反,a空使用a,否则使用b<br><code>$&#123;a:=b&#125;</code> 如果a空赋一个初始值,不然就不动(注意只有这个是能改变a值的)</p><h2 id="-2"><code>[[]]</code></h2><p>是常见的逻辑比较脚本,||,&amp;&amp;,=~,之类的都可以在这里比.</p><h2 id="-3"><code>$()</code></h2><p>执行一条命令</p><h2 id="-4"><code>(())</code></h2><p>进行算术运算和逻辑的三目运算.</p><h2 id="echo">echo</h2><p>`这个符号包住的是命令,会输出执行结果.</p><p><code>'</code>单引号包住的是原样输出的.<br><code>&quot;</code>双引号包住的或者不包住的就是变量取值的字符串.</p><h2 id="exp4">exp4</h2><p>largest</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Please enter the first integer:&quot;</span></span><br><span class="line"><span class="built_in">read</span> a1</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Please enter the second integer:&quot;</span></span><br><span class="line"><span class="built_in">read</span> a2</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Please enter the third integer:&quot;</span></span><br><span class="line"><span class="built_in">read</span> a3</span><br><span class="line">res=<span class="variable">$a1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a2</span> -gt <span class="variable">$res</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="variable">$res</span>=<span class="variable">$a2</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a3</span> -gt <span class="variable">$res</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="variable">$res</span>=<span class="variable">$a3</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$res</span>&quot;</span></span><br></pre></td></tr></table></figure><p>filecopy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d ~/exp4/FILE3-6K ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">rm</span> -rf ~/exp4/FILE3-6K</span><br><span class="line">                <span class="built_in">mkdir</span> ~/exp4/FILE3-6K</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                <span class="built_in">mkdir</span> ~/exp4/FILE3-6K</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">find ~/exp4/FILE3/* -size -6k -<span class="built_in">exec</span> <span class="built_in">cp</span> &#123;&#125; ~/exp4/FILE3-6K \;</span><br></pre></td></tr></table></figure><p>exercise4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d ~/exp4/FILE4 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">rm</span> -rf ~/exp4/FILE4</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/exp4/FILE4</span><br><span class="line"><span class="built_in">cd</span> ~/exp4/FILE4</span><br><span class="line"><span class="built_in">touch</span> file&#123;001..100&#125;</span><br><span class="line">tar -czf allfile.tar.gz *</span><br><span class="line"><span class="built_in">mv</span> -f ~/exp4/FILE4/allfile.tar.gz ~/exp4</span><br><span class="line"><span class="built_in">cd</span> ~/exp4</span><br><span class="line"><span class="built_in">ls</span> -l allfile.tar.gz</span><br><span class="line"><span class="built_in">chmod</span> 744 allfile.tar.gz</span><br></pre></td></tr></table></figure><p>user_exist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Please input a username:\c&quot;</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line">m1=/bin/bash</span><br><span class="line">mm=mail</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$name</span> == <span class="variable">$mm</span> ]]</span><br><span class="line"><span class="keyword">then</span> m1=/usr/sbin/nologin</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">egrep <span class="string">&quot;\&lt;<span class="variable">$name</span>\&gt;&quot;</span> /etc/passwd &gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;name&#125;</span>&#x27;s shell is <span class="variable">$m1</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> not exists.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC网络赛</title>
      <link href="/2024/09/21/20005ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
      <url>/2024/09/21/20005ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>第三场网络赛,我们的新队员终于来了,我们队终于不是倒数第一了…</p><p>而且是正数第十一…终于能超过劳伦斯哥哥了,开心.</p><h2 id="收获">收获</h2><ol><li>我学了一个假的Dev_C++…新队友是四指打字的,速度不清楚,反正打起字来空格用的比较多,码风是标准的高中OIer码风,算数之间空格加的多,大括号另起一行.</li></ol><blockquote><p>Flu觉得有必要练习一下学习如何使用Dev_C++.</p></blockquote><ol start="2"><li>Flu第一次做出来期望题,居然是在考场…</li></ol><blockquote><p>有必要多看看期望题.</p></blockquote><ol start="3"><li>手滑多交了两发.A题读假了导致浪费了至少一个小时,Flu的高低位输出错了导致至少多半个小时,队友开的都快出来了Flu才改好…</li></ol><blockquote><p>不错,最后一场Flu做对了两个题提供了一个题的板子,也算功德圆满,没沦落为战犯.</p></blockquote><ol start="4"><li>发现浏览器的一个命令: <code>site:xxx.com</code> 可以锁定搜索范围就是该网页.</li></ol><h2 id="补题">补题</h2><h3 id="2L">2L</h3><p>系统初始时会给你一个随机 $[1,T]$ 的值 $t_0$ ,每过一秒, $t_0$ 会自动减1,减完之后你可以选择刷新页面或者不刷新等着 $t_0$ 变成0,从第0秒到 $t_0$ 变成0的这段时间被称作罚时,你希望最小化罚时期望.</p><p>这个题意外地很简单…我们发现每一次刷新都是随机的,所以可以转移.直接设当前期望是 $E$ ,以及罚时为 $[1,x]$ 时不动等自然变成0, $[x+1,T]$ 时手动刷新,可以列出方程<br>$$E=\frac1T\frac{(1+x)x}2+\frac{T-x}T(1+E)$$<br>解一下发现是一个关于T的基本不等式.最小值取在 $x=\sqrt{2T}$ 的位置.<br>题解:从这里开始检查 $x=\lfloor\sqrt{2T}\rfloor$ 和 $\lceil\sqrt{2T}\rceil$ 即可.<br>直接暴力检查.中间因为卡了一下快读(其实是Flu多检查了一下x-1的情况),还T了一发.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分图</title>
      <link href="/2024/09/19/10011%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
      <url>/2024/09/19/10011%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>二分图就是,点可以分成两拨,左边会和右边连线,然后左边或右边都不会有连向自己的线.</p><p>今天碰到了一个很有意思的题.特此讲一下二分图的匈牙利算法.</p><ol><li>有一辆大巴车,每排能坐两个人,每个人有两个希望坐上的排数,请你给出最多能使多少人满足愿望.</li></ol><p>如何解决一个点能匹配两个人的问题呢?我们可以扩大点集,让人同时和a+n的点连线.这样就可以转换为一个二分图了,直接跑最大匹配就行.</p><p>拓展:貌似点能承受的个数变成 $f(n)$ 也行,只需要简简单单装到一个umap里面就行了.</p>]]></content>
      
      
      <categories>
          
          <category> Graph&amp;Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希</title>
      <link href="/2024/09/18/10028%E5%93%88%E5%B8%8C/"/>
      <url>/2024/09/18/10028%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<p>如何辨别哈希题?大概就通过一句话:</p><blockquote><p>当需要用 $Θ(1)$ 的时间快速比较两个 $Θ(n)$ 的东西时.</p></blockquote><p>哈希是干嘛的?提供一种映射关系,能够把字符串或者树通过某种加密关系换算成一个数,从而进行比较或者直接排序.</p><p>自然,撞哈希的概率关乎哈希算法的核心.</p><h2 id="生日悖论">生日悖论</h2><p>大概意思就是,任意约 $\sqrt n$ 个元素的时候元素相同的概率就会很高(n是值域).为了防止撞哈希,我们要让值域尽可能大(也就是选择1e16-1e18级别的质数).</p><h2 id="二维哈希">二维哈希</h2><p>矩阵哈希,要求 $O(1)$ 求出相同大小的子矩阵的哈希值.</p><p>我们要从矩阵中提取一个大小为(y,x)的矩阵,咋办?<br>首先要预处理阶乘(处理到矩阵行列最大值就可以了).二位哈希采取双进制的操作,一个是行之间的进制位(1299709),另一个是列之间乘再加的进制位(1e9+7).</p><p>然后要建立哈希表.由于二维哈希是前缀式的,所以要乘上一位再加这一位的数据.然后再前缀和一样的乘,每一位乘列的进制位.参考代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">p1[<span class="number">0</span>]=p2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p1[i]=p1[i<span class="number">-1</span>]*dom;</span><br><span class="line">p2[i]=p2[i<span class="number">-1</span>]*mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">x[i][j]=x[i][j<span class="number">-1</span>]*dom+<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">y[i][j]=y[i][j<span class="number">-1</span>]*dom+<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">x[i][j]+=x[i<span class="number">-1</span>][j]*mod;</span><br><span class="line">y[i][j]+=y[i<span class="number">-1</span>][j]*mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式:<br>$$ask(x_1,x_2,y_1,y_2)=h[x_2][y_2]-h[x_2][y_1-1]*base_1[y_2-y_1+1]-h[x_1-1][y_2]*base_2[x_2-x_1+1]-h[x_1-1][y_1-1]*base_1[y_2-y_1+1]*base_2[x_2-x_1+1]$$<br>参考代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rp=y[i][j]-y[i-k][j]*p2[k]-y[i][j-k]*p1[k]+y[i-k][j-k]*p2[k]*p1[k];</span><br><span class="line"><span class="comment">//p2是1e9+7,p1是小的行之间的质数,k是子矩阵长度</span></span><br></pre></td></tr></table></figure><p>好像子矩阵都可以O(1)求.</p><h2 id="字符串哈希">字符串哈希</h2><p><s>Flu刚开始学字符串哈希的时候真的就是只学哈希来了,umap该开的还是开,字符串哈希完了装umap里,乐</s></p><p>字符串哈希,就是把一段字符串哈希变成一个数(双哈希是变成一对数),然后可以进行排序,然后直接检测有多少哈希值就行了(也就是多少种不同的字符串).</p><p>字符串哈希一般都是进制哈希.主要分为三种实现方法:<strong>自然溢出法(也就是模 $2^64$),单模哈希法(一个很大的质数),双模哈希(返回一对哈希值,据说很难卡掉)</strong>.</p><h2 id="例题">例题</h2><ol><li>矩阵哈希:给你两个矩阵,问两个矩阵中最大的重合子矩阵的大小(边长)是多少.</li></ol><p>我们发现边长是单调的,于是考虑二分.设 $k$ 是当前查验的边长.我们把两个矩阵的所有子矩阵直接哈希加到哈希表里面,然后排个序,直接比较(采用umap可以再掉一个log).时间复杂度是 $O(n^2\log^2n)$ .</p><ol start="2"><li>(小技巧:5倍幂哈希)元素模糊匹配问题:给两个数列ab,b可能是有a打乱得到,也可能不是由a打乱得到,你需要判断(预处理复杂度可以放宽至O(nlogn),但是比较必须O(1))</li></ol><p>首先,我们要使用支持交换律的哈希,比如乘法,加法.直接维护这样的双模会被hack(先不考虑0的情况,直接特判)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 9 2 2 2 2 2 2 2 2</span><br><span class="line">3 3 1 4 1 4 1 4 1 4</span><br></pre></td></tr></table></figure><p>以上数据和积相同.此时我们需要让这些数5倍自己,然后再维护(小技巧)即可.</p><h2 id="树哈希">树哈希</h2><p>求出一个树的哈希值.考虑一下式子<br>$$f(x)=\sum_{y\in Son_x}f(y)\times P(Size(y))\mod M$$<br>首先求出所有根节点的哈希值 $f(x)$ ,设g表示以y为 <strong>根</strong> 的哈希,有 $g(y)=f(y)+h(x)$ 根据定义有<br>$$h(x)=(f(x)-f(y)\times P(size(y)))P(n-size(y))\mod M$$<br>于是<br>$$g(y)=f(y)+(f(x)-f(y)P(size(y))P(n-size(y)))\mod M$$<br>(从现在开始,Flu博客不再有算法博客不能放代码的规定,因为有些代码真的就陪着公式来的,不好说明).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> ko)</span></span>&#123;</span><br><span class="line">sz[num]=<span class="number">1</span>;</span><br><span class="line">f[num]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==ko)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i,num);</span><br><span class="line">sz[num]+=sz[i];</span><br><span class="line">f[num]=(f[num]+f[i]*prime[sz[i]])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> ko,i64 val)</span></span>&#123;</span><br><span class="line">ff[num]=(f[num]+val*prime[n-sz[num]]%mod)%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==ko)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(i,num,((ff[num]-f[i]*prime[sz[i]])%mod+mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典序">字典序</h2><p><code>0</code> &lt; 0 &lt; A &lt; a</p><p>按照 <code>ASCII</code> 码,数字的值最小,其次是大写字母,然后是小写字母.</p><p>比较分为两种情况:长度一样和不一样.<br>对于长度一样的情况,我们对短的补 <code>0</code> .(注意是 <code>0</code> 不是0)<br>然后直接从头开始比较,谁 <code>ASCII</code> 码小字典序就小.</p><h2 id="手写哈希表">手写哈希表</h2><p>一般而言有两种方式:拉链法和顺次法.</p><p>我们开一段连续空间,然后在空间内提供哈希算法,模上空间大小,大概就是实际的存储位置.<br><strong>拉链法</strong>:每个单点是一个链表,存储的时候如果哈希冲突就链表加一个节点,访问的时候遍历链表.<br><strong>顺次法</strong>:存储的时候如果哈希冲突,直接顺次访问(n+1),(n+2)等元素.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/2024/09/12/10010%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
      <url>/2024/09/12/10010%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p>很简单,我们逐渐退火让答案稳定在某段区间内.</p><p>算法不讲解了,什么以多项式概率接受啥的哪都没用,主要讲怎么应用模拟退火.</p><p>个人认为比较困难的点是如何&quot;渐进地&quot;生成新的逼近的随机答案,不然模拟退火就是单纯的随机数碰答案.</p><h2 id="二元函数求最值">二元函数求最值</h2><h2 id="三分xy的情况">三分xy的情况</h2><p>我们以吊打xxx为例.加入x值定死,势能变化随y是一个单峰函数.</p><p>也就是说,我们可以三分y从而达到理想效果.</p><p>如何三分?考虑一个单峰,假如落在三分中间,那么怎么收缩都是涵盖的.<br>假如没有,我们三分的两个点会是一个明显递增或者递减的趋势,此时收紧,也就是说一次收缩大概1/3,剩下的2/3接着三分即可;</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率与组合数学</title>
      <link href="/2024/09/12/10022%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
      <url>/2024/09/12/10022%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>万恶之源组合数学.以及概率.</p><h2 id="插板法">插板法</h2><p>求 $a_1+…+a_k=n$ 的正整数解的个数.答案就是<br>$$\binom{n-1}{k-1}$$<br>非负整数解:借数.<br>$$\binom{n+k-1}{n}$$<br>每组至少要分到 $a_i$ 个呢?假设 $x’$ 是删完必须要加的,我们就转换为求非负解了.<br>$$\binom{n-\sum a_i+k-1}{n-\sum a_i}$$<br>不相邻排列:其实还是借数插在中间,然后组合.<br>$$\binom{n-k+1}{k}$$</p><h2 id="组合数公式">组合数公式</h2><p>$$\binom nm=\binom n{n-m}$$<br>$$\binom nk+\binom n{k+1}=\binom{n+1}k$$<br>$$\binom nk=\frac nk\binom{n-1}{k-1}$$<br>$$\binom nm=\binom n{m-1}+\binom{n-1}{m-1}$$<br>DP求杨辉三角的时候用这个.<br>$$\sum_{i=0}^n\binom ni=2^n$$<br>二项式定理取a=1,b=1的特殊情况.<br>$$\sum_{i=0}^n(-1)^i\binom ni=[n=0]$$<br>二项式定理取a=1,b=-1的特殊情况.<br>$$\sum_{i=0}^m\binom ni\binom m{n-i}=\binom{n+m}m,(n\ge m)$$<br>拆组合数的式子.某些数据结构题会遇到.<br>$$\sum_{i=0}^n\binom ni^2=\binom{2n}n$$<br>上一个式子的特殊情况(n=m).<br>$$\sum_{i=0}^ni\binom ni=n2^{n-1}$$<br>求导可证.<br>$$\sum_{i=0}^ni^2\binom ni=\frac{n(n+1)}22^{n-1}$$<br>也是多项式求导可证.<br>$$\sum_{i=0}^n\binom ik=\binom {n+1}{k+1}$$<br>子集分析可证(这个就是上指标求和公式).<br>$$\binom nr\binom rk=\binom nk\binom{n-k}{r-k}$$<br>定义证明.<br>$$\sum_{i=0}^n\binom{n-i}i=F_{n+1}$$<br>其中, $F_n$ 是斐波那契数列.</p><p><strong>多重组合数</strong> :多重集的排列数就是多重组合数.多重集的排列可以理解为有一个集合 $S={n_1a_1,n_2a_2,…,n_ka_k}$ ,有这么多种相同元素,他的全排列叫做多重组合数,公式<br>$$\binom{n}{n_1,n_2,…,n_k}=\frac{n!}{\prod_{i=1}^kn_i!}$$</p><h2 id="圆排列">圆排列</h2><p>部分圆排列公式:<br>$$Q_n^r=\frac{A_n^r}r=\frac{n!}{r\times(n-r)!}$$</p><h2 id="二项式反演">二项式反演</h2><p>设 $f_n$ 是n个元素形成特定结构的方案数, $g_n$ 是从n个元素选 $i,i\ge0$ 个元素形成结构的方案数.根据f求g有<br>$$g_n=\sum_{i=0}^n\binom nif_i$$<br>根据g求f则有<br>$$f_n=\sum_{i=0}^n\binom ni(-1)^{n-i}g_i$$<br>这个逆推的过程就叫二项式反演.</p><h2 id="容斥原理">容斥原理</h2><p>$$\left|\bigcup_{i=1}^nS_i\right|=\sum_{m=1}^n(-1)^{m-1}\sum_{a_i&lt;a_{i+1}}\left|\bigcap_{i=1}^mS_{a_i}\right|$$<br>下面是求交的容斥.<br>$$\left|\bigcap_{i=1}^nS_i\right|=|U|-\left|\bigcup_{i=1}^n\overline{S_i}\right|$$<br><strong>容斥模型</strong> :式子<br>$$\left|\bigcap_{a_i&lt;a_{i+1}}^{1\le i\le k}S_{a_i}\right|$$<br>的不定方程形式是<br>$$\sum_{i=1}^nx_i=m-\sum_{i=1}^k(b_{a_i}+1)$$</p><h2 id="容斥应用">容斥应用</h2><ol><li>硬币计数:给四种硬币的面值,n次询问每次询问给出四种硬币的数量以及s表示这么多个硬币能够拼凑出s的方案数.</li></ol><p>套模型:也就是求解<br>$$\sum_{i=1}^4C_ix_i=S-\sum_{i=1}^kC_{a_i}(D_{a_i}+1)$$<br>我们首先考虑无限金币,此时就是完全背包.假如一枚金币超过了应当的容量,就要减去对应的差值,枚举子集即可.</p><h2 id="常见误区">常见误区</h2><ol><li>误用组合数<br>概述:由于上一个选了之后会影响下一次选的概率,导致单纯组合数的结果并不是概率出来的结果.</li></ol><blockquote><p>例子:n张A票n张B票,买票的时候是抛硬币决定卖哪张票,问最后两个位置是相同票的概率,此时设想第一位选了一种的时候第二位会发生概率变换导致单纯组合数的概率并不是真正的概率.(问题出在结果判定上,假如没另一种票了就直接剩下的一样,也就是说组合数的概率不一样)<br>$$\xcancel{\frac{n-1}{2n-1}}$$<br>正解:DP,其实也能算组合数,假设最后两张票不一样,就会是前2n-2张票有n-1张A和B票.这个时候的概率就是<br>$$P=C^{n-1}_{2n-2}\Big(\frac12\Big)^{2n-2}=\frac{(2n-2)!}{4^{n-1}(n-1)!(n-1)!}$$<br>实现O(n)计算.答案是1-P.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数库</title>
      <link href="/2024/09/11/10009%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%BA%93/"/>
      <url>/2024/09/11/10009%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>常见的三角函数库.以及 <code>float</code> , <code>double</code> 范围.</p><h2 id="float">float</h2><p>范围大概是 <code>1e-38~1e38</code> .精度大概是7位.</p><h2 id="double">double</h2><p>范围: <code>1e-308~1e308</code> .精度大概是15-16位.</p><h2 id="三角函数">三角函数</h2><p><code>sin</code><br><code>cos</code><br><code>tan</code><br><code>asin</code><br><code>acos</code><br><code>atan</code><br><code>atan2(double y,double x)</code> :传入 $(y,x)$ ,输出与 $x$ 轴正方向角度(坐标轴下是负值).</p><p>参数: <code>sin</code> , <code>sinf</code> , <code>sinl</code> ,其实都差不多,单纯是传入参数的区别.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万能欧几里得</title>
      <link href="/2024/09/10/10008%E4%B8%87%E8%83%BD%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
      <url>/2024/09/10/10008%E4%B8%87%E8%83%BD%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>万能欧几里得推式子的时间.</p><p>万能欧几里得的作用是求一些类似辗转相除的算法,需要递归求解的东西.万能欧几里得的泛用性在于主板子基本不用换,只需要稍微修改合并部分的代码.</p><p>可以使用矩阵的思想.</p><ol><li>求<br>$$\sum_{i=0}^{n}\left\lfloor\frac{ai+b}{c}\right\rfloor, \sum_{i=0}^{n}\left\lfloor\frac{ai+b}{c}\right\rfloor^{2}, \sum_{i=0}^{n}i\left\lfloor\frac{ai+b}{c}\right\rfloor $$<br>设<br>$$f(x)=\lfloor\frac{Px+R}Q\rfloor $$<br>求：<br>$$\sum_{i=1}^nf(i),\sum_{i=1}^nf^2(i),\sum_{i=1}^nif(i)$$<br>下文设$y=f(x)$,即求：<br>$$A=\sum y,B=\sum y^{2},C=\sum xy$$<br>一般万欧都需要维护$U$和$R$的数量(记为$u$和$r$).</li></ol><p>合并两段信息$I_0$与$I_{1}$,结果为$I$ ,考虑增量:<br>$$y\leftarrow y_1+u_0 \<br>x\leftarrow x_1+r_0$$<br>$$\begin{aligned}<br>A-A_0&amp;=\sum y \<br>&amp;=\sum(y_1+u_0) \<br>&amp;=\sum y_1+u_0r_1 \<br>&amp;=A_1+u_0r_1 \<br>B-B_{0} &amp;=\sum y^2 \<br>&amp;=\sum(y_1+u_0)^2 \<br>&amp;=\sum y_1^2+2u_0\sum y_1+u_0^2r_1 \<br>&amp;=B_1+2u_0A_1+u_0^2r_1 \<br>C-C_0 &amp;=\sum xy \<br>&amp;=\sum(x_1+r_0)(y_1+u_0) \<br>&amp;=\sum x_1y_1+u_0\sum x_1+r_0\sum y_1+u_0r_0r_1 \<br>&amp;=C_1+u_0\frac{r_1(r_1+1)}2+r_0A_1+u_0r_0r_1<br>\end{aligned}$$<br>也就是说 $\sum$ 里面(y)加 $u$ ,外面加 $r$ .</p><h2 id="弊端">弊端</h2><p>$$\sum\sqrt{y},\sum x^y,\sum a^{xy},\sum2^{2^y},\sum Asin(wy+\phi)$$<br>由于单维影响无法差分线性,即我们无法设计出一个好的矩阵来表达其值,所以上述式子均无法计算.</p><p>崩:loj138没调出来.<br>loj6440.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> enter fout&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> space fout&lt;&lt;<span class="string">&quot; &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dot fout&lt;&lt;<span class="string">&quot;,&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> oui fout&lt;&lt;<span class="string">&quot;Yes&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> non fout&lt;&lt;<span class="string">&quot;No&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si fout&lt;&lt;<span class="string">&quot;?&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> fastio&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> bufl=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> base1[<span class="number">16</span>]=&#123;<span class="number">1</span>,<span class="number">1e-1</span>,<span class="number">1e-2</span>,<span class="number">1e-3</span>,<span class="number">1e-4</span>,<span class="number">1e-5</span>,<span class="number">1e-6</span>,<span class="number">1e-7</span>,<span class="number">1e-8</span>,<span class="number">1e-9</span>,<span class="number">1e-10</span>,<span class="number">1e-11</span>,<span class="number">1e-12</span>,<span class="number">1e-13</span>,<span class="number">1e-14</span>,<span class="number">1e-15</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> base2[<span class="number">16</span>]=&#123;<span class="number">1</span>,<span class="number">1e1</span>,<span class="number">1e2</span>,<span class="number">1e3</span>,<span class="number">1e4</span>,<span class="number">1e5</span>,<span class="number">1e6</span>,<span class="number">1e7</span>,<span class="number">1e8</span>,<span class="number">1e9</span>,<span class="number">1e10</span>,<span class="number">1e11</span>,<span class="number">1e12</span>,<span class="number">1e13</span>,<span class="number">1e14</span>,<span class="number">1e15</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IN</span>&#123;</span><br><span class="line">FILE *IT;<span class="type">char</span> ibuf[bufl],*is=ibuf,*it=ibuf;</span><br><span class="line"><span class="built_in">IN</span>()&#123;IT=stdin;&#125;<span class="built_in">IN</span>(<span class="type">char</span> *a)&#123;IT=<span class="built_in">fopen</span>(a,<span class="string">&quot;r&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">getChar</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(is==it)&#123;it=(is=ibuf)+<span class="built_in">fread</span>(ibuf,<span class="number">1</span>,bufl,IT);<span class="keyword">if</span>(is==it)<span class="keyword">return</span> EOF;&#125;<span class="keyword">return</span> *is++;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getInt</span><span class="params">(Temp &amp;a)</span></span>&#123;a=<span class="number">0</span>;<span class="type">int</span> b=<span class="number">0</span>,c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)b^=(c==<span class="number">45</span>),c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)a=(a&lt;&lt;<span class="number">1</span>)+(a&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();<span class="keyword">if</span>(b)a=-a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getDouble</span><span class="params">(Temp &amp;a)</span></span>&#123;a=<span class="number">0</span>;<span class="type">int</span> b=<span class="number">0</span>,c=<span class="built_in">getChar</span>(),d=<span class="number">0</span>;__int128 e=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">while</span>(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)b^=(c==<span class="number">45</span>),c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)e=(e&lt;&lt;<span class="number">1</span>)+(e&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();<span class="keyword">if</span>(c==<span class="number">46</span>)&#123;c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)d++,f=(f&lt;&lt;<span class="number">1</span>)+(f&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();&#125;a=e+base1[d]*f;<span class="keyword">if</span>(b)a=-a;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">char</span> &amp;a)&#123;a=<span class="built_in">getChar</span>();<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">char</span> *a)&#123;<span class="keyword">do</span>&#123;*a=<span class="built_in">getChar</span>();&#125;<span class="keyword">while</span>(*a&lt;=<span class="number">32</span>);<span class="keyword">while</span>(*a&gt;<span class="number">32</span>)*++a=<span class="built_in">getChar</span>();*a=<span class="number">0</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(string &amp;a)&#123;<span class="type">char</span> b=<span class="built_in">getChar</span>();<span class="keyword">while</span>(b&lt;=<span class="number">32</span>)b=<span class="built_in">getChar</span>();<span class="keyword">while</span>(b&gt;<span class="number">32</span>)a+=b,b=<span class="built_in">getChar</span>();<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">int</span> &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">long</span> <span class="type">long</span> &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(__int128 &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">float</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">double</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">long</span> <span class="type">double</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">OUT</span>&#123;</span><br><span class="line">FILE *IT;<span class="type">char</span> obuf[bufl],*os=obuf,*ot=obuf+bufl;<span class="type">int</span> Eps;<span class="type">long</span> <span class="type">double</span> Acc;</span><br><span class="line"><span class="built_in">OUT</span>()&#123;IT=stdout,Eps=<span class="number">6</span>,Acc=<span class="number">0.5</span>;&#125;<span class="built_in">OUT</span>(<span class="type">char</span> *a)&#123;IT=<span class="built_in">fopen</span>(a,<span class="string">&quot;w&quot;</span>),Eps=<span class="number">6</span>,Acc=<span class="number">0.5</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ChangEps</span><span class="params">(<span class="type">int</span> x=<span class="number">6</span>)</span></span>&#123;Eps=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;<span class="built_in">fwrite</span>(obuf,<span class="number">1</span>,os-obuf,IT);os=obuf;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putChar</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;*os++=a;<span class="keyword">if</span>(os==ot)<span class="built_in">flush</span>();&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putInt</span><span class="params">(Temp a)</span></span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;<span class="built_in">putChar</span>(<span class="number">45</span>);a=-a;&#125;<span class="keyword">if</span>(a&lt;<span class="number">10</span>)&#123;<span class="built_in">putChar</span>(a+<span class="number">48</span>);<span class="keyword">return</span>;&#125;<span class="built_in">putInt</span>(a/<span class="number">10</span>);<span class="built_in">putChar</span>(a%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putLeading</span><span class="params">(Temp a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">if</span>(!b)<span class="keyword">return</span>;<span class="built_in">putLeading</span>(a/<span class="number">10</span>,b<span class="number">-1</span>);<span class="built_in">putChar</span>(a%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putDouble</span><span class="params">(Temp a)</span></span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;<span class="built_in">putChar</span>(<span class="number">45</span>);a=-a;&#125;__int128 b=a;<span class="built_in">putInt</span>(b);a-=b;a*=base2[Eps];b=a+Acc;<span class="built_in">putChar</span>(<span class="number">46</span>);<span class="built_in">putLeading</span>(b,Eps);&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">char</span> a)&#123;<span class="built_in">putChar</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> <span class="type">char</span> *a)&#123;<span class="keyword">while</span>(*a)<span class="built_in">putChar</span>(*a++);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(string a)&#123;<span class="keyword">for</span>(<span class="keyword">auto</span> c:a)<span class="built_in">putChar</span>(c);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">int</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">long</span> <span class="type">long</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(__int128 a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> <span class="type">int</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> __int128 a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">float</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">double</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">long</span> <span class="type">double</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">~<span class="built_in">OUT</span>()&#123;<span class="built_in">flush</span>();&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">fastio::IN fin;</span><br><span class="line">fastio::OUT fout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> p=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qqp</span><span class="params">(T1 b,T2 po)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k1,k2;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> C[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> u,r,dat[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="built_in">node</span>(<span class="type">long</span> <span class="type">long</span> a=<span class="number">0</span>,<span class="type">long</span> <span class="type">long</span> b=<span class="number">0</span>):<span class="built_in">u</span>(a),<span class="built_in">r</span>(b)&#123;<span class="built_in">memset</span>(dat,<span class="number">0</span>,<span class="keyword">sizeof</span> dat);&#125;</span><br><span class="line">~<span class="built_in">node</span>()&#123;&#125;</span><br><span class="line">node <span class="keyword">operator</span>=(node io)&#123;</span><br><span class="line">u=io.u;</span><br><span class="line">r=io.r;</span><br><span class="line"><span class="built_in">memcpy</span>(dat,io.dat,<span class="keyword">sizeof</span> dat);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">node <span class="keyword">operator</span>*(node io)&#123;</span><br><span class="line"><span class="function">node <span class="title">res</span><span class="params">((u+io.u)%mod,(r+io.r)%mod)</span></span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res.dat,dat,<span class="keyword">sizeof</span> dat);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> uu=u%mod,rr=r%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k1;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k2;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> ii=<span class="number">0</span>,t1=<span class="number">1</span>;ii&lt;=i;++ii,t1=t1*uu%mod)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> jj=<span class="number">0</span>,t2=<span class="number">1</span>;jj&lt;=j;++jj,t2=t2*rr%mod)&#123;</span><br><span class="line">res.dat[i][j]=(res.dat[i][j]+(C[i][ii]*C[j][jj]*t1%mod*t2%mod*io.dat[i-ii][i-jj])%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node <span class="title">qp</span><span class="params">(node b,<span class="type">long</span> <span class="type">long</span> po)</span></span>&#123;</span><br><span class="line">node res;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b;</span><br><span class="line">b=b*b;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">vargcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> c,<span class="type">long</span> <span class="type">long</span> n,node fu,node fr)</span></span>&#123;</span><br><span class="line">b%=c;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=c)<span class="keyword">return</span> <span class="built_in">vargcd</span>(a%c,b,c,n,fu,<span class="built_in">qp</span>(fu,a/c)*fr);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m=(a*n+b)/c;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">qp</span>(fr,n);</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">qp</span>(fr,(c-b<span class="number">-1</span>)/a)*fu*<span class="built_in">vargcd</span>(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>,fr,fu)*<span class="built_in">qp</span>(fr,n-(c*m-b<span class="number">-1</span>)/a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">U</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span>,<span class="title">R</span><span class="params">(<span class="number">0</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> t,a,b,c,n;</span><br><span class="line">fin&gt;&gt;t;</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;++i)&#123;</span><br><span class="line">C[i][<span class="number">0</span>]=C[i][i]=C[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;++j)&#123;</span><br><span class="line">C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;++i)&#123;</span><br><span class="line">U.dat[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">fin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;k1&gt;&gt;k2;</span><br><span class="line">node res;</span><br><span class="line">res.u=b/c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">0</span>,t=<span class="number">1</span>;i&lt;=<span class="number">10</span>;++i,t=(t*res.u)%mod)&#123;</span><br><span class="line">res.dat[i][<span class="number">0</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;(res*<span class="built_in">vargcd</span>(a,b,c,n,U,R)).dat[k1][k2]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构选课学习笔记</title>
      <link href="/2024/09/09/00007%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%80%89%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/09/09/00007%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%80%89%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这是数据结构选课的课内笔记,和 $OI$ 的高难数据结构关系不是很大,主要是记一些怕忘的定义.</p><h2 id="ADL语言">ADL语言</h2><p>算法 SM(A,n,&amp;min,&amp;max)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">max&lt;-min&lt;a[<span class="number">1</span>]</span><br><span class="line">FOR i=<span class="number">2</span> TO n DO</span><br><span class="line"><span class="keyword">if</span> A[i]&gt;max THEN max&lt;-a[i]</span><br><span class="line"><span class="keyword">if</span> A[i]&lt;min THEN min&lt;-a[i]</span><br></pre></td></tr></table></figure><p>举例<br>$$ADL:a\leftrightarrow b$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a^=b^=a^=b</span><br></pre></td></tr></table></figure><h2 id="算法的鲁棒性">算法的鲁棒性</h2><p>自动识别错误数据(并纠正)的能力.</p><p><strong>算法测试</strong> :两种,<br><strong>黑盒测试</strong>:测试点.<br><strong>白盒测试</strong>:语句覆盖,分支覆盖.</p><h2 id="时间复杂度">时间复杂度</h2><p>$O$ ,读音:big-oh;表示上界,小于等于.<br>$ο$ ,读音:small-oh;表示上界,小于.<br>$\Theta$ ,读音:theta、西塔;既是上界也是下界,称为确界,等于.<br>$\omega$ ,读音:small omega;表示下界,大于.<br>$\Omega$ ,读音:big omega、欧米伽;表示下界,大于等于.</p><p>Ο是渐进上界,Ω是渐进下界.Θ需同时满足大Ο和Ω,故称为确界.Ο极其有用,因为它表示了最差性能.</p><h2 id="时空积分">时空积分</h2><p>$$W=\int_0^tf(x)\mathrm dx$$</p><h2 id="多维数组寻址">多维数组寻址</h2><p>$$*=dat+\sum_{j=1}^{n-1}(i_j\times\prod^{n}_{p=k+1} m_p)*C$$<br>C代表<code>sizeof</code>,大乘号其实就是前缀积</p><h2 id="矩阵三元组表转置">矩阵三元组表转置</h2><p>Q:为啥PPT说的是 $O(nt)$ 的?<br>这个可以做到 $O(t\log t)$ .</p><h2 id="二叉树">二叉树</h2><p>满二叉树:顾名思义,节点全满,非常均匀.<br>完全二叉树:节点全的,末层缺失(注意从右侧缺失)</p><h2 id="线索二叉树">线索二叉树</h2><p>节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val,l,r,   pred,succ</span><br></pre></td></tr></table></figure><p>后面这俩存根,先根或者后根, <strong>可以存前根,中根或者后根</strong> ,故又称前序,中序或者后序线索二叉树.</p><h2 id="哈夫曼树">哈夫曼树</h2><p>扩充二叉树:二叉树所有原来有空位的加子节点.</p><p>路径长度:<br>$$w=\sum_{i=1}^nw_id_i$$<br>其中w代表权值(就是存的那个数),然后d是路径长(深度-1),这个w最小的叫最优二叉树.</p><p>哈夫曼编码:左儿子是0,右儿子是1,直接走,走到哪编码.</p><p><strong>压缩</strong>:开一个map统计出现频率,然后建立哈夫曼树,直接译码. $O(n\log n)$ .<br><strong>解码</strong>:先读哈夫曼树,然后直接译码即可.</p><h3 id="哈夫曼树构造">哈夫曼树构造</h3><p>所有节点都是一个森林,然后每次选权值最小的根组成一个新树,产生一个新节点,加入其中,直到剩一个根.</p><h2 id="表达式树">表达式树</h2><p>中缀表达式树.这个一看就明白了,也没多难写.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(a+b)*(c+d)-e</span><br><span class="line">        -</span><br><span class="line">       / \</span><br><span class="line">      *   e</span><br><span class="line">     / \</span><br><span class="line">+   -</span><br><span class="line">   / \ / \</span><br><span class="line">   a b c d</span><br></pre></td></tr></table></figure><h2 id="图">图</h2><p>连通子图:顾名思义.<br>连通分量:把所有联通块抽出来就是了.</p><h2 id="拓扑排序">拓扑排序</h2><p>每次选一个入度为0的,然后删掉边,循环.</p><p>拓扑排序是 $O(n+e)$ 的.</p><h2 id="希尔排序-Shell">希尔排序(Shell)</h2><p>直接插入排序的改进.作为最先冲破 $O(n^2)$ 的排序算法,值得借鉴.</p><p>每次把增量分成n&gt;&gt;1,然后每个区间暴力插入排序.直到最后</p><h2 id="基数分布和值分布">基数分布和值分布</h2><p>基数排序,是模按照指定位数进行排序的算法,计数排序就是俗称的桶排序.</p><p>基数排序:先开十个链表,然后取最后一位看剩下的数.按照这个顺序先排起来.<br>然后取第二位接着排,直到元素有序.</p><h1>板子</h1><p>下面的是Flu的离线stl库.</p><p>如果有人做数据结构作业不让使用stl库,也许可以参考一下Flu的??</p><p>注意, <code>JLU</code> 实际上是可以使用stl库的,因为无论是程序作业还是考试都有一堆爆零的…</p><h2 id="栈">栈</h2><p>一度让我觉得没有封装的必要…但是既然数据结构提了那就写一个吧…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sstack</span>&#123;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> ttop;</span><br><span class="line"><span class="built_in">sstack</span>(<span class="type">int</span> n=<span class="number">100010</span>)&#123;dat=<span class="keyword">new</span> T[n];ttop=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T val)</span></span>&#123;dat[++ttop]=val;&#125;</span><br><span class="line"><span class="function">T <span class="title">top</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&gt;<span class="number">0</span>)<span class="keyword">return</span> dat[ttop];<span class="keyword">return</span> <span class="number">-114514</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ttop;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-114514</span>;ttop--;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ttop&lt;=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;<span class="comment">//所有操作不合法会返回-114514</span></span><br></pre></td></tr></table></figure><h2 id="队列-双端队列">队列(双端队列)</h2><p>因为双端队列兼容队列,所以就不再写队列的模板了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ddeque</span>&#123;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> ttop,l;</span><br><span class="line"><span class="built_in">ddeque</span>(<span class="type">int</span> n=<span class="number">200010</span>)&#123;dat=<span class="keyword">new</span> T[n];ttop=(n&gt;&gt;<span class="number">1</span>);l=(n&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ttop-l+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">T <span class="title">front</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">-114514</span>;<span class="keyword">return</span> dat[ttop];&#125;</span><br><span class="line"><span class="function">T <span class="title">back</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">-114514</span>;<span class="keyword">return</span> dat[l];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">-114514</span>;ttop--;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">-114514</span>;l++;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(T val)</span></span>&#123;dat[++ttop]=val;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T val)</span></span>&#123;dat[--l]=val;&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (ttop-l+<span class="number">1</span>)&lt;=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="动态数组">动态数组</h2><p>neta了vector.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">vvector</span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> base[]=&#123;<span class="number">0</span>,<span class="number">20</span>,<span class="number">110</span>,<span class="number">1010</span>,<span class="number">10010</span>,<span class="number">100010</span>,<span class="number">200010</span>,<span class="number">1000010</span>,<span class="number">2000010</span>,<span class="number">10000010</span>&#125;;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> sz,top;<span class="comment">//当前块指向,顶端元素(Flu比较喜欢闭区间)</span></span><br><span class="line"><span class="built_in">vvector</span>(<span class="type">int</span> size=<span class="number">0</span>,T val=<span class="number">0</span>)&#123;sz=size;dat=<span class="keyword">new</span> T[base[size]];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;base[size];++i)&#123;dat[i]=val;&#125;top=<span class="number">-1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> top+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T val)</span></span>&#123;<span class="keyword">if</span>((top+<span class="number">1</span>)&gt;=base[sz])&#123;T* p=<span class="keyword">new</span> T[base[sz+<span class="number">1</span>]];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;base[sz];++i)&#123;p[i]=dat[i];&#125;p[++top]=val;sz++;<span class="keyword">delete</span>[]dat;dat=p;&#125;<span class="keyword">else</span>&#123;dat[++top]=val;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;top=<span class="number">-1</span>;&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="type">int</span> io)&#123;<span class="keyword">return</span> dat[io];&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="哈希表">哈希表</h2><p>低配版的umap,只支持 <code>long long</code> 的哈希…但是够用了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">uunordered_map</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> first;</span><br><span class="line">T second;</span><br><span class="line">node *next,*nnext;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">long</span> <span class="type">long</span> a,T b,node* p=<span class="literal">nullptr</span>,node* pp=<span class="literal">nullptr</span>):<span class="built_in">first</span>(a),<span class="built_in">second</span>(b),<span class="built_in">next</span>(p),<span class="built_in">nnext</span>(pp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node** dat;</span><br><span class="line">node* pp00;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mmod=<span class="number">1000003</span>;</span><br><span class="line"><span class="type">int</span> sz;</span><br><span class="line"><span class="built_in">uunordered_map</span>()&#123;</span><br><span class="line">sz=<span class="number">0</span>;</span><br><span class="line">pp00=<span class="literal">nullptr</span>;</span><br><span class="line">dat=<span class="keyword">new</span> node*[mmod];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mmod;++i)&#123;</span><br><span class="line">dat[i]=<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qqp</span><span class="params">(<span class="type">long</span> <span class="type">long</span> b,<span class="type">int</span> po)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%mmod;</span><br><span class="line">b=b*b%mmod;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">qqp</span>(val,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz;</span><br><span class="line">&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; io)&#123;</span><br><span class="line"><span class="type">int</span> h=<span class="built_in">hash</span>(io);</span><br><span class="line">node* i=dat[h];</span><br><span class="line"><span class="keyword">for</span>(;i!=<span class="literal">nullptr</span>;i=i-&gt;next)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-&gt;first==io)</span><br><span class="line"><span class="keyword">return</span> i-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line">sz++;</span><br><span class="line">node* j=<span class="keyword">new</span> <span class="built_in">node</span>(io,<span class="number">0</span>,dat[h],pp00);</span><br><span class="line">pp00=j;</span><br><span class="line">dat[h]=j;</span><br><span class="line"><span class="keyword">return</span> j-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">triverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(node* i=pp00;i!=<span class="literal">nullptr</span>;i=i-&gt;nnext)&#123;</span><br><span class="line"><span class="comment">//i-&gt;first键 i-&gt;second键值</span></span><br><span class="line"><span class="comment">//这是遍历所有元素的过程</span></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="priority-queue">priority_queue</h2><p>自定义类需要写比较函数 <code>&lt;</code> ,记得输入0或者1表明建立小根堆还是大根堆,默认是0大根堆.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ppriority_queue</span>&#123;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> sz,ff;<span class="comment">/*ff0大根堆1小根堆*/</span></span><br><span class="line"><span class="built_in">ppriority_queue</span>(<span class="type">int</span> flag=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">100010</span>):<span class="built_in">sz</span>(<span class="number">0</span>),<span class="built_in">ff</span>(flag)&#123;</span><br><span class="line">dat=<span class="keyword">new</span> T[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ppriority_queue</span>(T* arr,<span class="type">int</span> num,<span class="type">int</span> flag=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">100010</span>):<span class="built_in">sz</span>(num),<span class="built_in">ff</span>(flag)&#123;</span><br><span class="line">dat=<span class="keyword">new</span> T[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;</span><br><span class="line">dat[i+<span class="number">1</span>]=dat[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">maintain</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T val)</span></span>&#123;</span><br><span class="line">dat[++sz]=val;</span><br><span class="line"><span class="built_in">maintaindown</span>(sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintaindown</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> fa=num&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>((dat[fa]&lt;dat[num])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[fa],dat[num]);</span><br><span class="line"><span class="built_in">maintaindown</span>(fa);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sz&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-114514</span>;</span><br><span class="line">dat[<span class="number">1</span>]=dat[sz--];</span><br><span class="line"><span class="built_in">maintainup</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintainup</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ls=num&lt;&lt;<span class="number">1</span>,rs=(num&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,gg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(rs&lt;=sz)gg+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(ls&lt;=sz)gg++;</span><br><span class="line"><span class="keyword">switch</span>(gg)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[ls]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[ls]&lt;dat[rs])^ff)&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[rs])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[rs]);</span><br><span class="line"><span class="built_in">maintainup</span>(rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[ls]);</span><br><span class="line"><span class="built_in">maintainup</span>(ls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dat[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sswap</span><span class="params">(T&amp; a,T&amp; b)</span></span>&#123;</span><br><span class="line">T _tmp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=_tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*O(n)建堆*/</span></span><br><span class="line"><span class="type">int</span> ls=num&lt;&lt;<span class="number">1</span>,rs=(num&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,gg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ls&lt;=sz)<span class="built_in">maintain</span>(ls),gg++;</span><br><span class="line"><span class="keyword">if</span>(rs&lt;=sz)<span class="built_in">maintain</span>(rs),gg+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(gg)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[ls]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[ls]&lt;dat[rs])^ff)&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[rs])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[rs]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;</span><br><span class="line"><span class="built_in">sswap</span>(dat[num],dat[ls]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ppair">ppair</h2><p>单纯模仿用的…其实自己写一个也行…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ppair</span>&#123;</span><br><span class="line">T1 first;</span><br><span class="line">T2 second;</span><br><span class="line"><span class="built_in">ppair</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">ppair</span>(T1 a,T2 b):<span class="built_in">first</span>(a),<span class="built_in">second</span>(b)&#123;&#125;</span><br><span class="line">ppair&amp; <span class="keyword">operator</span> =(<span class="type">const</span> ppair&amp; io)&#123;</span><br><span class="line">first=io.first;</span><br><span class="line">second=io.second;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="keyword">operator</span> ==(<span class="type">const</span> ppair&amp; io)<span class="type">const</span>&#123;</span><br><span class="line"><span class="built_in">return</span> (first==io.first)&amp;&amp;(second==io.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(ppair&amp; io)</span></span>&#123;</span><br><span class="line">ppair tmp=io;</span><br><span class="line">io=*<span class="keyword">this</span>;</span><br><span class="line">*<span class="keyword">this</span>=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="list">list</h2><p>十分暴力的链表,考虑到有些时候无可避免地要用到链表,最后还是写了…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">llist</span>&#123;</span><br><span class="line"><span class="type">int</span> cnt,top;<span class="comment">/*top目前链表占用多大空间,cnt链表有多少个元素*/</span></span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span>* nxt;</span><br><span class="line"><span class="built_in">llist</span>(<span class="type">int</span> n=<span class="number">200010</span>):<span class="built_in">cnt</span>(<span class="number">0</span>),<span class="built_in">top</span>(<span class="number">1</span>)&#123;</span><br><span class="line">dat=<span class="keyword">new</span> T[n];</span><br><span class="line">nxt=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">nxt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">llist</span>(T* ddat,<span class="type">int</span> num,<span class="type">int</span> n=<span class="number">200010</span>):<span class="built_in">cnt</span>(num),<span class="built_in">top</span>(<span class="number">1</span>+num)&#123;</span><br><span class="line">dat=<span class="keyword">new</span> T[n];</span><br><span class="line">nxt=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;<span class="comment">/*[0,num)*/</span></span><br><span class="line">dat[i+<span class="number">2</span>]=ddat[i];</span><br><span class="line">nxt[i+<span class="number">1</span>]=i+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _add(<span class="type">int</span> pre,T val)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;;++i,j=nxt[j])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==pre)&#123;</span><br><span class="line">nxt[++top]=nxt[j];</span><br><span class="line">nxt[j]=top;</span><br><span class="line">dat[top]=val;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos,T val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;<span class="number">0</span>||cnt&lt;pos)<span class="keyword">return</span> <span class="number">-114514</span>;</span><br><span class="line">_add(pos,val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _del(<span class="type">int</span> pre)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;;++i,j=nxt[j])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==pre)&#123;</span><br><span class="line">nxt[j]=nxt[nxt[j]];</span><br><span class="line">cnt--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">del</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=<span class="number">0</span>||cnt&lt;pos)<span class="keyword">return</span> <span class="number">-114514</span>;</span><br><span class="line">_del(pos<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">triverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=nxt[<span class="number">1</span>];j!=<span class="number">0</span>;++i,j=nxt[j])&#123;</span><br><span class="line"><span class="comment">/*i是序号,j是当前元素指针*/</span></span><br><span class="line"><span class="comment">//do something...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="高精度">高精度</h2><p>懒得写,下一个.<br>我宁可去洛谷上找一个之前写好的都不要自己修这个破玩意.</p><h2 id="ALL">ALL</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Flu&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ddeque</span>&#123;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> ttop,l;</span><br><span class="line"><span class="built_in">ddeque</span>(<span class="type">int</span> n=<span class="number">200010</span>)&#123;dat=<span class="keyword">new</span> T[n];ttop=(n&gt;&gt;<span class="number">1</span>);l=(n&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ttop-l+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">T <span class="title">front</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">0x0d000721</span>;<span class="keyword">return</span> dat[ttop];&#125;</span><br><span class="line"><span class="function">T <span class="title">back</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">0x0d000721</span>;<span class="keyword">return</span> dat[l];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">0x0d000721</span>;ttop--;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(ttop&lt;l)<span class="keyword">return</span> <span class="number">0x0d000721</span>;l++;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(T val)</span></span>&#123;dat[++ttop]=val;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T val)</span></span>&#123;dat[--l]=val;&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (ttop-l+<span class="number">1</span>)&lt;=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">vvector</span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> base[]=&#123;<span class="number">0</span>,<span class="number">20</span>,<span class="number">110</span>,<span class="number">1010</span>,<span class="number">10010</span>,<span class="number">100010</span>,<span class="number">200010</span>,<span class="number">1000010</span>,<span class="number">2000010</span>,<span class="number">10000010</span>&#125;;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> sz,top;<span class="comment">//当前块指向,顶端元素(Flu比较喜欢闭区间)</span></span><br><span class="line"><span class="built_in">vvector</span>(<span class="type">int</span> size=<span class="number">0</span>,T val=<span class="number">0</span>)&#123;sz=size;dat=<span class="keyword">new</span> T[base[size]];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;base[size];++i)&#123;dat[i]=val;&#125;top=<span class="number">-1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> top+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T val)</span></span>&#123;<span class="keyword">if</span>((top+<span class="number">1</span>)&gt;=base[sz])&#123;T* p=<span class="keyword">new</span> T[base[sz+<span class="number">1</span>]];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;base[sz];++i)&#123;p[i]=dat[i];&#125;p[++top]=val;sz++;<span class="keyword">delete</span>[]dat;dat=p;&#125;<span class="keyword">else</span>&#123;dat[++top]=val;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;top=<span class="number">-1</span>;&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="type">int</span> io)&#123;<span class="keyword">return</span> dat[io];&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ppriority_queue</span>&#123;</span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span> sz,ff;<span class="comment">/*ff0大根堆1小根堆*/</span></span><br><span class="line"><span class="built_in">ppriority_queue</span>(<span class="type">int</span> flag=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">100010</span>):<span class="built_in">sz</span>(<span class="number">0</span>),<span class="built_in">ff</span>(flag)&#123;dat=<span class="keyword">new</span> T[n];&#125;</span><br><span class="line"><span class="built_in">ppriority_queue</span>(T* arr,<span class="type">int</span> num,<span class="type">int</span> flag=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">100010</span>):<span class="built_in">sz</span>(num),<span class="built_in">ff</span>(flag)&#123;dat=<span class="keyword">new</span> T[n];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;dat[i+<span class="number">1</span>]=dat[i];&#125;<span class="built_in">maintain</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T val)</span></span>&#123;dat[++sz]=val;<span class="built_in">maintaindown</span>(sz);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintaindown</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="type">int</span> fa=num&gt;&gt;<span class="number">1</span>;<span class="keyword">if</span>((dat[fa]&lt;dat[num])^ff)&#123;<span class="built_in">sswap</span>(dat[fa],dat[num]);<span class="built_in">maintaindown</span>(fa);&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(sz&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0x0d000721</span>;dat[<span class="number">1</span>]=dat[sz--];<span class="built_in">maintainup</span>(<span class="number">1</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintainup</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="type">int</span> ls=num&lt;&lt;<span class="number">1</span>,rs=(num&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,gg=<span class="number">0</span>;<span class="keyword">if</span>(rs&lt;=sz)gg+=<span class="number">2</span>;<span class="keyword">if</span>(ls&lt;=sz)gg++;<span class="keyword">switch</span>(gg)&#123;<span class="keyword">case</span> <span class="number">0</span>:&#123;<span class="keyword">return</span>;&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;<span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[ls]);&#125;<span class="keyword">return</span>;&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;<span class="keyword">if</span>((dat[ls]&lt;dat[rs])^ff)&#123;<span class="keyword">if</span>((dat[num]&lt;dat[rs])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[rs]);<span class="built_in">maintainup</span>(rs);&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[ls]);<span class="built_in">maintainup</span>(ls);&#125;&#125;<span class="keyword">break</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function">T <span class="title">top</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> dat[<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> sz;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sswap</span><span class="params">(T&amp; a,T&amp; b)</span></span>&#123;T _tmp=a;a=b;b=_tmp;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*O(n)建堆*/</span><span class="type">int</span> ls=num&lt;&lt;<span class="number">1</span>,rs=(num&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,gg=<span class="number">0</span>;<span class="keyword">if</span>(ls&lt;=sz)<span class="built_in">maintain</span>(ls),gg++;<span class="keyword">if</span>(rs&lt;=sz)<span class="built_in">maintain</span>(rs),gg+=<span class="number">2</span>;<span class="keyword">switch</span>(gg)&#123;<span class="keyword">case</span> <span class="number">0</span>:&#123;<span class="keyword">return</span>;&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;<span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[ls]);&#125;<span class="keyword">return</span>;&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;<span class="keyword">if</span>((dat[ls]&lt;dat[rs])^ff)&#123;<span class="keyword">if</span>((dat[num]&lt;dat[rs])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[rs]);&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>((dat[num]&lt;dat[ls])^ff)&#123;<span class="built_in">sswap</span>(dat[num],dat[ls]);&#125;&#125;<span class="keyword">break</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> sz&lt;=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">llist</span>&#123;</span><br><span class="line"><span class="type">int</span> cnt,top;<span class="comment">/*top目前链表占用多大空间,cnt链表有多少个元素*/</span></span><br><span class="line">T* dat;</span><br><span class="line"><span class="type">int</span>* nxt;</span><br><span class="line"><span class="built_in">llist</span>(<span class="type">int</span> n=<span class="number">200010</span>):<span class="built_in">cnt</span>(<span class="number">0</span>),<span class="built_in">top</span>(<span class="number">1</span>)&#123;dat=<span class="keyword">new</span> T[n];nxt=<span class="keyword">new</span> <span class="type">int</span>[n];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;nxt[i]=<span class="number">0</span>;&#125;&#125;</span><br><span class="line"><span class="built_in">llist</span>(T* ddat,<span class="type">int</span> num,<span class="type">int</span> n=<span class="number">200010</span>):<span class="built_in">cnt</span>(num),<span class="built_in">top</span>(<span class="number">1</span>+num)&#123;dat=<span class="keyword">new</span> T[n];nxt=<span class="keyword">new</span> <span class="type">int</span>[n];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;<span class="comment">/*[0,num)*/</span>dat[i+<span class="number">2</span>]=ddat[i];nxt[i+<span class="number">1</span>]=i+<span class="number">2</span>;&#125;&#125;</span><br><span class="line"><span class="type">void</span> _add(<span class="type">int</span> pre,T val)&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;;++i,j=nxt[j])&#123;<span class="keyword">if</span>(i==pre)&#123;nxt[++top]=nxt[j];nxt[j]=top;dat[top]=val;cnt++;<span class="keyword">return</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos,T val)</span></span>&#123;<span class="keyword">if</span>(pos&lt;<span class="number">0</span>||cnt&lt;pos)<span class="keyword">return</span> <span class="number">0x0d000721</span>;_add(pos,val);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="type">void</span> _del(<span class="type">int</span> pre)&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;;++i,j=nxt[j])&#123;<span class="keyword">if</span>(i==pre)&#123;nxt[j]=nxt[nxt[j]];cnt--;<span class="keyword">return</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">del</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;<span class="keyword">if</span>(pos&lt;=<span class="number">0</span>||cnt&lt;pos)<span class="keyword">return</span> <span class="number">0x0d000721</span>;_del(pos<span class="number">-1</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">triverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=nxt[<span class="number">1</span>];j!=<span class="number">0</span>;++i,j=nxt[j])&#123;</span><br><span class="line"><span class="comment">/*i是序号,j是当前元素指针*/</span></span><br><span class="line"><span class="comment">//do something...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">uunordered_map</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> first;</span><br><span class="line">T second;</span><br><span class="line">node *next,*nnext;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">long</span> <span class="type">long</span> a,T b,node* p=<span class="literal">nullptr</span>,node* pp=<span class="literal">nullptr</span>):<span class="built_in">first</span>(a),<span class="built_in">second</span>(b),<span class="built_in">next</span>(p),<span class="built_in">nnext</span>(pp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node** dat;</span><br><span class="line">node* pp00;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mmod=<span class="number">1000003</span>;</span><br><span class="line"><span class="type">int</span> sz;</span><br><span class="line"><span class="built_in">uunordered_map</span>()&#123;sz=<span class="number">0</span>;pp00=<span class="literal">nullptr</span>;dat=<span class="keyword">new</span> node*[mmod];<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mmod;++i)&#123;dat[i]=<span class="literal">nullptr</span>;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qqp</span><span class="params">(<span class="type">long</span> <span class="type">long</span> b,<span class="type">int</span> po)</span></span>&#123;<span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;<span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;<span class="keyword">if</span>(po&amp;<span class="number">1</span>)res=res*b%mmod;b=b*b%mmod;po&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">qqp</span>(val&lt;<span class="number">0</span>?(-val):val,<span class="number">5</span>);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> sz;&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; io)&#123;<span class="type">int</span> h=<span class="built_in">hash</span>(io);node* i=dat[h];<span class="keyword">for</span>(;i!=<span class="literal">nullptr</span>;i=i-&gt;next)&#123;<span class="keyword">if</span>(i-&gt;first==io)<span class="keyword">return</span> i-&gt;second;&#125;sz++;node* j=<span class="keyword">new</span> <span class="built_in">node</span>(io,<span class="number">0</span>,dat[h],pp00);pp00=j;dat[h]=j;<span class="keyword">return</span> j-&gt;second;&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">empty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> sz&lt;=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">triverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(node* i=pp00;i!=<span class="literal">nullptr</span>;i=i-&gt;nnext)&#123;</span><br><span class="line"><span class="comment">//i-&gt;first键 i-&gt;second键值</span></span><br><span class="line"><span class="comment">//这是遍历所有元素的过程</span></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>做题有感</h1><p>没错,前面的放弃维护了(真不负责任),因为我看不懂…</p><h2 id="背板">背板</h2><p>数据结构包含哪方面内容?数据存储方法有多少种?</p><p>数据的逻辑结构,物理结构,存储结构.</p><p>存储表示方法有四种:</p><ol><li>顺序存储(逻辑相邻存储在物理相邻的单元中)</li><li>链接存储(不要求物理相邻,节点间的关系使用指针表示)</li><li>索引存储(除了存储节点信息还添加索引表示节点地址)</li><li>散列存储(根据关键字计算出存储地址)</li></ol><h2 id="数组">数组</h2><p>一定要看清行优先存储还是列优先存储!!!</p><h2 id="排序">排序</h2><p>内外排序的区别是,外排序数据很大,一次读不完需要好几次IO,此时限制IO次数比较重要.(听说外排序可以用归并)</p><p>快排辅助空间是O(logn)的,选择排序是不稳定的排序算法,快排,堆都是不稳定的排序算法.</p><p>快排的 <strong>划分</strong> :依照某个元素把整个数组拆成两半的过程.<br>然而有个坑:在划分的时候元素顺序可能有锅:考虑选择某个元素,然后这个元素就能动了,然后朝不能动的那端进行比较,确保不需要额外空间.比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">46 79 56 38 40 84 快排选择头节点</span><br><span class="line">__ 79 56 38 40 __ (84) 84这个时候和46比较决定放在哪里</span><br><span class="line">__ 79 56 38 __ 84 (40) 40这个时候和46比较决定放在哪里</span><br><span class="line">40 __ 56 38 __ 84 (79) 79这个时候和46比较决定放在哪里</span><br><span class="line">...这样类推,最后的放原来比较元素</span><br></pre></td></tr></table></figure><p><strong>堆排序</strong> :建堆的时候是先从子树开始维护堆序性(建堆),然后弹出元素的时候是从头开始到链维护堆序性.</p><p><strong>归并排序</strong> :一组记录的关键字是(25,50,15,35,80,85,20,40,36,70)其中含有5个长度为2的有序表,用归并排序算法进行一趟归并的结果是啥</p><blockquote><p>给的有序表可以直接合并,所以就是[25,50]和[15,35]合并,[80,85]和[20,40]合并,[36,70]不动,答案出来了.</p></blockquote><h2 id="查找">查找</h2><p>判定树:节点的值是当前位置元素的值.</p><p>比如5,12,17,19,23,25,30,36的判定树是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    19</span><br><span class="line">   / \</span><br><span class="line">  12   25</span><br><span class="line"> / \   /\</span><br><span class="line">6  19 23 30</span><br><span class="line">          \</span><br><span class="line">   36</span><br></pre></td></tr></table></figure><p>这个时候的成功查找长度是每个节点的高度(根节点高度定义为1)平均值</p><p>不成功的ASL计算: <strong>\sum深度空指针乘深度个数/指针个数</strong> ,在这里看图,深度为3的节点有6 19 23 30,他们贡献7个空指针,36深度为4贡献2个空指针,加一起:<br>$$\frac{3\times7+4\times2}{9}=3.2222$$</p><h2 id="队列">队列</h2><p>两点:1.一定要注意队列是否为空!!然后就是,队列是加在队列末尾,队列前端先出.</p><ol start="2"><li>循环队列元素公式 $(end-front+M)\mod M$</li></ol><h2 id="树论">树论</h2><p>迷惑问题:若完全二叉树的某节点无左孩子节点,则他必是叶子节点(T)<br>争议项:只有一个根,这个根已经是根了,还能是叶子吗???</p><p>课本教的&quot;树转二叉树&quot;,“二叉树转森林”,&quot;森林转二叉树&quot;的算法统称 <strong>自然对应法</strong> ,现在逐一击破:</p><p><strong>树转二叉树</strong> :一个节点的所有子节点之间连线,然后只保留最靠左的一条线,其余删掉.比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1           1           1</span><br><span class="line"> /|\         /|\         /</span><br><span class="line">2 3 4   -&gt;  2-3-4   -&gt;  2-3-4</span><br><span class="line"> /|\         /|\         /</span><br><span class="line">5 6 7       5-6-7       5-6-7</span><br></pre></td></tr></table></figure><p><strong>二叉树转树</strong> :逆过程,记住左儿子右兄弟即可恢复.根节点的右兄弟直接砍掉,此时会变成森林.</p><p><strong>二叉树转森林</strong> :第一棵树的根的右孩子连其他树的根,然后以此类推.(注意到自然对应出来的二叉树的根只有一个左子树,所以可以大胆搞)</p><p><strong>森林转二叉树</strong> :根节点开始,一直向右走的链全部断开即可.</p><h2 id="图论">图论</h2><p>前驱节点:就是树或者图能到达该点的几个节点.<br>后继节点:该点能到达的所有节点.(在图中,这俩想有多少个能有多少个).</p><p>AOV网:就是DAG(有向无环图)<br>AOE网:带权的DAG.</p><p>广度优先序列:直接遍历即可.<br>深度优先序列:dfs.复杂度O(n+e)别写错</p><p><strong>关键路径</strong> :从源点到汇点的权值 <strong>最长</strong> 的路径.</p><p>邻接矩阵存储:<br>$$\begin{bmatrix}0&amp;\infty&amp;5\<br>\infty&amp;0&amp;4\<br>\infty&amp;3&amp;0<br>\end{bmatrix}$$<br>注意自己连自己是0,没边填infty.</p><h2 id="平衡树">平衡树</h2><p>平衡的定义是 |左子树-右子树|&lt;=1 ,否则旋转.</p><p>平衡树删除体现在</p><h2 id="散列">散列</h2><p>给一个数组,制作哈希表:</p><p>拉链法:每个点都是一个链表.<br>开点法:顺延该点.</p><p>下面讨论拉链法的平均查找长度:<br>假设函数是%11,数列33,21,8,22,43,17,12,13,11,构造表如下:</p><table><thead><tr><th style="text-align:left">0</th><th style="text-align:left">1</th><th style="text-align:left">2</th><th style="text-align:left">3</th><th style="text-align:left">4</th><th style="text-align:left">5</th><th style="text-align:left">6</th><th style="text-align:left">7</th><th style="text-align:left">8</th><th style="text-align:left">9</th><th style="text-align:left">10</th></tr></thead><tbody><tr><td style="text-align:left">33</td><td style="text-align:left">12</td><td style="text-align:left">13</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">17</td><td style="text-align:left"></td><td style="text-align:left">8</td><td style="text-align:left"></td><td style="text-align:left">21</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">43</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><p>成功:(每个元素的深度)/数列元素个数,上面 $ASL_{SUCC}=\frac{1\times6+2\times2+3}9=1.4444$<br>失败:(哈希表每个深度+1)/哈希表值域多宽,上面 $ASL_{UNSUCC}=\frac{4+2+2+1+1+1+2+1+2+1+3}{11}=1.8182$</p><h2 id="待解决的问题">待解决的问题</h2><p>背kmp板子,失配指针是干什么的</p><p>背堆板子.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛法</title>
      <link href="/2024/09/03/10012%E7%AD%9B%E6%B3%95/"/>
      <url>/2024/09/03/10012%E7%AD%9B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="区间筛">区间筛</h2><p>例题:每次给一对 $l,r$ ,求区间内的质数有多少个.<br>范围是 $l\le r\le10^{12},b-a\le10^6$.</p><p>首先要明白一个常见的道理: 区间 $[a,b]$ 内最大的质因数是 $\sqrt b$ .所以我们要先打好1e6内的表,然后利用坐标偏移再打好lr的表即可.</p><p>看到 $10^{12}$ 的数据范围要想到区间筛.因为数据范围这么大的话,一般要用到,&quot;一个数的最小质因数不会超过 $\sqrt n$ &quot;这个结论,然后先质数筛,再对每个数进行质因数分解O(logn).然后利用唯一分解定理把约数组合拼上去即可.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推式子</title>
      <link href="/2024/09/03/10017%E6%8E%A8%E5%BC%8F%E5%AD%90/"/>
      <url>/2024/09/03/10017%E6%8E%A8%E5%BC%8F%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>以下是推式子时间,记录一些公式的求解过程.(以及一些奇奇怪怪的公式)</p><ol><li><p>求解的个数:(1e9取模)<br>$$\frac1x+\frac1y=\frac1{n!}$$<br>首先我们发现,1/x和1/y都是小于1/n!的,所以x和y应该是大于n!的.<br>我们设 $y=n!+k,k\in N^+$ ,于是式子变成<br>$$\frac1x+\frac1{n!+k}=\frac1{n!}$$<br>化简变成<br>$$x=n!+\frac{(n!)^2}k$$<br>我们就统计一下约数个数就行了,具体地,线性筛一下,算出每个数的最小质因数,因为 $x^2$ 的每个约数都是 $x$ 的两倍,所以我们要先乘2再加1.</p></li><li><p>求<br>$$\sum_{k=1}^n\Big\lfloor\frac{(3k+6)!+1}{3k+7}-\Big\lfloor\frac{(3k+6)!}{3k+7}\Big\rfloor\Big\rfloor$$<br>我们分情况考虑,假设 $3k+7$ 是质数,则由定理知 $(3k+6)!\equiv-1\mod (3k+7)$ ,所以我们设 $(3k+6)!+1=a(3k+7)$ (同时注意,模意义下只能这么干,不要想着逆元解决),原式即为<br>$$\Big\lfloor a-\Big\lfloor a-\frac{1}{3k+7}\Big\rfloor\Big\rfloor=1$$<br>同时,假如不是质数,由于其质因子全部包含在阶乘里面,也就有了 $(3k+7)|(3k+6)!$ .这个时候还是设 $(3k+6)!=a(3k+7)$ ,式子可以化为<br>$$\Big\lfloor a+\frac{1}{3k+7}-a\Big\rfloor=0$$<br>所以,式子只是让我们统计一下有多少个 $3k+7$ 是质数.</p></li><li><p>求 $x^2+y^2=19451945$ :凑配法:对于展开数有以下式子:<br>$$(ac+bd)^2+(ad-bc)^2=(a^2+b^2)(c^2+d^2)$$<br>然后19451945就能分解为1945*10001,现在开始考虑分解1945,在3的时候能分解,问题解决了.最后的abcd分别是 $3,44,100,1$ ,答案是 $344,4397$ .</p></li></ol><h2 id="其他奇奇怪怪的公式">其他奇奇怪怪的公式</h2><ol><li>feb表示斐波那契数列第n项.<br>$$\gcd(feb_{n},feb_{m})=feb_{\gcd(n,m)}$$</li><li></li></ol><p>$$\gcd(a^m-b^m,a^n-b^n)=a^{\gcd(n,m)}-b^{\gcd(n,m)},\gcd(a,b)=1$$<br>3.<br>$$\gcd(a^n-1,a^m-1)=a^{\gcd(n,m)}-1$$<br>4.<br>$$(n+1)lcm(C^{0}<em>{n},C^{1}</em>{n},…,C^{n}_{n})=lcm(1,2,…,n+1)$$<br>5.<br>$$((n+1)(n+2)(n+3)…(n+k))%(k!)=0$$<br>6. $n!$ 中p的幂次是<br>$$\sum\left\lfloor\frac n{p^i}\right\rfloor$$<br>7. 若 $b|a$ 则有<br>$$\frac ab%c=\frac{a%(bc)}b$$<br>8. 快速幂的优化(偏一点)<br>常规快速幂是快速求 $a^b%c$ 现在是多组数据求 $x^k%p$ ,注意x和p是给定的,如何预处理?<br>正解不是快速幂,而是分块思想,取 $k=\sqrt{mod}$ ,预处理 $x^0,xx^1,…,x^{k-2},x^{k-1}$ 和 $x^{0},x^{k},x^{2k},…,x^{\lfloor\frac{mod}{k}\rfloor k}$ ,然后每次查询就是O(1)级别的了,预处理是 $O(k)$ 也就是 $O(\sqrt{mod})$ 在 $5e^6$ 的数据范围下跑得过 $O(T\log k)$ .<br>9. 斐波那契数列模 $p$ 具有周期性(不只是质数),且循环节长度 $\pi(p)\le6p$ .</p><h2 id="升幂引理">升幂引理</h2><p>规定 $v_p(n)$ 表示n中有多少个p这个因子.</p><ol><li>素数p和与p互质的n.<br>若 $p|x-y$ 有<br>$$v_p(x^n-y^n)=v_p(x-y)$$<br>若 $p|x+y$ 则对 <strong>奇数</strong> n有<br>$$v_p(x^n+y^n)=v_p(x+y)$$</li><li>若p不是2(是奇质数):<br>若 $p|x-y$ 有<br>$$v_p(x^n-y^n)=v_p(x-y)+v_p(n)$$<br>若 $p|x+y$ 则对 <strong>奇数</strong> n有<br>$$v_p(x^n+y^n)=v_p(x+y)+v_p(n)$$</li><li>若p是2且 $p|x-y$ 对 <strong>偶数</strong> n有<br>$$v_p(x^n-y^n)=v_p(x-y)+v_p(x+y)+v_p(n)-1$$</li><li>对于 $4|x-y$<br>$$v_2(x+y)=1$$<br>$$v_2(x^n-y^n)=v_2(x-y)+v_2(n)$$</li></ol><h2 id="Wilson威尔逊定理">Wilson威尔逊定理</h2><p>$$(p-1)!\equiv-1\mod p$$</p><ol><li><p>特殊的阶乘(n比p大,不计所有p的因子对p取模)<br>$$\begin{aligned}&amp;(n!)\mod p\=&amp;(-1)^{\lfloor\frac{n}{p}\rfloor}\Big(\Big\lfloor\frac np\Big\rfloor!\Big)\mod p\end{aligned}$$<br>打一个阶乘表可以 $\log_pn$解决.</p></li><li><p>Lagenre(勒让德)公式<br>$$v_p(n!)=\sum_{i=1}^\infin\Big\lfloor\frac n{p^i}\Big\rfloor=\frac{n-S_p(n)}{p-1}$$<br>其中, $S_p(n)$ 表示在p进制下n每位数字和.(注意,直接除,别搞什么逆元啥的)</p></li></ol><h2 id="类欧几里得算法">类欧几里得算法</h2><ol><li>我们需要logn解决.设<br>$$\begin{aligned}f(a,b,c,n)=&amp;\sum_{i=0}^n\Big\lfloor\frac{ai+b}{c}\Big\rfloor\=&amp;\sum_{i=0}^n\Big\lfloor\frac{(\lfloor\frac ac\rfloor c+a\mod c)i+(\lfloor\frac bc\rfloor c+b\mod c)}{c}\Big\rfloor\=&amp;\frac{n(n+1)}2\Big\lfloor\frac ac\Big\rfloor+(n+1)\Big\lfloor\frac bc\Big\rfloor+\sum_{i=0}^n\Big\lfloor\frac{(a\mod c)i+(b\mod c)}c\Big\rfloor<br>\=&amp;\frac{n(n+1)}2\Big\lfloor\frac ac\Big\rfloor+(n+1)\Big\lfloor\frac bc\Big\rfloor+f(a\mod c,b\mod c,c,n)\end{aligned}$$<br>改变一下求和项目看到<br>$$\begin{aligned}f(a,b,c,n)&amp;=\sum_{k=0}^{m-1}\sum_{i=0}^n\Big[i&gt;\Big\lfloor\frac{jc+c-b-1}{a}\Big\rfloor\Big]<br>\&amp;=\sum_{j=0}^{m-1}\Big(n-\Big\lfloor\frac{jc+c-b-a}a\Big\rfloor\Big)<br>\&amp;=nm-f(c,c-b-1,a,m-1)\end{aligned}$$<br>中间有<br>$$n^2=2\frac{n(n+1)}2-n=\Big(\sum_{i=0}^ni\Big)-n$$</li></ol><h2 id="万能欧几里得算法">万能欧几里得算法</h2>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Round970 Div3</title>
      <link href="/2024/09/03/20004CF-Round970-Div3/"/>
      <url>/2024/09/03/20004CF-Round970-Div3/</url>
      
        <content type="html"><![CDATA[<p>CF场.收获颇丰.</p><p>栈区开新数组是默认可能会很混乱的取值,可以在后面加一个大括号,然后就是0了. <code>int a[114][514]&#123;&#125;</code></p><p>首先是看大佬的码风.两个模板构造的默认是前面一个是默认分配大小,后面一个是每个元素初始值.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(<span class="number">114</span>,<span class="number">514</span>);</span><br></pre></td></tr></table></figure><p>然后是找最大元素.有一个很方便的函数是 <code>max_element</code> ,直接给两个指针,返回最大元素指针,多个就返回第一个指针.</p><p>相对的,肯定也有 <code>min_element</code> 了,在此不表.</p><p>然后是前缀和后缀和的巧妙应用.如果我要遍历一个数组,在每个点都会用到前缀和和后缀和,这个时候有一个优化就是,先求前缀和(一个数,不是数组),然后从末尾开始,减掉该点,同时再来一个数代表后缀和,就这样倒着边算后缀和,减掉前缀和,同时计算出答案.</p><h2 id="字符串">字符串</h2><p>奇数位的字符串在前面删掉一个元素的时候会变成偶数,也就是说直接让这个奇数位在求后缀和的时候装偶数位的就行了,没必要自己给自己设套,又是映射又是四个数组的.</p><h2 id="位运算">位运算</h2><p><code>a&amp;1^1</code> 是判定一个数是不是偶数的算法,再也不用写成 <code>(!(a&amp;1))</code> 而且为了优先级担心半天了.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prufer序列</title>
      <link href="/2024/08/29/10007Prufer%E5%BA%8F%E5%88%97/"/>
      <url>/2024/08/29/10007Prufer%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>Prufer序列的构造略,这里主要总结应用.</p><p>完全图 $K_n$ 有 $n^{n-2}$ 棵生成树.证明:Prufer序列值域是[1,n],有n-2个,QED.</p><h2 id="性质">性质</h2><p>在Prufer序列中出现次数为d-1的节点的度数是d.</p><p>所以,给一个序列表示每个点的度数,可以计算出来这样的无根树一共有<br>$$\prod_{i=1}^n\binom{rest}{d_i-1}$$<br>个,rest表示每次选数剩下的位置.</p><h2 id="图联通方案数">图联通方案数</h2><blockquote><p>一个n个点m条边的带标号无向图有k个连通块.我们希望添加k-1条边使得整个图连通.求方案数.</p></blockquote><p>首先是多项组合数公式:表示从<br>$$\binom{a}{b,c,d}=\frac{a!}{b!c!d!}$$<br>然后是多元二项式定理:<br>$$(x_1+…+x_m)^p=\sum_{c_i\ge0,\sum_{i=1}^{m}c_i=p}\binom{p}{c_1,…,c_m}\cdot\prod_{i=1}^{m}x_i^{c_i}$$<br>结论:<br>$$n^{k-2}\cdot\prod_{i=1}^{k}s_i$$</p>]]></content>
      
      
      <categories>
          
          <category> Graph&amp;Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2024/08/25/10015%E5%9B%BE%E8%AE%BA/"/>
      <url>/2024/08/25/10015%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="概念">概念</h2><p><strong>连通分量</strong> :无向图中,满足任意两点之间都有路径相连的极大连通子图.也就是说,抽离出一些点以及它们之间的边,满足这些点任意两点之间,可以直接或间接到达对方,在这个前提下,满足抽离出的图越大越好,把抽离出的图叫做连通分量.</p><p><strong>割点</strong> :无向图中,删除该点及与其相连的边后,图的连通分量数量增加,则称其为割点.换而言之,删除一个割点及相关边后,图中原来连通的两点不再连通,从而使得一个连通分量分裂成两个(或多个)连通分量.</p><p><strong>点双连通</strong> :若对于一个无向图,其任意一个节点对于这个图本身而言都不是割点,则称其点双连通.也就是说,删除任意点及其相关边后,整个图仍然属于一个连通分量.</p><p><strong>点双连通分量</strong> :无向图中,极大的点双连通子图.与连通分量类似,抽离出一些点及它们之间的边,使得抽离出的图是一个点双连通图,在这个前提下,使得抽离出的图越大越好.</p><p><strong>边双连通分量</strong> :其实就是求出来割边之后,对去掉割边的图遍历以下求出来所有的</p><h2 id="Floyd算法">Floyd算法</h2><p>通过dp的方式进行转移, <code>dp[i][j]</code> 表示从i到j的最小边权和.<br>还可以这么想,在一个没有权值的图中, <code>dp[i][j]</code> 表示i能到j.现在,假设dp是一个矩阵,则 $dp^k$ 的意思就是从i花费k步能到达j的方案总数.<br>例题:一个人在图上1节点,每步可以走向与他相连的其他节点,也可以不动,还可以自爆,自爆之后就不能动了,求经过k步之后的所有行走情况和.<br>一些特殊情况的处理:</p><ol><li>这一步不动: 自己给自己连边,形成自环即可.</li><li>自爆: 我们假想一个新节点0, 所有点和0连边,0不和任何点连边(自爆之后不能转移出去).</li></ol><p>最后,套上矩阵快速幂板子即可.</p><h2 id="dfs序-欧拉序">dfs序 欧拉序</h2><p>这俩的区别就是,前者是节点遍历到的时候只会有一次,后者是来的时候一次走的时候再来一次.</p><h2 id="dfs生成树-Tarjan">dfs生成树 Tarjan</h2><p>略,好难学的</p><h2 id="例题">例题</h2><ol><li>好多牛之间存在爱慕关系,其中爱慕具有传递性,A爱B,B爱C的话A也会爱C.爱慕关系构成一张图,明星牛的定义是受到所有牛的爱戴(所有牛是爱慕自己的),求一张图有多少个明星牛.</li></ol><p>因为满足传递性,我们要把图缩成一张DAG(有向无环图),此时 <strong>牛之间不会存在相互爱慕的关系</strong> ,所以如果一个牛受到别人的爱戴,他不会再爱戴别人,所以直接统计出度是0的点即可,多个出度为0直接输出0(因为此时图不再联通).</p><h1>树论</h1><h2 id="树论">树论</h2><p>树本身是一种特殊的图,所以放在一起了…</p><h2 id="树上启发式合并">树上启发式合并</h2><p>说好听点叫启发式,说难听点就是口胡结论,这种题只能多做.</p><h2 id="例题-2">例题</h2><ol><li>春节十二响: 给一颗树,每一个点有一个权值,点能放在一个块当且仅当点之间不具有父子节点关系,一个块的值被定义成块里所有点权值的最大值,求一棵树的最小块的值和.</li></ol><p>启发式合并:首先考虑一个三节点二叉树:根节点必定是一个,然后两个叶节点放一起.然后是一个两端都是链的二叉树,这个时候每条链上肯定不会在一起,就和另一条链合并,同时为了让块最小肯定是每次取两条链最大的节点合并.<br>然后发现我们得到了一条新的链,于是启发式合并的思路就出来了:如果一棵树有两个及以上的链,每次取最大的节点合并成一条链即可.</p><ol start="2"><li>你要从s去t,给两张图分别是公交车的路线以及时间图,地铁的路线一级时间图,你可以任意坐公交但是只能最多坐一站地铁,求最小时间以及,如果坐地铁的话最小的地铁站位号是多少.</li></ol><p>QianK说这个题典…我们对s和t都跑一遍dij,然后枚举所有地铁站,看边然后加一起就行了…</p>]]></content>
      
      
      <categories>
          
          <category> Graph&amp;Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数算法</title>
      <link href="/2024/08/08/10006%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2024/08/08/10006%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>随机数引擎</h1><p>常见的有两个,一个是<code>rand()</code>,另一个是随机数引擎<code>mt19937</code>.</p><h2 id="shuffle">shuffle</h2><p>洗牌算法,和sort一样用,开头,结尾,随机数引擎.(随机打乱)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::mt19937 <span class="title">rnd</span><span class="params">(seed)</span></span>;</span><br><span class="line"><span class="built_in">shuffle</span>(dat,dat+<span class="number">1</span>+n,rnd);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WA问题速查</title>
      <link href="/2024/08/06/10020WA%E9%97%AE%E9%A2%98%E9%80%9F%E6%9F%A5/"/>
      <url>/2024/08/06/10020WA%E9%97%AE%E9%A2%98%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>在这里记录一些自己可能察觉不到的莫名WA.</p><h2 id="数据结构上机">数据结构上机</h2><p>如果你WA了,先检查 <code>&lt;,&gt;</code> 这种运算符是否严谨,能换成 <code>&lt;=,&gt;=</code> 的一定要换,数据结构的hack数据非常强…</p><h2 id="VSCode莫名丢失输出-啥也没输出">VSCode莫名丢失输出(啥也没输出)</h2><p>先检查函数有没有返回值!!!VSC哪怕函数值返回被忽略但是不return 0也会直接RE.</p><h2 id="祖宗">祖宗</h2><p>开long long了吗?</p><h2 id="取模">取模</h2><p>有的时候要对答案进行特判,输出一个定值.但是又有的时候模数不是指定的,是要输入的,于是可能出现特判1但是模数是1正好被卡的状况…</p><h2 id="交互">交互</h2><p><code>cout&lt;&lt;&quot;!&quot;&lt;&lt;solve()&lt;&lt;endl;</code>是错的,尤其是交互库的时候千万不要这么搞,会WA,因为<code>cout</code>先执行输出然后再计算函数的值.</p><h2 id="除法">除法</h2><p>检查一下有没有除0模0的特判,不然会RE的哦.</p><h2 id="分解">分解</h2><p>什么时候能用 $O(\sqrt n)$ 的数分解(也就是<code>for(int i=2;i*i&lt;=n;++i)</code>)?当然是不影响后续的时候.假如产生影响就只能一个一个枚举了…(比如 $g(x)=\sum_{i|x}g(i)$ )</p><p>还有还有,那就是在 $f(x),f(n/x)$ 的时候记得看一下这俩数一不一样,会出大问题!!!</p><h2 id="双指针">双指针</h2><p>记得结算的时候动一下指针.</p><h2 id="DP转移">DP转移</h2><p>有的时候,状态之间会进行转换.状态之间提前到达的时候不要使用<code>dpxx=xx%m</code>,应该用<code>dpxx=(dpxx+xx)%m</code>,因为状态提前到达的时候会被<code>=</code>直接归零,就白转移了,不是<code>memset</code>的问题.</p><h2 id="树">树</h2><p>给定一棵树有n个节点,首先要判定是不是一棵树!!!(ie度数和 $\sum_{i=1}^nd_i=n-2$ )<br>一定要特判节点为1的时候有多少种情况!!!</p><ol><li>树的相同判定:给一个深度上有多少节点的数组,判断这样的树是否唯一.</li></ol><p>然而我们发现只有连着的节点大于2的才有多种,单独2后面还有链的并不算,可以看演示:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> a   a   a   a</span><br><span class="line">/|\ /|\ /|\ /|\</span><br><span class="line">bcd bcd bcd bcd</span><br><span class="line">||  ||| |\|</span><br><span class="line">ee  efg efg</span><br><span class="line">这两种树本质上一样.但是这俩不一样.</span><br></pre></td></tr></table></figure><h2 id="精度问题">精度问题</h2><p>有的时候取log或者怎么样然后涉及取整的时候函数会有精度误差,不能直接用ceil,要先减掉一个eps,否则会WA.</p><h2 id="图论">图论</h2><ol><li>给一张无向图,遍历他,染个色(只保证无自环重边).</li></ol><p>肯定是要bfs的了,但是有个hack是 <strong>给的图不一定连通</strong> ,所以要在bfs这里套一个循环保证每个点都要进队(被遍历到).(CF687A)</p><h2 id="数学">数学</h2><p>鸽巢的时候记得卡一下边界,虽然书上说最多能放 $\lceil\frac nk\rceil$ 个,但是最多能着的下 $n%k$ 种,记得统计一下.(另外,如果ceil等于直接除的话要特判,因为此时 $n%k$ 等于0)</p><h1>大坑</h1><h2 id="目力">目力</h2><p>众所周知,某些质数因为长得像而混迹998244353,而有的则是正确输出 <code>YE5</code> ,错误输出 <code>N0</code> ,就很邪恶.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">998244853</span> 是质数</span><br><span class="line"><span class="number">998244259</span> 是质数</span><br><span class="line"><span class="number">99824353</span>  是质数</span><br><span class="line"><span class="number">998242353</span> 不是质数</span><br><span class="line"><span class="number">100000007</span>(<span class="number">1e8</span>+<span class="number">7</span>) 是质数</span><br><span class="line"></span><br><span class="line"><span class="number">19491001</span> 是质数</span><br><span class="line"><span class="number">19260817</span> 是质数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧</title>
      <link href="/2024/08/03/10005%E6%8A%80%E5%B7%A7/"/>
      <url>/2024/08/03/10005%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>RT,这里写一些题目中总结的技巧.</p><h2 id="取模映射">取模映射</h2><p>如何让a投射到 <code>[1,b]</code> 的范围中去?答案很简单: <code>(a-1)%b+1</code> .</p><h2 id="分段">分段</h2><ol><li><a href="https://codeforces.com/problemset/problem/1419/C">空调</a>.一个空调有一个位置和温度,向两边传送温度,<code>+1</code>递增,问所有格子有多凉快.</li></ol><p><code>std</code>把空调向左传播和向右传播分开了,然后分别维护一个<code>L</code>和<code>R</code>表示向左传播向右传播的最小值,可以做一个DP.</p><h2 id="max-element">max_element</h2><p>返回最大元素的指针,如果有好几个返回最小的那个位置的指针.</p><p><code>*max_element(a+1,a+1+n)</code></p><h2 id="to-string">to_string</h2><p>返回一个string类,是转换数字为字符串的方式(之一,比自己写方便)</p><p><code>string a=to_string(114514)</code></p><h2 id="语法糖">语法糖</h2><p><code>return 0&amp;printf(&quot;%d&quot;,dp);</code> 少写一句大括号.<br><code>!x</code> = <code>x!=0</code> , <code>~x</code> = <code>x!=-1</code> , <code>if(-1)</code> 这句话是真.</p><h2 id="数组初始化">数组初始化</h2><p><code>int a[114]&#123;&#125;</code> 这个大括号的作用就是初始化为0</p><h2 id="循环枚举元素…">循环枚举元素…</h2><p>牢记,循环的目的就是为了枚举,所以下次再碰到你只有一次机会能干嘛的时候有机会就考虑循环枚举元素.</p><p>典例: 你有一个数列,你必须删掉一个元素,如果存在数列相邻两个数gcd不降的情况,输出yes.(枚举删掉哪个元素,算出前缀后缀单调不单调)<br>数据结构第二次第三题:你有一次坐地铁的机会,求s到t最短路.(枚举坐的地铁是哪个)</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ad_Hoc</title>
      <link href="/2024/08/03/10021Ad-Hoc/"/>
      <url>/2024/08/03/10021Ad-Hoc/</url>
      
        <content type="html"><![CDATA[<p>这是迟早要开的<code>Ad_Hoc</code>专题,巧妙(<s>乱搞</s>)解法的题目会被收录在这里.</p><h2 id="P10033">P10033</h2><p>给一个排列,构造一个每个元素属于[1,n]的数列使不存在 $l\le r$ 满足 $\sum_{i=l}^rp_i=\sum_{i=l}^ra_i$ 给定排列小于1e6.</p><p>这个题考验分情况构造的能力.考虑推式子, $=\sum_{i=1}^r(p_i-a_i)$ 前缀和不能重(以及为0),意味着我们要让a尽可能小满足前缀和递增,于是所有位置全是1.</p><p>考虑特殊情况计算(开始分情况了),1会分配给2,但是入果左右有2那就分配3,同时如果左右有3,那么考虑分配4,同时均衡一下3,因为1+4+1=3+1+2,于是3那个位置变成2.此题解决,复杂度O(n),检查的复杂度是O(nlogn).</p><h2 id="CF1722G">CF1722G</h2><p>构造一个数列满足奇数项抑或和等于偶数项抑或和.(构造的数字必须在 $0-2^{31}$ 以内)</p><p>乍一看挺吓人?其实,因为值域很宽,各种各样的方法都可以通过.<br>法1:随机数,最后特判一下,如果重了就上一项抑或上某个数直到不重.<br>法2:直接排列,在1-n-3位上直接摆1-n-3,然后摆俩大数,n位上摆奇数项抑或偶数项保证相同.</p><h2 id="CF1930B">CF1930B</h2><p>构造一个序列满足不存在 $a_j|a_i,a_{j+1}|a_{i+1}$ ,样例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>因为倍数首先要满足 $a_i&gt;a_j$ ,然后这么构造也就需要满足所有偶数位大于奇数位,同时奇数位递增,偶数位递减即可.</p><h2 id="P10635">P10635</h2><p>给一个01矩阵,一次反转会翻转所有该硬币行和列的所有状态,求最少需要几次反转(方阵).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0101</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line"><span class="number">0010</span></span><br><span class="line"><span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们不需要反转成全0或者全1,所以二者之间取最小值就行了.</p><p>发现,将单个元素反转的方法是,该行和该列上的全部元素全部反转一下就可以了.也就是说,给定矩阵必定有解.我们统计每行每列1的个数,然后遍历每个元素,看 <code>(s[i][j]-'0'+co[i]+ro[j])&amp;1</code> ,因为如果元素是1,我们要反转,所以要考虑原始矩阵对答案的贡献,不应该直接统计行列1的个数的那个.</p><h2 id="CF476D">CF476D</h2><p>给一个n和k,构造n个四元组满足:<br>四元组内任意两个元素的gcd是k.<br>所有四元组的元素不重.</p><p>显然,k是没用的,直接乘上就完了.</p><p>先引一个结论: <strong>任意三个连续奇数互质,任意奇数和偶数互质</strong> .<br>这意味着什么?我们的四元组完全可以通过三个连续奇数一个偶数的方式进行枚举,很快完成.</p><h2 id="P9667">P9667</h2><p>给n个元素( $n\le500$ )和m,首先你可以选择任意m个元素直接删掉,在剩下的元素中,对某个元素可以进行以下三选一的操作:1.元素值+1,2.元素值-1,3.元素值&gt;&gt;1,问最后剩下的元素拥有相同非零值的最小操作次数是多少.(时限 $6s,a\le10^9$ )</p><p>注意到这个题诡异的数据范围还有很高的时长,可能要暴力枚举某个东西.猜结论:答案一定是某个数字除以2得到的结果,然后暴力检查更新答案.总复杂度 $O(n^2\log^2n)$ .这种题只能多做.</p><h2 id="CF2031D">CF2031D</h2><p>给一个数列,每个点有一只兔子,向左走只能走到更高的,向右走只能走到更低的,求最高可到达的点(所有).</p><p>(题解):首先,最右边的一定能到达最高点.然后考虑转移:<br>设mxxi表示第i个点的向左最高值,mnni是向右的最低值.如果元素i和i+1的关系是 $mxx_i&gt;mnn_i$ 说明i可以到达i+1,于是答案这俩相同.但是如果不能到达,那就是只能向左走了,就是mxx_i.</p><h2 id="GYM105588G">GYM105588G</h2><p>给两个数 $a,b$ ,每次能选一个数减掉 $\gcd(a,b)$ ,问最少几次能让两个数都减成0. <strong>数据:</strong> $a\le5000,b\le10^{18}$</p><p>这个题奇怪的数据范围…<br>首先,一个数是0,另一个数一次就减成0.假如两个数字gcd是1,减掉之后,都会变成偶数,gcd就会变成2,依次类推.所以,a最多需要25次就能成0.所以答案最多就是26,暴搜即可,所以就看敢不敢搜了.<br><s>出题人说实际上跑到26的数据非常少,出题人只构造出来了16的数据.</s></p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markov_Algorithm_Online_攻略</title>
      <link href="/2024/07/31/30000Markov-Algorithm-Online-%E6%B8%B8%E6%88%8F%E6%94%BB%E7%95%A5/"/>
      <url>/2024/07/31/30000Markov-Algorithm-Online-%E6%B8%B8%E6%88%8F%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>笔者接触了一种<a href="https://mao.snuke.org/">全新游戏</a>(加班.jpg),网上查了一圈发现没有做这个游戏攻略的,Flu只好以身作则,开一期专题聊这个.</p><h1>规则</h1><p>这是一种简单的语言,只有两个语句:<br><code>a:b</code>:把字符串<code>a</code>替换成<code>b</code>.<br><code>a::b</code>:把字符串<code>a</code>替换成<code>b</code>,程序结束.</p><p>(模式/替换的前导/尾随空格会被直接忽略)</p><p><strong>执行顺序</strong>:每次都是先执行前面的语句,如果第一句找到了就执行第一句,然后从头开始接着执行(中间执行了<code>::</code>会直接结束的).</p><h1>题解区</h1><p>好了,你已经学会了所有语法,去写一个程序吧(^_^)~</p><h2 id="0001">0001</h2><p>直接替换.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello,:World!</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">Hello,::World!</span><br></pre></td></tr></table></figure><h2 id="0002">0002</h2><p>删除所有的<code>s</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:</span><br></pre></td></tr></table></figure><h2 id="0003">0003</h2><p>把<code>s</code>加在头上(注意只能执行一次防止死循环)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::s</span><br></pre></td></tr></table></figure><h2 id="0004">0004</h2><p>剪刀石头布,对每种情况进行替换,注意每种只能执行一次.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R::P</span><br><span class="line">P::S</span><br><span class="line">S::R</span><br></pre></td></tr></table></figure><h2 id="0005">0005</h2><p>给一堆只有<code>i</code>的串,在每个之间插一个<code>w</code>.<br>也就是把所有<code>ii</code>换成<code>iwi</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ii:iwi</span><br></pre></td></tr></table></figure><h2 id="0006">0006</h2><p>对ABC进行排序,枚举三种将要进行的排序准则分别替换即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BA:AB</span><br><span class="line">CB:BC</span><br><span class="line">BA:AC</span><br></pre></td></tr></table></figure><h2 id="0007">0007</h2><p>给一段<code>o</code>判断有奇数个还是偶数个.<br>发现两个<code>o</code>没有贡献,直接消掉,最后判断即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oo:</span><br><span class="line">o::odd</span><br><span class="line">::even</span><br></pre></td></tr></table></figure><p>(注意先判有的odd,因为even是兜底的)</p><h2 id="0008">0008</h2><p>(感觉开始上强度了)给一段只有<code>b</code>的串,加一个<code>s</code>在末尾.<br>首先,是个人都应该清楚,因为字符串检测是从头开始的,我们要在<code>bb</code>这样的里面加东西.</p><p>加啥?Flu设想的是先把<code>bb</code>变成<code>bsb</code>,然后掉转顺序变成<code>bbs</code>,最后删掉所有的<code>bsb</code>.写出来长这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bb:bsb</span><br><span class="line">sb:bs</span><br><span class="line">bsb:bb</span><br></pre></td></tr></table></figure><p>跑起来死循环啊…考虑优化:<strong>顺序优化</strong>.每次查子串是从第一句开始查,也就是说符合条件的语句编号越小越优先执行,调整一下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sb:bs</span><br><span class="line">bb:bsb</span><br><span class="line">bsb:bb</span><br></pre></td></tr></table></figure><p>这个时候我们发现,他变成了一直往尾部加<code>s</code>,一个,两个…<br>到这应该明白了吧,我们让<code>b</code>变成<code>bs</code>,然后把<code>sb:bs</code>的交换优先级调整的比添加高,就可以顺到最后了,然后<code>ss::s</code>结束,完美.(<code>bb:bsb</code>会WA,只有一个<code>b</code>的情况)AC代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ss::s</span><br><span class="line">sb:bs</span><br><span class="line">b:bs</span><br></pre></td></tr></table></figure><h2 id="0009">0009</h2><p>给一个二进制串,按位反转.<br>首先想到,交换嘛,肯定有个tmp的防止反转再反转,于是<code>0</code>先换成<code>2</code>,再换成<code>1</code>,<code>1</code>也一样,调一下优先级.</p><p>发现,死循环了.我们注意到,即使是结果也是可以当输入的,我们要手动结束程序,于是考虑扫描,从左插一个<code>a</code>,每次枚举<code>a</code>左边的进行反转,<code>a</code>到头结束.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a0:<span class="number">1</span>a</span><br><span class="line">a1:<span class="number">0</span>a</span><br><span class="line">a::</span><br><span class="line">:a</span><br></pre></td></tr></table></figure><h2 id="0010">0010</h2><p>写一个加法器.<br>首先我们需要插一个东西在末尾.我们如何判定他插到末尾了?<br><strong>答:</strong> 插两个的时候.<br>然后程序向前遍历就很好写了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>ss::<span class="number">1</span></span><br><span class="line"><span class="number">1</span>ss:ss0</span><br><span class="line">ss::<span class="number">1</span></span><br><span class="line">s0:<span class="number">0</span>s</span><br><span class="line">s1:<span class="number">1</span>s</span><br><span class="line">:s</span><br></pre></td></tr></table></figure><h2 id="0011">0011</h2><p>计数.<br>首先,每一个o都是看成1,进位的时候直接放到左边即可.<br>数之间不允许直接加,否则会乱位,于是调整一下<code>o</code>变成<code>1</code>的优先级即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>o:<span class="number">1</span></span><br><span class="line"><span class="number">1</span>o:<span class="number">2</span></span><br><span class="line"><span class="number">2</span>o:<span class="number">3</span></span><br><span class="line"><span class="number">3</span>o:<span class="number">4</span></span><br><span class="line"><span class="number">4</span>o:<span class="number">5</span></span><br><span class="line"><span class="number">5</span>o:<span class="number">6</span></span><br><span class="line"><span class="number">6</span>o:<span class="number">7</span></span><br><span class="line"><span class="number">7</span>o:<span class="number">8</span></span><br><span class="line"><span class="number">8</span>o:<span class="number">9</span></span><br><span class="line"><span class="number">9</span>o:o0</span><br><span class="line">o:<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="0012">0012</h2><p>会11的话12就很简单了.反向搞就行,注意0作为进位标志最后再摘.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:<span class="number">0</span>o</span><br><span class="line"><span class="number">2</span>:<span class="number">0</span>oo</span><br><span class="line"><span class="number">3</span>:<span class="number">0</span>ooo</span><br><span class="line"><span class="number">4</span>:<span class="number">0</span>oooo</span><br><span class="line"><span class="number">5</span>:<span class="number">0</span>ooooo</span><br><span class="line"><span class="number">6</span>:<span class="number">0</span>oooooo</span><br><span class="line"><span class="number">7</span>:<span class="number">0</span>ooooooo</span><br><span class="line"><span class="number">8</span>:<span class="number">0</span>oooooooo</span><br><span class="line"><span class="number">9</span>:<span class="number">0</span>ooooooooo</span><br><span class="line">o0:<span class="number">0</span>oooooooooo</span><br><span class="line"><span class="number">0</span>:</span><br></pre></td></tr></table></figure><h2 id="0013">0013</h2><h2 id="0014">0014</h2><h2 id="0015">0015</h2><h2 id="0016">0016</h2><p>显然,比5长的直接迭代缩减即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oooooo:ooooo</span><br></pre></td></tr></table></figure><h2 id="0017">0017</h2><p>显然,比5短的直接迭代增加即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ooooo::ooooo</span><br><span class="line">:o</span><br></pre></td></tr></table></figure><h2 id="0018">0018</h2><p>(最后还是看题解改成6行的屑)判断<code>ox</code>序列哪个多,输出<code>win,lose,draw</code>.<br>难点在于6行内完成.题解借用很长一段<code>x</code>保证<code>xo</code>一定能消掉<code>o</code>,从而完成消掉另一方,然后再归还<code>x</code>,多就是输,默认赢,不变就是平手.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xo:</span><br><span class="line">win+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:lose+</span><br><span class="line">win+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:draw+</span><br><span class="line">+x:+</span><br><span class="line">+::</span><br><span class="line">:win+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="0019">0019</h2><p>发现排好序一定是<code>12345</code>,考虑如何把12345搞掉:好像没啥别的办法.不讲武德.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:</span><br><span class="line"><span class="number">2</span>:</span><br><span class="line"><span class="number">3</span>:</span><br><span class="line"><span class="number">4</span>:</span><br><span class="line"><span class="number">5</span>::<span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="0020">0020</h2><p>给一个数字串,在每两个数字间加点.<br>显然,直接扫描即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a0:<span class="number">0.</span>a</span><br><span class="line">a1:<span class="number">1.</span>a</span><br><span class="line">a2:<span class="number">2.</span>a</span><br><span class="line">a3:<span class="number">3.</span>a</span><br><span class="line">a4:<span class="number">4.</span>a</span><br><span class="line">a5:<span class="number">5.</span>a</span><br><span class="line">a6:<span class="number">6.</span>a</span><br><span class="line">a7:<span class="number">7.</span>a</span><br><span class="line">a8:<span class="number">8.</span>a</span><br><span class="line">a9:<span class="number">9.</span>a</span><br><span class="line">.a::</span><br><span class="line">:a</span><br></pre></td></tr></table></figure><h2 id="0023">0023</h2><p>给一个数列(只有<code>012</code>),求他们的和模3.<br>显然暴力是会超行的,我们考虑替换,把0替换成111,2换成11就可以很简单的消除了.但是注意一个小坑是<code>111:</code>错<code>1111:1</code>对,因为假如最后没数字了就寄了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">111</span></span><br><span class="line"><span class="number">2</span>:<span class="number">11</span></span><br><span class="line"><span class="number">1111</span>:<span class="number">1</span></span><br><span class="line"><span class="number">111</span>::<span class="number">0</span></span><br><span class="line"><span class="number">11</span>::<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="0032">0032</h2><p>发现值域很窄,直接枚举.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xo:x</span><br><span class="line">oooooooooooooooooooooooooooooooo:<span class="number">5</span>x</span><br><span class="line">oooooooooooooooo:<span class="number">4</span>x</span><br><span class="line">oooooooo:<span class="number">3</span>x</span><br><span class="line">oooo:<span class="number">2</span>x</span><br><span class="line">oo:<span class="number">1</span>x</span><br><span class="line">o:<span class="number">0</span>x</span><br><span class="line">x::</span><br></pre></td></tr></table></figure><h2 id="0035">0035</h2><p>把第三个字符替换成<code>x</code>,送分.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ooo::oox</span><br></pre></td></tr></table></figure><h2 id="0036">0036</h2><p>把倒数第三个字符替换成<code>x</code>,插一个a,扫到末尾,结束,还是送分.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ao:oa</span><br><span class="line">oooa::xoo</span><br><span class="line">:a</span><br></pre></td></tr></table></figure><h2 id="0037">0037</h2><p>直接替换,注意第一个问号的优先级是最低的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m?:ma</span><br><span class="line">a?:ar</span><br><span class="line">r?:rk</span><br><span class="line">k?:ko</span><br><span class="line">o?:ov</span><br><span class="line">?:m</span><br></pre></td></tr></table></figure><h2 id="0038">0038</h2><p>发现转移的时候多余的o会没,但是最终状态的o也会跟着没,考虑扫描.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xbob:oxb</span><br><span class="line">xb:x</span><br><span class="line">xo:x</span><br><span class="line">x::</span><br><span class="line">:x</span><br></pre></td></tr></table></figure><h2 id="0045">0045</h2><p>直接删掉<code>-</code>即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-:</span><br></pre></td></tr></table></figure><h2 id="0048">0048</h2><p>找最大公因数即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ooo:oof</span><br><span class="line">oofoofoofoofoof:oofobfoofbofooz</span><br><span class="line">oofoofoofo:oofobfoofb</span><br><span class="line">oofoo:oofob</span><br></pre></td></tr></table></figure><h2 id="0049">0049</h2><p>直接替换.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bb:ba</span><br></pre></td></tr></table></figure><h2 id="0050">0050</h2><p>替换小心头部重复替换.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aa:ba</span><br><span class="line">bbb:bab</span><br></pre></td></tr></table></figure><h2 id="0051">0051</h2><p>扫描一遍即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zab:baz</span><br><span class="line">z::</span><br><span class="line">:z</span><br></pre></td></tr></table></figure><h2 id="0052">0052</h2><p>来一个被减数,左右对消即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ozo:z</span><br><span class="line">z::</span><br><span class="line">:ooooooooooz</span><br></pre></td></tr></table></figure><h2 id="0053">0053</h2><p>这里开始是几道闪电题,意思是尽快做出来而不是压行做出来,题目也非常傻逼(难).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xoo:ox</span><br><span class="line">x::</span><br><span class="line">:x</span><br></pre></td></tr></table></figure><h2 id="0054">0054</h2><h2 id="0061">0061</h2><p>冒号不能动,右边减一个左边加一个即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(:</span><br><span class="line">::(</span><br></pre></td></tr></table></figure><h2 id="0062">0062</h2><p>考虑整体转变,<code>00</code>先变成<code>01</code>再一个变成<code>00</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">01</span></span><br><span class="line"><span class="number">01</span>::<span class="number">00</span></span><br></pre></td></tr></table></figure><h2 id="0063">0063</h2><p>打印空格.由于前导/尾随空格都会没,我们要构造两面包夹的形态.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114514</span>:</span><br><span class="line"><span class="number">1919810</span>::</span><br><span class="line">:<span class="number">114514</span> <span class="number">1919810</span></span><br></pre></td></tr></table></figure><h2 id="0064">0064</h2><p>我们要去掉中间的空格,显然扫描线做.<br>注意到我们开头要插入一个没空格的,这里是没法转移的.我们考虑插一个形如<code>x y</code>的结构,然后再把y去掉,就可以成功转移了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x a:ax</span><br><span class="line">x b:bx</span><br><span class="line">x c:cx</span><br><span class="line">y:</span><br><span class="line">x::</span><br><span class="line">:x y</span><br></pre></td></tr></table></figure><h2 id="0069">0069</h2><p>注意到数据是4个<code>t</code>起手,考虑做一个头然后沿伸.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testtt:testtest</span><br><span class="line">tttt:testtest</span><br></pre></td></tr></table></figure><h2 id="0078">0078</h2><p>直接查找.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwi::[iwi]</span><br></pre></td></tr></table></figure><h2 id="0079">0079</h2><p>发现最优解只有四行,而且由于结果可以作为输入,只好使用扫描线.但是扫描头添加(2),转移(2),检测(1),超了,要魔改.</p><p>咋改呢?有个好方法:鉴于只有<code>iw</code>,我们可以构造:很多<code>iiiiii</code>,然后不用转移<code>ii</code>,转移<code>iw</code>,就结束了.正好四行.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iiiiiiiiiiiiiiiiiiiiiiwi:[iwi]iiiiiiiiiiiiiiiiiiiii</span><br><span class="line">iiiiiiiiiiiiiiiiiiiiiw:wiiiiiiiiiiiiiiiiiiiii</span><br><span class="line">iiiiiiiiiiiiiiiiiiiii::</span><br><span class="line">:iiiiiiiiiiiiiiiiiiiii</span><br></pre></td></tr></table></figure><h2 id="0080">0080</h2><p>发现拆括号的过程就是放到外面然后乘二即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o]:]oo</span><br><span class="line">[]:</span><br></pre></td></tr></table></figure><h2 id="0085">0085</h2><p>我们考虑同质化,把他们变成0+啥,然后由于最后一个数字也肯定是<code>0+</code>,所以考虑<code>+0:0</code>,然后最后转化回去就可以了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>:<span class="number">0</span>++</span><br><span class="line"><span class="number">1</span>:<span class="number">0</span>+</span><br><span class="line">+<span class="number">0</span>:<span class="number">0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0</span></span><br><span class="line"><span class="number">0</span>++::<span class="number">2</span></span><br><span class="line"><span class="number">0</span>+::<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语法</title>
      <link href="/2024/07/30/10029C-%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/07/30/10029C-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这里包含部分C++的语法以及调试技巧啥的,比较杂.</p><h1>基础库</h1><h2 id="杂项">杂项</h2><p>多表达式叠写返回值是后面那个.例如<code>a=b,1</code>返回后面那个<code>1</code>不是前面那个<code>a</code>.</p><p><code>unordered_map</code>不可以开出来自定义类型的图,因为没法算哈希,<code>map</code>可以.</p><h3 id="栈区">栈区</h3><p>首先认识一下汉字对应的编码:</p><table><thead><tr><th style="text-align:left">字</th><th style="text-align:left">码</th><th style="text-align:left">是啥</th></tr></thead><tbody><tr><td style="text-align:left">烫</td><td style="text-align:left"><code>0xCC</code></td><td style="text-align:left">栈上申请未初始化的缺省值</td></tr><tr><td style="text-align:left">屯</td><td style="text-align:left"><code>0xCD</code></td><td style="text-align:left">堆上申请未初始化的缺省值</td></tr><tr><td style="text-align:left">葺</td><td style="text-align:left"><code>0xDD</code></td><td style="text-align:left">堆上申请所在空间释放后的缺省值</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left"><code>0xFD</code></td><td style="text-align:left">已申请的堆区空间上设定的上下边界值</td></tr></tbody></table><p><code>x86</code> 系统默认栈区是 <code>0xCC</code> 对应的指令是 <code>int 3</code> 所以为了防止更大的错误,直接用中断指令防止访问非法内存.</p><h2 id="卡常">卡常</h2><p>万恶的卡常教程…虽然现代竞赛一般不太卡常…</p><ol><li>使用引用 <code>int &amp;x=dat[aa]</code> 然后取址会快不少.</li><li>二维数组使用指针代替直接计算地址,如在矩阵中找一个最大值可以用 <code>int *p=dat,for()*++p;</code> .</li><li>典中典之快读快写.</li></ol><h2 id="csv表格形式">.csv表格形式</h2><p>该格式导出的文件可以直接被$Excel$读取,并且进行分析,输出格式极其简单.如下就是一段输出文件和他们被读取显示的样子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114</span>,<span class="number">514</span>,<span class="number">1919</span>,<span class="number">810</span>\n</span><br><span class="line">,<span class="number">9.80</span>,你好\n</span><br><span class="line">`````</span><br><span class="line">被读取长这样:</span><br><span class="line">$$\boxed&#123;\def\arraystretch&#123;<span class="number">1.5</span>&#125;</span><br><span class="line">   \begin&#123;array&#125;&#123;c:c:c:c&#125;</span><br><span class="line">   <span class="number">114</span>&amp;<span class="number">514</span>&amp;<span class="number">1919</span>&amp;<span class="number">810</span>\\\hline</span><br><span class="line">   &amp;<span class="number">9.8</span>&amp;你好\\</span><br><span class="line">\end&#123;array&#125;&#125;$$</span><br><span class="line">下面介绍格式(啊对,就这么简单):  </span><br><span class="line">逗号分格子,就是顺延到下一个格子.  </span><br><span class="line">换行分行,就是那个$/n$.</span><br><span class="line"></span><br><span class="line">**小点:**$Excel$不会显示好多<span class="number">0</span>的小数点,这是正常现象.  </span><br><span class="line">希望起个名字就用字符串当名字就好,但是记住算好字符串末尾是$/<span class="number">0</span>$.</span><br><span class="line"></span><br><span class="line">#<span class="meta"># namespace</span></span><br><span class="line">名字空间就是防止名字重复特地设置的命名机制,形象理解就是套层壳,使用必须先叫名字空间::成员函数.对于不重的情况确实没啥用.  </span><br><span class="line">然后`<span class="keyword">using</span> <span class="keyword">namespace</span> xx`就是把封装好的函数直接用就行了(去壳).比如</span><br><span class="line">```cpp</span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; num)</span></span>&#123;xxx&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用:IO::read(xxx);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;<span class="comment">//去掉壳子</span></span><br><span class="line"><span class="comment">//调用:read(xxx);</span></span><br></pre></td></tr></table></figure><h2 id="typedef">typedef</h2><p>直观的就是给一个变量取一个小名,大名小名都能用.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> i32;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">float</span><span class="params">(*Func)</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aaa</span><span class="params">(Func f1,Func f2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aaa</span><span class="params">(<span class="type">float</span> f1(<span class="type">int</span> arr[],<span class="type">int</span> num),<span class="type">float</span> f2(<span class="type">int</span> arr[],<span class="type">int</span> num))</span></span>;</span><br></pre></td></tr></table></figure><p>可以直接置换函数,体会一下.</p><h2 id="math-h">math.h</h2><p><strong>cbrt</strong>:算立方根的函数.<br><strong>log</strong>:其实是求ln.<br><strong>log10</strong>:其实是求lg.<br><strong>ceil</strong>:向上取整.<br><strong>floor</strong>:向下取整.</p><h2 id="windows-h">windows.h</h2><p>系统相关的库文件,盲目交到OJ上会吃CE(一般OJ都是Linux).但是制作课设会用到(交互嘛).<br><strong>Sleep</strong>:睡觉函数,单位毫秒.<br><strong>system(“”)</strong>:著名的弹计算器函数.(真的能给我电脑直接干关机了,他能干啥不可想象,写病毒轻轻松松)</p><h2 id="IO">IO</h2><p>有的时候数据点多少个不告诉你,就需要用这个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="printf">printf()</h2><p>里面打头的是一个 <code>const char*</code> 作为模板,然后后面是参数匹配.</p><h1>STL</h1><p>这里讲一些常用函数,免得忘了.</p><h2 id="unordered-map">unordered_map</h2><p>因为人家是哈希表,有的东西开不了,能不能开和前一个键有关.前面一个键只能是常见类型,<code>char</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>long long</code>都是能开的,但是所有自定义类型都不可以,包括<code>pair</code>.</p><h2 id="bitset">bitset</h2><p>做传递闭包的时候有用.</p><h2 id="multisetUUU">multisetUUU</h2><h2 id="multimapUUU">multimapUUU</h2><h2 id="stringUUU">stringUUU</h2><p>Flu不太会用.</p><h1>OTH</h1><h2 id="正则表达式">正则表达式</h2><p>目前没机会接触到.</p><h2 id="lambda表达式">lambda表达式</h2><p>这玩意不是必须学的,能用它实现的功能用普通C++也可以实现,在这里偷个懒略了.</p><h2 id="对拍">对拍</h2><p>先写一个数据生成器再说…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;data.exe &gt; sstd.in&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;sstd.exe &lt; sstd.in &gt; sstd.out&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;your.exe &lt; sstd.in &gt; your.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">system</span>(<span class="string">&quot;rc sstd.txt your.txt&quot;</span>))<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sstd可以是暴力,data是生成器.</p><h2 id="几个宏定义">几个宏定义</h2><p><code>__DATE__</code> :一个 <code>aa:bb:cc</code> 形式的字符串常量.<br><code>__FILE__</code> :当前文件名字,字符串常量.<br><code>__func__</code> or <code>__FUNCTION__</code> :当前函数名称<br><code>__LINE__</code> :当前是代码的第几行<br><code>#line 行号 &quot;文件名&quot;</code> :文件名可有可无,行号必须有,替换下一行行号为这个数字,同时文件名从这一行开始更改(其实事实上不会生成新的文件)</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP</title>
      <link href="/2024/07/29/10019DP/"/>
      <url>/2024/07/29/10019DP/</url>
      
        <content type="html"><![CDATA[<h2 id="普通DP">普通DP</h2><ol><li>你每个月可以花bi元买hi的幸福值,你每个月末都会收到x元固定工资,求这么多月下来你的最大幸福值是多少.($m\le50,b_i\le1e9,x\le1e9,h_i\le1e3$)</li></ol><p>首先发现这是一个dp,设dp[i][j]表示第i月剩下钱数为j的时候能有的最大幸福值(传统背包),发现会被卡,于是考虑枚举别的维度,发现幸福值非常小,于是枚举幸福值,设dp[i][j]表示第i月幸福值为j的时候的最大剩余钱数,同时省略月数维度,考虑转移:(正数转移)<br>$$dp[j]=\max(dp[j],dp[j-h_i]-b_i)$$<br>然后发工资就是全部都加上x.</p><ol start="2"><li>CF2028D 有三个人,每个人有一个n的排列表示对于牌的珍惜程度,数字越大越珍惜,就越想得到.你希望从1换到n,中间换到的牌单调递增,问有没有可能的路径?如果有输出一种.举例: <code>3 4 1 2</code> 说明一个人能用1去换3和4,用2去换3和4.</li></ol><p>考虑dp,mins[3]表示三个人的从x能换到n的最小 <strong>下标</strong> ,chan[200010]表示能从这个点换到什么,倒着转移,如果一个人比mins[]要大,证明能换,此时考虑缩小另外两个(让他们尽可能小去换到更多的牌),chan在这里标记上,同时另外两个取最小值.</p><h2 id="期望DP">期望DP</h2><p>期望dp的状态一般设定为 <strong>dp[i]:已经取到i个,取完剩下的期望xx</strong> ,转移方程一般写作 <strong>“概率转移+代价”</strong> 的形式.然后列转移方程,比个例子:有n种邮,第k次买邮票的价格是k元,每次买邮票等概率随机一种,问一个人想买到这总共n种邮票期望花多少钱.</p><p>我们发现第k次取和价钱挂钩,于是要设两个式子: $f(x)$ 表示已经取到了x,取完总共n种的期望 <strong>次数</strong>, $g(x)$ 表示已经取到了x,期望取完的 <strong>价钱</strong> .于是有<br>$$f(x)=\frac xnf(x)+\frac{n-x}nf(x+1)+1$$<br>$$g(x)=\frac xn(g(x)+f(x)+1)+\frac{n-x}n(g(x+1)+f(x+1)+1)$$<br>关于g的表达式:有x/n的概率不动,也就是期望不变,后面的f(x)是期望的代价是次数,+1表示每次都要比之前贵一块,体现在这里.</p><p>一个怪有n滴血,一次攻击有 $p$ 的概率掉两滴血, $1-p$ 的概率掉一滴血,求怪物死亡(血量小于等于0)的期望攻击次数.这个的dp是 <strong>怪物剩x滴血时的期望攻击次数</strong> ,方程为<br>$$dp_i=\begin{cases}0&amp;i\ge n\dp_{i+1}p+dp_{i+2}(1-p)+1&amp;i&lt;n\end{cases}$$<br>这个1就是攻击代价.</p><h2 id="压缩大小-不是滚动数组">压缩大小(不是滚动数组)</h2><p>青蛙过河p1052,青蛙一次能跳[s,t]的距离,距离上有一些石块(小于100个),青蛙想知道跳过桥的长度l需要最少踩多少个石块,桥长1e9,一步最长10,起点在0.</p><p>显然的dp,但是桥的长度有点太长了,考虑优化.</p><p>首先特判一下s==t的情况,这个时候状态固定没啥好说的.<br><strong>72缩</strong>: 根据相邻两个数必互质的原则,后面的每一个点都是可以从一个点出发到达的,最大不可达点是能算出来的,于是根据这个进行缩点,1-10的最大不可表示点是71(10*9-9-10),所以如果有点之间的距离大于这个数就缩成这个数.</p><p><strong>2520缩</strong> : $\mathrm{lcm}(1,2,…,10)=2520$ ,意味着无论步长多少,一定可以到达2520这个点,所以按照2520分块,如果前方2520个点没有石头就直接忽略,有再dp.</p><h2 id="整数划分">整数划分</h2><p>常见以下几种题型:</p><ol><li>给一个数,划分成一些数(给n个硬币分成若干堆)问有多少种情况.(以及略微加强版,划分的最大数不超过m)</li></ol><p>设 $p(n,m)$ 表示能划分的种类数,先考虑nm的关系:假如 $m\ge n$ ,那么就是p(n,n),由于包含最大划分数的只有一种,剩下的都不包含n.</p><p>然后是小于n的情况.存在最大划分数的时候有p(n-m,m)的情况,如果不存在,那么m就没有意义了,可以把范围放小,所以这个时候的情况就是p(n,m-1),总的式子就是下面的:<br>$$p(n,m)=\begin{cases}1+p(n,n-1)&amp;n\le m\p(n-m,m)+p(n,m-1)&amp;n&gt;m\end{cases}$$<br>由于分堆不限最大数,直接带入n即可.</p><ol start="2"><li>将n划分成k个数的划分法</li></ol><p>有两类:第一类是均分,所有都得到1,就是前面的式子.<br>第二类是拆一个1出去,得到后半部分.于是所有情况在dp之中被算出来了.<br>$$dp[n][k]=dp[n-k][k]+dp[n-1][k-1]$$<br>3. 将n划分成多个不同的整数(m表示最大数)</p><p>分为两种情况:划分的每个数都小于m,就是前半部分,直接缩范围即可.<br>第二种情况是有一个数是m,则提出来,同时剩下的数都不能大于m,就是后半部分(发现和初始的情况很像,只是限制了以下最大值)<br>$$dp[n][m]=dp[n][m-1]+dp[n-m][m-1]$$</p><ol start="4"><li>将n划分成若干奇数的划分法</li></ol><p>设f(i,j)表示把数i分成j个偶数的情况,g(i,j)表示把数i分成j个奇数的情况.<br>$$f[i][j]=g[i-j][j]\g[i][j]=f[i-j][j]+g[i-1][j-1]$$<br>理解起来也简单,偶数就等于所有划分成奇数的都添一个1变成偶数,奇数有从偶数变成奇数和在数列末尾加一个1两种情况.</p><p><strong>拓展思考</strong>:为什么dp的时候都是只在末尾加上一个1,不是别的数?<br>因为整体垫高的缘故,往末尾加一个1可以保证不会大于之前的分拆,也就是说维护了数列单调性,进而保证情况不会重合.</p><h2 id="树形DP">树形DP</h2><ol><li>p3574 Far-Farmcraft 设 $f[x]$ 表示 $x$ 子树内的最大值, $sz[x]$ 表示走完x的子树后回到x花的时间.考虑一个点的分叉y和z:不交换,遍历顺序是<br>$f[x]=max(f[x],size[x]+max(f[y],f[z]+size[y]+2)+1)$<br>交换之后遍历先z后y,答案是<br>$f[x]=max(f[x],size[x]+max(f[z],f[y]+size[z]+2)+1)$<br>于是按照 $sz[x]-f[x]$ 排序,然后贪心即可.</li></ol><h2 id="矩阵优化">矩阵优化</h2><p>指通过广义矩阵乘法让dp的方式优化,支持数据结构维护的操作.</p><p>定义广义矩阵乘法的操作是:<br>$$C_{i,j}=\bigoplus_{k=1}^m(A_{ik}\otimes B_{kj})$$<br>(其实就是重载+和*俩运算符)满足以下条件时乘法有 <strong>结合律</strong>:</p><ol><li>$\oplus$ 有交换律</li><li>$\otimes$ 有结合律和交换律</li><li>$\times$ 对 $\oplus$ 有分配律,也就是满足 $(a\oplus b)\otimes c=(a\otimes c)\oplus(b\otimes c)$ .</li></ol><p>常见的广义矩阵重载是(原来是 $(\times,+)$ ) $(\pm,\min),(\pm,\max),(\land,\lor)$</p><p>如此,矩阵可以使用快速幂优化,同时可以使用数据结构提前维护区间矩阵乘积,便于快速计算.</p><h2 id="综合例题">综合例题</h2><ol><li><p>GSS3单点修改,维护区间的最大子段和.<br>我们设 $f_i$ 表示以i结尾的最大子段和, $g_i$ 表示区间上的最大子段和.转移方程:<br>$$f_i=\max(f_{i-1}+a_i,a_i),g_i=\max(g_{i-1},f_{i-1}+a_i,a_i)$$<br>构造矩阵:<br>$$\begin{bmatrix}f_{i-1}&amp;g_{i-1}&amp;0\end{bmatrix}\begin{bmatrix}a_i&amp;a_i&amp;-\infin\-\infin&amp;0&amp;-\infin\a_i&amp;a_i&amp;0\end{bmatrix}=\begin{bmatrix}f_i&amp;g_i&amp;0\end{bmatrix}$$<br>然后使用线段树提前维护区间矩阵乘积即可.</p></li><li><p>设排列中一个完美三元组(i,j,k)满足 $p_i&gt;p_j&lt;p_k$ ,求长度为n的排列有多少种恰好有m个完美三元组.($i\le100,j\le10000$)特别奇怪的数据范围</p></li></ol><p>因为排列里面插一个元素是不影响前面的,考虑DP.设dp[i][j]表示当前排列有i个元素时候有j个完美三元组的,发现,我们插一个1,由于1小于其他任何元素,新插1的贡献是能算出来的.于是直接背包,复杂度 $O(n^2m)$ .</p><ol start="3"><li>一对集合(看不懂题解)<br>定义 $f(S)=(a_1,a_2,…,a_n)^{\gcd(a_i,a_2,…,a_n)}$ 完美集合对p,q是元素不重,而且p的所有元素比q的所有元素小,求给定数列a的 $\sum_{p\subset a}\sum_{q\subset a}f(p)\times f(q)\mod998244353$ ,其中qp是完美集合对. $n\le100,0\le a_i\le100$</li></ol><p>这个题数据范围和元素范围都小的离谱,而且暴搜是过不去的,所以考虑dp(Flu发现好像所有数据范围非常奇怪的都是dp).<br>首先对a进行排序.<br>设 $f_{i,d,j}$ 表示前i个元素,最大公约数是d的所有集合的和的j次方之和.有(有个屁我啥也看不懂)<br>$$f_{i,d,j}=\sum_{p=0}^{j}\binom{j}{p}f_{i-1,x,p}a_{i}^{j-p}$$<br>其中x满足 $\gcd(x,a_i)=d$ .<br>设 $g_{i,d,j}$ 表示后i个元素,gcd是d的所有集合的j次方之和,一样的转移方程.</p><p>最后统计答案只需要枚举每一个必须选的元素,然后使用fg计算答案(说着简单).<br>由于Flu看不懂,于是把题解码放出来吧,没准之后学组合数学了就能看懂了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> datas[maxn];</span><br><span class="line"><span class="type">int</span> a[maxn][<span class="number">101</span>],n;</span><br><span class="line"><span class="type">int</span> f[maxn][<span class="number">101</span>][<span class="number">101</span>],C[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> g[maxn][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a; <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="type">int</span> res=<span class="number">1</span>; <span class="keyword">while</span>(b)&#123; <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123; res=<span class="number">1ll</span>*res*a%mod; &#125; a=<span class="number">1ll</span>*a*a%mod; b&gt;&gt;=<span class="number">1</span>; &#125; <span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;datas[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(datas+<span class="number">1</span>,datas+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">a[i][j]=<span class="number">1ll</span>*a[i][j<span class="number">-1</span>]*datas[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//a[i][j]表示元素a[i]的j次方</span></span><br><span class="line"></span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//处理组合数</span></span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;=<span class="number">100</span>;y++)&#123;</span><br><span class="line">f[i][x][y]=f[i<span class="number">-1</span>][x][y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">gcd</span>(x,a[i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;=j;p++)&#123;</span><br><span class="line">f[i][d][j]+=<span class="number">1ll</span>*C[j][p]*f[i<span class="number">-1</span>][x][p]%mod*a[i][j-p]%mod;</span><br><span class="line">f[i][d][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">g[n+<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;=<span class="number">100</span>;y++)&#123;</span><br><span class="line">g[i][x][y]=g[i+<span class="number">1</span>][x][y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">gcd</span>(x,a[i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;=j;p++)&#123;</span><br><span class="line">g[i][d][j]+=<span class="number">1ll</span>*C[j][p]*g[i+<span class="number">1</span>][x][p]%mod*a[i][j-p]%mod;</span><br><span class="line">g[i][d][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;<span class="comment">//必须选的那个数</span></span><br><span class="line"><span class="type">int</span> res1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;<span class="comment">//除掉这个元素之外元素的最大公约数</span></span><br><span class="line"><span class="type">int</span> d=<span class="built_in">gcd</span>(x,a[i][<span class="number">1</span>]);<span class="comment">//整个集合的最大公约数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;=d;p++)&#123;<span class="comment">//次方</span></span><br><span class="line">res1+=<span class="number">1ll</span>*C[d][p]*f[i<span class="number">-1</span>][x][p]%mod*a[i][d-p]%mod;</span><br><span class="line">res1%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">res2=(res2+g[i+<span class="number">1</span>][j][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line">ans=(ans+<span class="number">1ll</span>*res1*res2%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>有n个数,两个人每次随机从n个选一个,如果选过就要掏1块钱,n个都选过之后游戏结束,求两个人各自掏钱期望.</li></ol><p>用 $f1_i$ 表示抽到过的卡牌数变成 $i$ 的那刻,先手的罚款期望值.用 $f2_i$ 表示抽到过的卡牌数量变成 $i$ 的那刻,后手的罚款期望值.<br>转移方程:$f1_{i+1}=f1_i+A.$<br>$A$表示 数量变成i的那刻 到 数量变成i+1的那刻 这段时间里，先手的<br>罚款期望值。</p><h2 id="那怎么求-A-呢？">那怎么求 $A$ 呢？</h2><p>显然，$A$是一条级数式，而常数项相同的级数式较易求和。设$h1=$抽到过的卡牌数量变成$i$后轮到<br>先手的概率，$h2=$抽到过的卡牌数量变成$i$ 后轮到后手的概率，则有：<br>$A=(h1\times\frac{i}{n}+h1\times\frac{i}{n}\times\frac{i}{n}\times\frac{i}{n}+…)+(h2\times\frac{i}{n}\times\frac{i}{n}+h2\times\frac{i}{n}\times\frac{i}{n}\times\frac{i}{n}\times\frac{i}{n})$<br>$=h1\times\frac{i}{n}\times(1+(\frac{i}{n})^{2}+(\frac{i}{n})^{4}+…)+h2\times(\frac{i}{n})^{2}\times(1+(\frac{i}{n})^{2}+(\frac{i}{n})^{4}+…)$</p><p>设$p=\frac in$,则$1+(\frac in)^2+(\frac in)^4+…=\frac1{1-p^2}.$</p><p>$A= h1\times \frac p{1- p^2}+ h2\times \frac {p^2}{1- p^2}$ .</p><p>代入原式，$f1_i+1=f1_i+h1\times\frac p{1-p^2}+h2\times\frac{p^2}{1-p^2}.$</p><p>同理，$f2_{i+1}=f2_i+h2\times\frac p{1-p^2}+h1\times\frac{p^2}{1-p^2}.$</p><p>问题：怎么求 $h1,h2$ 呢？<br>简单，DP,启动！</p><h2 id="转移方程推导：">转移方程推导：</h2><p>用$h1_i$表示“抽到过的卡牌数虽变成$i$后轮到先手的概率”。用$h2_i$表示“抽到过的卡牌数量变成$i$后轮到后手的概率”。边界：$h1_1=0,h2_1=1$。<br>$$\begin{aligned}&amp;h1_{i+1}=(h1_{i}\times p\times(1-p)+h1_{i}\times p\times p\times p\times(1-p)+…)+(h2_{i}\times(1-p)+h2_{i}\times\&amp;p\times p\times(1-p)+…)\&amp;=h1\times p\times(1-p)\times\frac{1}{1:p^{2}}+h2\times(1-p)\times\frac{1}{1:p^{2}}\&amp;=\frac{1}{1+p}\times(h1\times p+h2),\&amp;\text{同理,}h2_{i+1}=\frac{1}{1+p}\times(h2\times p+h1),\end{aligned}$$<br>最终答案为$(f1_n,f2_n)$。</p><h2 id="另解">另解</h2><p>我们设f(x)表示作为先手，当前有x个物品已经被摸到的期望代价，同理设g(x)代表后手的相应情况.</p><p>对于每一次摸球，我们只有摸到新的和摸到旧的两种可能。<br>摸到新的，概率是 $\frac{n−x}n$ ,此时有<br>$$\begin{cases}f(x)=g(x+1),\g(x)=f(x+1)\end{cases}$$<br>摸到旧的，概率是 $\frac{x}{n}$ 此时<br>$$\begin{cases}f(x)=g(x)+1,\g(x)=f(x)\end{cases}$$<br>交换先后手操作为什么后手没有+1,是因为先手已经加过了,而后手是转移到先手上的.于是导一下式子即可.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法</title>
      <link href="/2024/07/28/10003Python%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/07/28/10003Python%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这里讲一些基础语法.(基本上,精通一种语言,别的语言都大差不差能看懂)</p><h2 id="初等函数">初等函数</h2><h3 id="print">print()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串&quot;</span>,算式,变量)</span><br></pre></td></tr></table></figure><p>参数:sep分隔符,默认空格,可以换成别的,end结尾符,默认换行,可以换别的.</p><h3 id="eval">eval()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">7</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;3*x&#x27;</span>)</span><br></pre></td></tr></table></figure><p>eval把字符串转换成算式并给出计算结果.</p><h3 id="str">str()</h3><p>把一个数字转成字符串</p><h3 id="len">len()</h3><p>求一个字符串的长度</p><h3 id="sort">sort()</h3><p>有两个排序: <code>a.sort()</code> 会对数列a进行排序<br><code>sorted(a)</code> 会对a进行排序,同时返回一个新的排好序的列表</p><h3 id="reversed">reversed()</h3><p>返回一个反转的列表,原列表不会改变.<code>b=list(reversed(a))</code></p><h3 id="namespace">namespace</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namespace=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;a+b&#x27;</span>,namespace)</span><br></pre></td></tr></table></figure><p>在指定名字空间内执行语句长这样.</p><h3 id="if-else-elif-while-for">if else elif while for</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> xxx:</span><br><span class="line">    xxx</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    xxx</span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    xxx</span><br><span class="line"><span class="keyword">while</span> xxx:</span><br><span class="line">    xxx</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xxx):</span><br><span class="line">    xxx</span><br></pre></td></tr></table></figure><h4 id="range">range</h4><p>range可以接受三个参数,分别是[l,r)和步长.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">12</span>,<span class="number">16</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 12 14</span></span><br></pre></td></tr></table></figure><h3 id="注释">注释</h3><p>注释长这样:(只有一种注释方法,就是这个,单行有效,按住Ctrl+/即可)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xxx</span></span><br></pre></td></tr></table></figure><h3 id="变量类型">变量类型</h3><p>Python内置高精(C艹党吐血倒地),变量类型可以转变,有以下几种:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> <span class="built_in">int</span> string Bool(<span class="literal">True</span> <span class="literal">False</span>) 字典 列表 元组</span><br></pre></td></tr></table></figure><p>其中元组就是const形态的列表,一般用于函数返回值.(TF这俩必须大写,不大写认不出来)</p><h3 id="变量声明">变量声明</h3><p>和C++不一样的是,py的变量自动识别类型,所以只需要一个名字声明.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[]=&#123;<span class="number">114</span>,<span class="number">514</span>,<span class="number">1919</span>&#125; <span class="comment"># 错</span></span><br><span class="line">a=[<span class="number">114</span>,<span class="number">514</span>,<span class="number">1919</span>]   <span class="comment"># 对</span></span><br></pre></td></tr></table></figure><h3 id="运算">运算</h3><p>按优先级排序:(上面的最高)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**幂</span><br><span class="line">~按位反</span><br><span class="line">* /除法 % //整除</span><br><span class="line">+ -</span><br><span class="line">&gt;&gt; &lt;&lt;</span><br><span class="line">&amp;</span><br><span class="line">^ |</span><br><span class="line">&lt;= &lt; &gt; &gt;=</span><br><span class="line">== !=</span><br><span class="line">= %= /= //= -= += *= **=</span><br><span class="line"><span class="keyword">is</span>  <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line"><span class="keyword">in</span>  <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">and</span>  <span class="keyword">or</span> <span class="keyword">not</span></span><br></pre></td></tr></table></figure><p>小技巧:按住Ctrl+C会立刻结束程序的,不妨试试(C++也一样)</p><h3 id="import">import</h3><p>导入包.为了避免变量名冲突,建议只用<code>import xxx</code>的格式,<code>from xxx import*</code>会闹麻的(变量名冲突)</p><h2 id="标准库-stl">标准库(stl???)</h2><h3 id="set">set()</h3><p><code>a=set()</code> 创建一个无序但是不重复的集合.</p><p><code>add()</code> 添加一个元素<br><code>update()</code> 添加多个元素<br><code>remove()</code> 删除元素,如果不存在会发生错误<br><code>discard()</code> 删除元素不会引发错误<br><code>clear()</code> 删除所有元素<br><code>|</code> 集合的并运算(好高级啊)<br><code>&amp;</code> 集合的交运算<br><code>-</code> 差集<br><code>^</code> 对称差集(只在一个集合中出现的元素)</p>]]></content>
      
      
      <categories>
          
          <category> MachineLearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公式杂项</title>
      <link href="/2024/07/25/10001%E5%85%AC%E5%BC%8F%E6%9D%82%E9%A1%B9/"/>
      <url>/2024/07/25/10001%E5%85%AC%E5%BC%8F%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>RT,这里放一些奇奇怪怪的公式.</p><h2 id="常见质数-常用质数">常见质数 常用质数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99844353</span></span><br><span class="line"><span class="number">1000000007</span> <span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line"><span class="number">100000000000000003</span> <span class="number">1e17</span>+<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="判定奇数-判定偶数">判定奇数 判定偶数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n&amp;<span class="number">1</span>   <span class="comment">//奇数</span></span><br><span class="line">n&amp;<span class="number">1</span>^<span class="number">1</span> <span class="comment">//偶数,再也不用 !(n&amp;1)</span></span><br></pre></td></tr></table></figure><h2 id="MEX">MEX</h2><p>定义是最小的没出现在数列中的非负整数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mex</span><span class="params">(<span class="type">int</span>* dat,<span class="type">int</span> n)</span></span>&#123;<span class="comment">//[1,n]</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">mp[dat[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i]!=<span class="number">1</span>)<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下是求第k大mex,也就是第k个没出现的非负整数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">mex</span><span class="params">(T* p,T n,T k)</span></span>&#123;<span class="comment">//[1,n]</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">mp[p[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res=n+k<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=res;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i]==<span class="number">0</span>)k--;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>)<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="卡特兰数">卡特兰数</h2><p>$$Catalan_n=\frac{(2n)!}{n!(n+1)!}$$<br>$$f[n]=f[0]*f[n−1]+f[1]*f[n−2]+…+f[n−1]*f<a href="n%5Cge2">0</a>$$<br>$$1,1,2,5,14,42,132,429$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">__int128 <span class="title">Catalan</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">__int128 f[n+<span class="number">1</span>]&#123;&#125;;</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">f[i]+=f[j]*f[i-j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="随机数生成">随机数生成</h2><p>使用<code>MT19937</code>作为随机数引擎.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">std::mt19937 <span class="title">r32</span><span class="params">(chrono::system_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">rand32</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> l,<span class="type">unsigned</span> <span class="type">int</span> r)</span></span>&#123;<span class="comment">//[l,r]</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">r32</span>()%(r-l+<span class="number">1</span>)+l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::mt19937_64 <span class="title">r64</span><span class="params">(chrono::system_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">rand64</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> l,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> r)</span></span>&#123;<span class="comment">//[l,r]</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">r64</span>()%(r-l+<span class="number">1</span>)+l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="斐波那契数列-广义斐波那契数列">斐波那契数列(广义斐波那契数列)</h2><p>$$a_n=pa_{n-1}+qa_{n-2}$$<br>可以转换成矩阵乘法的形式:<br>$$\begin{bmatrix}a_{n-1}&amp;a_{n-2}\end{bmatrix}\begin{bmatrix}p&amp;1\q&amp;0\end{bmatrix}=\begin{bmatrix}a_n&amp;a_{n-1}\end{bmatrix}$$<br>所以有(假设 $a_0$ 是1)<br>$$\begin{bmatrix}1&amp;1\end{bmatrix}\begin{bmatrix}1&amp;1\1&amp;0\end{bmatrix}^n=\begin{bmatrix}a_n&amp;a_{n-1}\end{bmatrix}$$<br>函数只填第几项就是传统斐波那契数列了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> num,<span class="type">long</span> <span class="type">long</span> a1=<span class="number">1</span>,<span class="type">long</span> <span class="type">long</span> a2=<span class="number">1</span>,<span class="type">int</span> p=<span class="number">1</span>,<span class="type">int</span> q=<span class="number">1</span>,<span class="type">long</span> <span class="type">long</span> mod=<span class="number">1000000007</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//第几项，第一项第二项，系数1和2，取模 </span></span><br><span class="line"><span class="comment">//an=p*an-1+qan-2</span></span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>)<span class="keyword">return</span> a1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br><span class="line">num-=<span class="number">3</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tmp[<span class="number">4</span>]=&#123;p,<span class="number">1</span>,q,<span class="number">0</span>&#125;,res[<span class="number">4</span>]=&#123;p,<span class="number">1</span>,q,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num&amp;<span class="number">1</span>)</span><br><span class="line"><span class="built_in">tie</span>(res[<span class="number">0</span>],res[<span class="number">1</span>],res[<span class="number">2</span>],res[<span class="number">3</span>])=<span class="built_in">make_tuple</span>((res[<span class="number">0</span>]*tmp[<span class="number">0</span>]+res[<span class="number">1</span>]*tmp[<span class="number">2</span>])%mod,(res[<span class="number">0</span>]*tmp[<span class="number">1</span>]+res[<span class="number">1</span>]*tmp[<span class="number">3</span>])%mod,(res[<span class="number">2</span>]*tmp[<span class="number">0</span>]+res[<span class="number">3</span>]*tmp[<span class="number">2</span>])%mod,(res[<span class="number">2</span>]*tmp[<span class="number">1</span>]+res[<span class="number">3</span>]*tmp[<span class="number">3</span>])%mod);</span><br><span class="line"><span class="built_in">tie</span>(tmp[<span class="number">0</span>],tmp[<span class="number">1</span>],tmp[<span class="number">2</span>],tmp[<span class="number">3</span>])=<span class="built_in">make_tuple</span>((tmp[<span class="number">0</span>]*tmp[<span class="number">0</span>]+tmp[<span class="number">1</span>]*tmp[<span class="number">2</span>])%mod,(tmp[<span class="number">0</span>]*tmp[<span class="number">1</span>]+tmp[<span class="number">1</span>]*tmp[<span class="number">3</span>])%mod,(tmp[<span class="number">0</span>]*tmp[<span class="number">2</span>]+tmp[<span class="number">2</span>]*tmp[<span class="number">3</span>])%mod,(tmp[<span class="number">1</span>]*tmp[<span class="number">2</span>]+tmp[<span class="number">3</span>]*tmp[<span class="number">3</span>])%mod);</span><br><span class="line">num&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (res[<span class="number">0</span>]*a2+res[<span class="number">2</span>]*a1)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日期计算">日期计算</h2><p>基姆拉尔森公式,输入几几年几月几日返回一个数n表示周几.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalculateWeekDay</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">1</span>||m==<span class="number">2</span>)m+=<span class="number">12</span>,y--;</span><br><span class="line"><span class="keyword">return</span> ((<span class="number">1LL</span>*d+(m&lt;&lt;<span class="number">1</span>)+<span class="number">3</span>*(m+<span class="number">1</span>)/<span class="number">5</span>+y+y/<span class="number">4</span>-y/<span class="number">100</span>+y/<span class="number">400</span>)%<span class="number">7</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错排-单点计算">错排(单点计算)</h2><p>解决n种元素的排列满足每一个都不在原先自己的位置上.公式:<br>$$D(n)=n!\sum_{k=0}^n\frac{(-1)^k}{k!}$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">__int128 <span class="title">Derangement</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">__int128 rres=<span class="number">0</span>,tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;num;++i)&#123;</span><br><span class="line">rres=(rres+(num-i)&amp;<span class="number">1</span>?tmp:-tmp)%mod;</span><br><span class="line">tmp=tmp*(num+<span class="number">1</span>-i)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rres;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错排-预处理递推">错排(预处理递推)</h2><p>$$D_n=(n-1)(D_{n-1}+D_{n-2})$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> D[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">D[<span class="number">0</span>]=<span class="number">1</span>;D[<span class="number">1</span>]=<span class="number">0</span>,D[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i)&#123;</span><br><span class="line">D[i]=(i<span class="number">-1</span>)*(D[i<span class="number">-1</span>]+D[i<span class="number">-2</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最大不覆盖数">最大不覆盖数</h2><p>给两个数,求出最大的不能被两个数表示的数.结论: $ab-a-b$ (如果gcd不等于1就是正无穷,返回-1)</p><p>如何证明:考虑以一个数为模,另一个数在数表上挂,能证明出来.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">i128 <span class="title">maxdec</span><span class="params">(i128 a,i128 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(__gcd(a,b)!=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> a*b-a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="康托展开">康托展开</h2><p>解决n个元素的一种排列按顺序排列的名次.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fenwick</span>&#123;</span><br><span class="line"><span class="type">int</span> dat[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">dat[pos]+=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">res+=dat[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> fact[<span class="number">1000010</span>];</span><br><span class="line">fenwick cantor;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ffact</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Cantor</span><span class="params">(<span class="type">int</span>* tar,<span class="type">int</span> num)</span></span>&#123;<span class="comment">//[1,n]</span></span><br><span class="line"><span class="built_in">ffact</span>(num);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=num;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">k=cantor.<span class="built_in">qquery</span>(tar[i]);</span><br><span class="line">cantor.<span class="built_in">aadd</span>(tar[i],<span class="number">1</span>);</span><br><span class="line">res=(res+fact[num-i]*k)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (res+<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="康托逆展开">康托逆展开</h2><p>RT,这是给一个排名求排列的过程,逆着来的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxxn 1000</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;<span class="comment">//这个是权值线段树,由于区间加和,假如要求严格小于的有多少个就-1+1来弥补. </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,val;</span><br><span class="line">&#125;;</span><br><span class="line">node* dat;</span><br><span class="line"><span class="built_in">segtree</span>()&#123;</span><br><span class="line">dat=<span class="keyword">new</span> node[mxxn]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建空树,返回根节点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">++top;</span><br><span class="line">dat[top].val=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">dat[tmp].val=dat[dat[tmp].l].val+dat[dat[tmp].r].val;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> val)</span></span>&#123;<span class="comment">//某点加多少 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[mod].val+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">dat[mod].val+=val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">aadd</span>(dat[mod].l,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">aadd</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;<span class="comment">//查询第k小的元素坐标</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dat[dat[mod].l].val&gt;=k)&#123;<span class="keyword">return</span> <span class="built_in">qquery</span>(dat[mod].l,l,mid,k);&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,k-dat[dat[mod].l].val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deCantor</span><span class="params">(<span class="type">int</span>* res,__int128* fac,__int128 permu,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">permu--;</span><br><span class="line">segtree ko;</span><br><span class="line">ko.<span class="built_in">bbuild</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="type">int</span> tmp=permu/fac[n-i]+<span class="number">1</span>;</span><br><span class="line">permu%=fac[n-i];</span><br><span class="line"><span class="type">int</span> rres=ko.<span class="built_in">qquery</span>(<span class="number">1</span>,<span class="number">1</span>,n,tmp);</span><br><span class="line">ko.<span class="built_in">aadd</span>(<span class="number">1</span>,<span class="number">1</span>,n,rres,<span class="number">-1</span>);</span><br><span class="line">res[i]=rres;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逆序对">逆序对</h2><p>公式是<br>$$\sum_{i=1}^{n}\sum_{j=i+1}^n[a_i&gt;a_j]$$<br>该函数同时还是归并排序板子(参数是dat序列ddat辅助空数组res接受结果lr排序范围,写1-n或者0-(n-1)都可以)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ssort</span><span class="params">(<span class="type">int</span>* dat,<span class="type">int</span>* ddat,<span class="type">long</span> <span class="type">long</span>&amp; res,<span class="type">int</span> l,<span class="type">int</span> mid,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> hi=l,ho=mid+<span class="number">1</span>,top=l;</span><br><span class="line"><span class="keyword">while</span>(hi&lt;=mid&amp;&amp;ho&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[hi]&gt;dat[ho])&#123;</span><br><span class="line">res+=mid-hi+<span class="number">1</span>;</span><br><span class="line">ddat[top++]=dat[ho++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ddat[top++]=dat[hi++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(hi&lt;=mid)&#123;</span><br><span class="line">ddat[top++]=dat[hi++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ho&lt;=r)&#123;</span><br><span class="line">ddat[top++]=dat[ho++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span>* dat,<span class="type">int</span>* ddat,<span class="type">long</span> <span class="type">long</span>&amp; res,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">msort</span>(dat,ddat,res,l,mid);</span><br><span class="line"><span class="built_in">msort</span>(dat,ddat,res,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">ssort</span>(dat,ddat,res,l,mid,r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=l;o&lt;=r;++o)&#123;</span><br><span class="line">dat[o]=ddat[o];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="欧拉函数-单点">欧拉函数(单点)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">phi</span><span class="params">(T n)</span></span>&#123;</span><br><span class="line">T res=n;</span><br><span class="line"><span class="keyword">for</span>(T i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)res=res/i*(i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)n/=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (n!=<span class="number">1</span>)?(res/n*(n<span class="number">-1</span>)):(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="狄利克雷卷积-Dirichlet-Convolution">狄利克雷卷积(Dirichlet Convolution)</h2><p>给定数论函数f和积性函数g,在 $O(n\log\log n)$ 时间内求出 $h=\sum_{i=1}^nf*g$ .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dirichlet</span><span class="params">(T1* f,T2* g,<span class="type">int</span>* prime,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=primetop;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n/prime[i];j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line"><span class="type">int</span> t=prime[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> k=j*prime[i];k&lt;=n;k*=prime[i])&#123;</span><br><span class="line">f[k]=f[k]+f[j]*g[t];</span><br><span class="line">t*=prime[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//计算f*g的卷积，f是结果，要求g是积性函数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dirichlet</span><span class="params">(T* f,<span class="type">int</span>* prime,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=primetop;++i)&#123;</span><br><span class="line"><span class="type">int</span> tmp=n/prime[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tmp;++j)&#123;</span><br><span class="line">f[j*prime[i]]=(f[j*prime[i]]+f[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//计算一个积性函数前缀和（f*1） </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dirichletde</span><span class="params">(T* f,<span class="type">int</span>* prime,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=primetop;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n/prime[i];j;--j)&#123;</span><br><span class="line">f[j]=f[j]+f[j*prime[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//计算一个积性函数自身后缀和（f*1），也就是f(n)=sum(f(kn)),(kn&lt;n) </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="D函数-数字每位和">D函数(数字每位和)</h2><p>就是字面意思,把十进制每位数都加一起.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DFunction</span><span class="params">(T num)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num)&#123;</span><br><span class="line">res+=num%<span class="number">10</span>;</span><br><span class="line">num/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="求-1-num-的所有数中0-9数码出现多少次-数位DP">求[1,num]的所有数中0-9数码出现多少次(数位DP)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">21</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*当前数字长度i,最高位为j,k这个数字有多少个*/</span></span><br><span class="line"><span class="comment">/*dp[2][1][1]表示[0,19]中1有多少个*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> num=<span class="number">20</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">dp[<span class="number">1</span>][i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=num;++len)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;++k)&#123;</span><br><span class="line">dp[len][i][k]+=dp[len<span class="number">-1</span>][j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[len][i][i]+=<span class="built_in">pow</span>(<span class="number">10</span>,len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">getDigit</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;<span class="comment">/*[0,num]中所有数出现次数*/</span></span><br><span class="line">num++;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;<span class="built_in">res</span>(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> dat[<span class="number">21</span>]&#123;&#125;,len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;dat[++len]=num%<span class="number">10</span>;num/=<span class="number">10</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;<span class="comment">/*位数不足len,不含前导零*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;++k)&#123;</span><br><span class="line">res[k]+=dp[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;dat[len];++i)&#123;<span class="comment">/*原位一样,高位较小,无前导零*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)&#123;</span><br><span class="line">res[j]+=dp[len][i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)&#123;<span class="comment">/*剩下的情况*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;dat[i];++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;++k)&#123;</span><br><span class="line">res[k]+=dp[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=len;j&gt;i;--j)&#123;</span><br><span class="line">res[dat[j]]+=dat[i]*<span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="每次可以直线加上gcd-求最小极差">每次可以直线加上gcd,求最小极差</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addgcd</span><span class="params">(T* dat,<span class="type">int</span> n,T ggcd)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">dat[i]%=ggcd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n);</span><br><span class="line">T res=dat[n]-dat[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">res=<span class="built_in">min</span>(res,ggcd+dat[i]-dat[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PELL方程">PELL方程</h2><p>求解形如 $x^2-dy^2=1$ 的方程,d是给出的,求最小解.<br>显然, $\begin{cases}x=\pm1\y=0\end{cases}$ 一定是解,然后就是求正整数解.</p><p>两个性质:1. $\begin{bmatrix}x_n\y_n\end{bmatrix}=\begin{bmatrix}x_1&amp;dy_1\y_1&amp;x_1\end{bmatrix}^{n-1}\begin{bmatrix}x_1\y_1\end{bmatrix}$ 这个是求第k个正整数解的(无解就是无解,有解就有无数个解)<br>2. 当m是奇数时, $x=p,y=q$ 是方程 $x^2-dy^2=-1$ 的最小正整数解,m是偶数时这个方程无解.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">pair&lt;__int128,__int128&gt; <span class="title">pell</span><span class="params">(__int128* dat,__int128 d,__int128 k=<span class="number">1</span>)</span></span>&#123;<span class="comment">/* x^2 -d y^2 =1 求解 */</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> sq=<span class="built_in">sqrt</span>(d);<span class="comment">/*    辅助内存     求解d     答案k次方*/</span></span><br><span class="line">__int128 ss=sq,m=<span class="number">-1</span>,upper=<span class="number">1</span>,lower=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ss*ss==d)<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;<span class="comment">/*无解*/</span></span><br><span class="line">dat[++m]=sq;</span><br><span class="line">__int128 a=ss,b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">b=(d-a*a)/b;</span><br><span class="line">dat[++m]=(sq+a)/b;</span><br><span class="line">a=dat[m]*b-a;</span><br><span class="line">&#125;<span class="keyword">while</span>((dat[<span class="number">0</span>]&lt;&lt;<span class="number">1</span>)!=dat[m]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(upper,lower);</span><br><span class="line">upper+=dat[i]*lower;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;__int128,__int128&gt; res;</span><br><span class="line"><span class="keyword">if</span>(m&amp;<span class="number">1</span>)res=&#123;upper*upper&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,upper*lower&lt;&lt;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> res=&#123;upper,lower&#125;;</span><br><span class="line">k--;</span><br><span class="line">__int128 base[<span class="number">5</span>]=&#123;<span class="number">0</span>,res.first,d*res.second,res.second,res.first&#125;,rres[<span class="number">5</span>]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(k)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)<span class="built_in">tie</span>(rres[<span class="number">1</span>],rres[<span class="number">2</span>],rres[<span class="number">3</span>],rres[<span class="number">4</span>])=<span class="built_in">make_tuple</span>(rres[<span class="number">1</span>]*base[<span class="number">1</span>]+rres[<span class="number">2</span>]*base[<span class="number">3</span>],rres[<span class="number">1</span>]*base[<span class="number">2</span>]+rres[<span class="number">2</span>]*base[<span class="number">4</span>],rres[<span class="number">3</span>]*base[<span class="number">1</span>]+rres[<span class="number">4</span>]*base[<span class="number">3</span>],rres[<span class="number">3</span>]*base[<span class="number">2</span>]+rres[<span class="number">4</span>]*base[<span class="number">4</span>]);</span><br><span class="line">   <span class="built_in">tie</span>(base[<span class="number">1</span>],base[<span class="number">2</span>],base[<span class="number">3</span>],base[<span class="number">4</span>])=<span class="built_in">make_tuple</span>(base[<span class="number">1</span>]*base[<span class="number">1</span>]+base[<span class="number">2</span>]*base[<span class="number">3</span>],base[<span class="number">1</span>]*base[<span class="number">2</span>]+base[<span class="number">2</span>]*base[<span class="number">4</span>],base[<span class="number">3</span>]*base[<span class="number">1</span>]+base[<span class="number">4</span>]*base[<span class="number">3</span>],base[<span class="number">3</span>]*base[<span class="number">2</span>]+base[<span class="number">4</span>]*base[<span class="number">4</span>]);</span><br><span class="line">k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;rres[<span class="number">1</span>]*res.first+rres[<span class="number">2</span>]*res.second,rres[<span class="number">3</span>]*res.first+rres[<span class="number">4</span>]*res.second&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dat=[<span class="number">0</span>]*<span class="number">200000</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pell</span>(<span class="params">d</span>):</span><br><span class="line">    sq=math.sqrt(d)</span><br><span class="line">    ss=<span class="built_in">int</span>(sq);m=-<span class="number">1</span>;upper=<span class="number">1</span>;lower=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> ss*ss==d:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>,-<span class="number">1</span></span><br><span class="line">    m+=<span class="number">1</span>;dat[m]=ss;</span><br><span class="line">    a=ss;b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b=<span class="built_in">int</span>((d-a*a)//b)</span><br><span class="line">        m+=<span class="number">1</span>;</span><br><span class="line">        dat[m]=<span class="built_in">int</span>((sq+a)//b)</span><br><span class="line">        a=dat[m]*b-a</span><br><span class="line">        <span class="keyword">if</span> dat[<span class="number">0</span>]*<span class="number">2</span>==dat[m]:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        upper,lower=lower,upper</span><br><span class="line">        upper+=dat[i]*lower</span><br><span class="line">    <span class="keyword">if</span>(m&amp;<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> (upper*upper*<span class="number">2</span>+<span class="number">1</span>),upper*lower*<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> upper,lower</span><br></pre></td></tr></table></figure><h2 id="绕线">绕线</h2><p>给一堆散点和一个区间上下界,每次可以选个点进行反转(绕线),求最小极差.由于无论在哪里想进区间必定只有一种绕法,状态确定,就可以直接遍历检查.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">mirrgcd</span><span class="params">(T* dat,<span class="type">int</span> n,T a,T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)<span class="built_in">swap</span>(a,b);</span><br><span class="line">T mxx=<span class="number">0</span>,mnn;</span><br><span class="line"><span class="built_in">memset</span>(&amp;mnn,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(mnn));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">T tmp=((dat[i]/a)&amp;<span class="number">1</span>)?(dat[i]%b):(b-(dat[i]%b));</span><br><span class="line">mxx=<span class="built_in">max</span>(mxx,tmp);</span><br><span class="line">mnn=<span class="built_in">min</span>(mnn,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mxx-mnn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="镜面对称-上翻下翻">镜面对称(上翻下翻)</h2><p>形象理解为一个点绕着一条线坐标变换的过程.公式是 $2a-i$ .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">mmirror</span><span class="params">(T i,T a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*a-i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阶乘取模-阶乘忽略模数的取模">阶乘取模,阶乘忽略模数的取模</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">facmod</span><span class="params">(<span class="type">int</span>* table,<span class="type">int</span> n,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=p)<span class="keyword">return</span> table[n];</span><br><span class="line"><span class="type">int</span> res=((n/p)&amp;<span class="number">1</span>^<span class="number">1</span>)?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">res=(res*<span class="built_in">facmod</span>(table,n/p,p))%p;</span><br><span class="line">res=(res*<span class="built_in">facmod</span>(table,n%p,p))%p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阶乘中有多少个因数">阶乘中有多少个因数</h2><p>$$v_p(n!)$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">faccnt</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line">n/=p;</span><br><span class="line">res+=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="摩尔投票">摩尔投票</h2><p>求一个数组中的绝对众数(出现次数大于n/2的元素),时间复杂度O(n),空间复杂度O(1)(边读边算),这玩意因为需要自己读,不封装了,直接裸板子.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt=<span class="number">1</span>,ttmp,tttmp;</span><br><span class="line">cin&gt;&gt;ttmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">cin&gt;&gt;tttmp;</span><br><span class="line"><span class="keyword">if</span>(tttmp==ttmp)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;<span class="keyword">else</span> cnt--;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">ttmp=tttmp;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;ttmp&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="无限循环小数-小数-转分数">无限循环小数(小数)转分数</h2><p>输入格式是 <code>aa.bb(cc)</code> 的格式,其中括号的cc可以没有,使用相减的方法求出循环节.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">pair&lt;i128,i128&gt; <span class="title">conDiv</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* io,<span class="type">int</span> len)</span></span>&#123;<span class="comment">//[0,len)</span></span><br><span class="line">i128 upper=<span class="number">0</span>,lower=<span class="number">1</span>,circ=<span class="number">0</span>,lenc=<span class="number">0</span>;<span class="comment">//循环节,循环节长度</span></span><br><span class="line"><span class="type">int</span> ff=<span class="number">0</span>,gg=<span class="number">0</span>;<span class="comment">//整数部分,是不是无限循环小数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(io[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">ff=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">upper=upper*<span class="number">10</span>+io[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(gg==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(io[i]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">gg=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">upper=upper*<span class="number">10</span>+io[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">lower*=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(io[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">circ=circ*<span class="number">10</span>+io[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(gg==<span class="number">0</span>)&#123;<span class="comment">//有限小数</span></span><br><span class="line">gg=__gcd(upper,lower);</span><br><span class="line">upper/=gg;</span><br><span class="line">lower/=gg;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//无限循环小数</span></span><br><span class="line">i128 p10=<span class="built_in">pow</span>((<span class="type">long</span> <span class="type">double</span>)<span class="number">10</span>,lenc);</span><br><span class="line">upper=upper*p10+circ-upper;</span><br><span class="line">lower=lower*p10-lower;</span><br><span class="line">gg=__gcd(upper,lower);</span><br><span class="line">upper/=gg;</span><br><span class="line">lower/=gg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;upper,lower&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有限循环小数循环节">有限循环小数循环节</h2><p>给一个分数,输出对应的有限循环小数,循环节被括号包住.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">string <span class="title">toCircle</span><span class="params">(<span class="type">long</span> <span class="type">long</span> upp,<span class="type">long</span> <span class="type">long</span> low,<span class="type">char</span> flag=<span class="number">0</span>)</span></span>&#123;<span class="comment">/*分数转循环小数,0正1负*/</span></span><br><span class="line">unordered_map&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt;mp;<span class="comment">/*eg:(0,1,7)=0.(242857)*/</span></span><br><span class="line">string res;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)res=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">res+=<span class="built_in">to_string</span>(upp/low);</span><br><span class="line">upp=upp%low*<span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> up=upp;</span><br><span class="line"><span class="keyword">if</span>(up==<span class="number">0</span>)<span class="keyword">return</span> res;<span class="comment">/*整数*/</span></span><br><span class="line"><span class="keyword">else</span> res+=<span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dec,dd=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep=<span class="number">1</span>;;++dep)&#123;</span><br><span class="line"><span class="keyword">if</span>(up&lt;=<span class="number">0</span>)&#123;<span class="comment">/*不存在循环节*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;dep;++i)&#123;</span><br><span class="line">res+=(upp/low+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">upp=upp%low*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mp[up]!=<span class="number">0</span>)&#123;</span><br><span class="line">dec=mp[up];</span><br><span class="line">dd=dep<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> mp[up]=dep;</span><br><span class="line">up=up%low*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;dec;++i)&#123;</span><br><span class="line">res+=(upp/low+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">upp=upp%low*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">res+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=dec;i&lt;=dd;++i)&#123;</span><br><span class="line">res+=(upp/low+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">upp=upp%low*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;dec&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dd&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> res+<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="连分数转分数">连分数转分数</h2><p>举例<br>$$[1,2,3,4]=1+\frac1{2+\frac1{3+\frac14}}=\frac{43}{30}$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">conFrac</span><span class="params">(<span class="type">long</span> <span class="type">long</span>* dat,<span class="type">int</span> len)</span></span>&#123;<span class="comment">/*[0,len],把连分数转成分数*/</span></span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span>)<span class="keyword">return</span> &#123;dat[<span class="number">0</span>],<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> upper=dat[len],lower=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(upper,lower);</span><br><span class="line">upper+=dat[i]*lower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;upper,lower&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="根号转连分数">根号转连分数</h2><p>每一个根号都可以转换成有周期的连分数.长这样: $[a_0,a_1,…,a_m,2a_0,a_1,…,a_m,2a_0,…]$ 代码会返回最小周期m.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">conDiv</span><span class="params">(__int128 d,__int128* dat)</span></span>&#123;<span class="comment">/*根号转连分数*/</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> sq=<span class="built_in">sqrt</span>(d);</span><br><span class="line">__int128 ss=sq,m=<span class="number">-1</span>,a=sq,b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d==dat[<span class="number">0</span>]*dat[<span class="number">0</span>])<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">/*完全平方数*/</span></span><br><span class="line">dat[++m]=sq;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">b=(d-a*a)/b;</span><br><span class="line">dat[++m]=(sq+a)/b;</span><br><span class="line">a=dat[m]*b-a;</span><br><span class="line">&#125;<span class="keyword">while</span>((dat[<span class="number">0</span>]&lt;&lt;<span class="number">1</span>)!=dat[m]);</span><br><span class="line"><span class="keyword">return</span> m<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="简易分数类">简易分数类</h2><p>一个分数类,支持加操作,输出的是最简带分数的形式(太奇怪了).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">divisor</span>&#123;</span><br><span class="line">__int128 upper,lower,num;</span><br><span class="line"><span class="built_in">divisor</span>(__int128 a=<span class="number">0</span>,__int128 b=<span class="number">0</span>,__int128 c=<span class="number">0</span>):<span class="built_in">upper</span>(a),<span class="built_in">lower</span>(b),<span class="built_in">num</span>(c)&#123;&#125;</span><br><span class="line">divisor <span class="keyword">operator</span> +(<span class="type">const</span> divisor&amp; io)<span class="type">const</span>&#123;</span><br><span class="line">divisor res;</span><br><span class="line">res.upper=upper*io.lower+lower*io.upper;</span><br><span class="line">res.lower=lower*io.lower;</span><br><span class="line">__int128 tmp=__gcd(res.upper,res.lower);</span><br><span class="line"><span class="comment">// assert(tmp!=0);</span></span><br><span class="line">res.upper/=tmp;</span><br><span class="line">res.lower/=tmp;</span><br><span class="line">res.num=(num+io.num+((res.upper)/(res.lower)));</span><br><span class="line">res.upper%=res.lower;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lenth</span><span class="params">(__int128 tmp)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">len++;</span><br><span class="line">tmp/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(upper!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> sp=<span class="built_in">lenth</span>(num);</span><br><span class="line"><span class="type">int</span> sl=<span class="built_in">max</span>(<span class="built_in">lenth</span>(upper),<span class="built_in">lenth</span>(lower));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sp;++i)&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;upper&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">fout&lt;&lt;num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sl;++i)&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;enter;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sp;++i)&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;lower;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fout&lt;&lt;num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="德州扑克规则">德州扑克规则</h2><p>按照德州扑克的规则比较两堆牌的大小.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cards</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> num,fl;<span class="comment">/*数字大小,花色*/</span></span><br><span class="line"><span class="type">int</span> use;<span class="comment">/*比较时有没有组成牌型*/</span></span><br><span class="line"><span class="type">char</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node&amp; io)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(use==io.use)&#123;</span><br><span class="line"><span class="keyword">return</span> num&gt;io.num;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> use&gt;io.use;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node* dat;</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="built_in">cards</span>()&#123;</span><br><span class="line">dat=<span class="keyword">new</span> node[<span class="number">10</span>]&#123;&#125;;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addcard</span><span class="params">(<span class="type">char</span>* ddat)</span></span>&#123;<span class="comment">/*加卡片,值域映射[2-14],A是14*/</span></span><br><span class="line">top++;</span><br><span class="line">dat[top].use=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> &amp;flopos=ddat[<span class="number">1</span>],&amp;numpos=ddat[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">switch</span>(flopos)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:&#123;<span class="comment">/*红桃*/</span>dat[top].fl=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:&#123;<span class="comment">/*黑桃*/</span>dat[top].fl=<span class="number">2</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:&#123;<span class="comment">/*方片*/</span>dat[top].fl=<span class="number">3</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">default</span>:&#123;<span class="comment">/*C梅花*/</span>dat[top].fl=<span class="number">4</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(numpos)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:&#123;<span class="comment">/*10*/</span>dat[top].num=<span class="number">10</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>:&#123;dat[top].num=<span class="number">11</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:&#123;dat[top].num=<span class="number">12</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;K&#x27;</span>:&#123;dat[top].num=<span class="number">13</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:&#123;dat[top].num=<span class="number">14</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">default</span>:&#123;dat[top].num=numpos-<span class="string">&#x27;0&#x27;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(dat[num],dat[top]);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ssort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">皇家同花顺 10</span></span><br><span class="line"><span class="comment">普通同花顺 9 num 最大数字</span></span><br><span class="line"><span class="comment">四条      8 num 相同数字</span></span><br><span class="line"><span class="comment">三带一对  7 num 三个相同的数字</span></span><br><span class="line"><span class="comment">同花      6 num 最大数字</span></span><br><span class="line"><span class="comment">顺子      5 num 最大数字</span></span><br><span class="line"><span class="comment">三条      4 num 相同数字</span></span><br><span class="line"><span class="comment">两对      3 num 较大的一对</span></span><br><span class="line"><span class="comment">对子      2 num 对子牌面</span></span><br><span class="line"><span class="comment">散牌      1 num 散牌最大数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">vval</span><span class="params">()</span></span>&#123;<span class="comment">/*五张牌的比较,其实多了也不是不可以?*/</span></span><br><span class="line"><span class="type">int</span> nnum[<span class="number">20</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> se[<span class="number">5</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line">nnum[dat[i].num]++;</span><br><span class="line">se[dat[i].fl]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nnum[<span class="number">10</span>]==<span class="number">1</span>&amp;&amp;nnum[<span class="number">11</span>]==<span class="number">1</span>&amp;&amp;nnum[<span class="number">12</span>]==<span class="number">1</span>&amp;&amp;nnum[<span class="number">13</span>]==<span class="number">1</span>&amp;&amp;nnum[<span class="number">14</span>]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">if</span>(se[<span class="number">1</span>]==<span class="number">5</span>||se[<span class="number">2</span>]==<span class="number">5</span>||se[<span class="number">3</span>]==<span class="number">5</span>||se[<span class="number">4</span>]==<span class="number">5</span>)<span class="keyword">return</span> &#123;<span class="number">10</span>,<span class="number">0</span>&#125;;<span class="comment">/*皇家同花顺*/</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">5</span>,<span class="number">14</span>&#125;;<span class="comment">/*顺子*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">2</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[i]==<span class="number">1</span>&amp;&amp;nnum[i+<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;nnum[i+<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;nnum[i+<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;nnum[i+<span class="number">4</span>]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">if</span>(se[<span class="number">1</span>]==<span class="number">5</span>||se[<span class="number">2</span>]==<span class="number">5</span>||se[<span class="number">3</span>]==<span class="number">5</span>||se[<span class="number">4</span>]==<span class="number">5</span>)<span class="keyword">return</span> &#123;<span class="number">9</span>,i+<span class="number">4</span>&#125;;<span class="comment">/*皇家同花顺*/</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">5</span>,i+<span class="number">4</span>&#125;;<span class="comment">/*顺子*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cup=<span class="number">0</span>,ff=<span class="number">0</span>,mxx=<span class="number">0</span>,mnnn=<span class="number">0</span>,mxxx=<span class="number">0</span>;<span class="comment">/*对数,三个的对,两对最大的,散牌最大的,所有牌最大的*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">14</span>;++i)&#123;</span><br><span class="line">mxxx=<span class="built_in">max</span>(mxxx,nnum[i]);</span><br><span class="line"><span class="keyword">switch</span>(nnum[i])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">8</span>,i&#125;;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">ff=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">cup++;</span><br><span class="line">mxx=<span class="built_in">max</span>(mxx,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">mnnn=<span class="built_in">max</span>(mnnn,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff!=<span class="number">0</span>&amp;&amp;cup!=<span class="number">0</span>)&#123;<span class="comment">/*三带一对*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;   <span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(dat[i].num==ff)dat[i].use=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">&#125;   <span class="comment">//</span></span><br><span class="line"><span class="built_in">ssort</span>();   <span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">7</span>,ff&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(se[<span class="number">1</span>]==top||se[<span class="number">2</span>]==top||se[<span class="number">3</span>]==top||se[<span class="number">4</span>]==top)&#123;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">return</span>&#123;<span class="number">6</span>,mxxx&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;           <span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(dat[i].num==ff)dat[i].use=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">&#125;   <span class="comment">//</span></span><br><span class="line"><span class="built_in">ssort</span>();   <span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span>&#123;<span class="number">4</span>,ff&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cup&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[dat[i].num]&gt;=<span class="number">2</span>)dat[i].use=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">return</span>&#123;<span class="number">3</span>,mxx&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cup==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[dat[i].num]&gt;=<span class="number">2</span>)dat[i].use=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">2</span>,mxx&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ssort</span>();</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">1</span>,mxxx&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="keyword">operator</span> &lt;(cards&amp; io)&#123;</span><br><span class="line"><span class="keyword">auto</span> i=<span class="built_in">vval</span>();</span><br><span class="line"><span class="keyword">auto</span> j=io.<span class="built_in">vval</span>();</span><br><span class="line"><span class="keyword">if</span>(i.first==j.first)&#123;</span><br><span class="line"><span class="keyword">if</span>(i.second==j.second)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=top;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[k].num!=io.dat[k].num)&#123;</span><br><span class="line"><span class="keyword">return</span> dat[k].num&lt;io.dat[k].num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">/*这个值理论上不应该出现*/</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> i.second&lt;j.second;</span><br><span class="line">&#125;<span class="keyword">return</span> i.first&lt;j.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line">fout&lt;&lt;dat[i].num&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(<span class="type">int</span>)dat[i].fl&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;enter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="简易文件解析-欧拉计划-Project-Euler">简易文件解析(欧拉计划 Project Euler)</h2><p>形如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;BBB&quot;</span>,<span class="string">&quot;CCC&quot;</span>,<span class="string">&quot;DDD&quot;</span></span><br></pre></td></tr></table></figure><p>的文件,在此代码的解析下会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AAA</span><br><span class="line">BBB</span><br><span class="line">CCC</span><br><span class="line">DDD</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;<span class="built_in">eulerDecode</span>()&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;words.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="comment">/*给定文件名称*/</span></span><br><span class="line">pair&lt;<span class="type">int</span>,vector&lt;string&gt; &gt;res;<span class="comment">/*文件格式必须是 &quot;a&quot;,&quot;b&quot;,&quot;c&quot; 这样的格式,会解析出abc三个字符串 &quot;*/</span></span><br><span class="line">res.second.<span class="built_in">resize</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>(),ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">ff^=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// res.second.push_back(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line">res.first++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">1</span>)res.second[res.first]+=ch;</span><br><span class="line">&#125;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>板子</title>
      <link href="/2024/07/23/10000%E6%9D%BF%E5%AD%90/"/>
      <url>/2024/07/23/10000%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>RT,这是Flu的板子.(本篇巨长,代码含量极高)</p><p>Flu看到打比赛的时候好多人交了一千行的代码,就知道封装的重要性了.Flu也要有自己的板子!!!</p><h2 id="写在前面-一些约定">写在前面,一些约定</h2><p>Flu不喜欢用宏定义,Flu码风良好,除了不喜欢用空格,原则是能不用就不用,除非碰到必须用的地方(比方小根堆).Flu喜欢加大括号.</p><p>数据结构尽量小写,算法函数尽量大写开头.</p><p><strong>除非特殊说明,数组有效空间是[1,n].</strong></p><p>时间复杂度的所有涉及到 $\log$ 的默认 $\log_2$ 即可.</p><p>顺序:快读,基本函数,数据结构,图论,数学,计算几何.</p><h1>快读,基本函数</h1><h2 id="快读快写">快读快写</h2><p>大佬直接出正解,萌新才会使用快读这种垃圾技巧减少程序运行时间.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关同步流.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> enter fout&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> space fout&lt;&lt;<span class="string">&quot; &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dot fout&lt;&lt;<span class="string">&quot;,&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> oui fout&lt;&lt;<span class="string">&quot;Yes&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> non fout&lt;&lt;<span class="string">&quot;No&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si fout&lt;&lt;<span class="string">&quot;?&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> fastio&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> bufl=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> base1[<span class="number">16</span>]=&#123;<span class="number">1</span>,<span class="number">1e-1</span>,<span class="number">1e-2</span>,<span class="number">1e-3</span>,<span class="number">1e-4</span>,<span class="number">1e-5</span>,<span class="number">1e-6</span>,<span class="number">1e-7</span>,<span class="number">1e-8</span>,<span class="number">1e-9</span>,<span class="number">1e-10</span>,<span class="number">1e-11</span>,<span class="number">1e-12</span>,<span class="number">1e-13</span>,<span class="number">1e-14</span>,<span class="number">1e-15</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> base2[<span class="number">16</span>]=&#123;<span class="number">1</span>,<span class="number">1e1</span>,<span class="number">1e2</span>,<span class="number">1e3</span>,<span class="number">1e4</span>,<span class="number">1e5</span>,<span class="number">1e6</span>,<span class="number">1e7</span>,<span class="number">1e8</span>,<span class="number">1e9</span>,<span class="number">1e10</span>,<span class="number">1e11</span>,<span class="number">1e12</span>,<span class="number">1e13</span>,<span class="number">1e14</span>,<span class="number">1e15</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IN</span>&#123;</span><br><span class="line">FILE *IT;<span class="type">char</span> ibuf[bufl],*is=ibuf,*it=ibuf;</span><br><span class="line"><span class="built_in">IN</span>()&#123;IT=stdin;&#125;<span class="built_in">IN</span>(<span class="type">char</span> *a)&#123;IT=<span class="built_in">fopen</span>(a,<span class="string">&quot;r&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">getChar</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(is==it)&#123;it=(is=ibuf)+<span class="built_in">fread</span>(ibuf,<span class="number">1</span>,bufl,IT);<span class="keyword">if</span>(is==it)<span class="keyword">return</span> EOF;&#125;<span class="keyword">return</span> *is++;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getInt</span><span class="params">(Temp &amp;a)</span></span>&#123;a=<span class="number">0</span>;<span class="type">int</span> b=<span class="number">0</span>,c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)b^=(c==<span class="number">45</span>),c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)a=(a&lt;&lt;<span class="number">1</span>)+(a&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();<span class="keyword">if</span>(b)a=-a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getDouble</span><span class="params">(Temp &amp;a)</span></span>&#123;a=<span class="number">0</span>;<span class="type">int</span> b=<span class="number">0</span>,c=<span class="built_in">getChar</span>(),d=<span class="number">0</span>;__int128 e=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">while</span>(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)b^=(c==<span class="number">45</span>),c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)e=(e&lt;&lt;<span class="number">1</span>)+(e&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();<span class="keyword">if</span>(c==<span class="number">46</span>)&#123;c=<span class="built_in">getChar</span>();<span class="keyword">while</span>(c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>)d++,f=(f&lt;&lt;<span class="number">1</span>)+(f&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>,c=<span class="built_in">getChar</span>();&#125;a=e+base1[d]*f;<span class="keyword">if</span>(b)a=-a;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">char</span> &amp;a)&#123;a=<span class="built_in">getChar</span>();<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">char</span> *a)&#123;<span class="keyword">do</span>&#123;*a=<span class="built_in">getChar</span>();&#125;<span class="keyword">while</span>(*a&lt;=<span class="number">32</span>);<span class="keyword">while</span>(*a&gt;<span class="number">32</span>)*++a=<span class="built_in">getChar</span>();*a=<span class="number">0</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(string &amp;a)&#123;<span class="type">char</span> b=<span class="built_in">getChar</span>();<span class="keyword">while</span>(b&lt;=<span class="number">32</span>)b=<span class="built_in">getChar</span>();<span class="keyword">while</span>(b&gt;<span class="number">32</span>)a+=b,b=<span class="built_in">getChar</span>();<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">int</span> &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">long</span> <span class="type">long</span> &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(__int128 &amp;a)&#123;<span class="built_in">getInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">float</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">double</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">IN&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="type">long</span> <span class="type">double</span> &amp;a)&#123;<span class="built_in">getDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">OUT</span>&#123;</span><br><span class="line">FILE *IT;<span class="type">char</span> obuf[bufl],*os=obuf,*ot=obuf+bufl;<span class="type">int</span> Eps;<span class="type">long</span> <span class="type">double</span> Acc;</span><br><span class="line"><span class="built_in">OUT</span>()&#123;IT=stdout,Eps=<span class="number">6</span>,Acc=<span class="number">0.5</span>;&#125;<span class="built_in">OUT</span>(<span class="type">char</span> *a)&#123;IT=<span class="built_in">fopen</span>(a,<span class="string">&quot;w&quot;</span>),Eps=<span class="number">6</span>,Acc=<span class="number">0.5</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ChangEps</span><span class="params">(<span class="type">int</span> x=<span class="number">6</span>)</span></span>&#123;Eps=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;<span class="built_in">fwrite</span>(obuf,<span class="number">1</span>,os-obuf,IT);os=obuf;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putChar</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;*os++=a;<span class="keyword">if</span>(os==ot)<span class="built_in">flush</span>();&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putInt</span><span class="params">(Temp a)</span></span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;<span class="built_in">putChar</span>(<span class="number">45</span>);a=-a;&#125;<span class="keyword">if</span>(a&lt;<span class="number">10</span>)&#123;<span class="built_in">putChar</span>(a+<span class="number">48</span>);<span class="keyword">return</span>;&#125;<span class="built_in">putInt</span>(a/<span class="number">10</span>);<span class="built_in">putChar</span>(a%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putLeading</span><span class="params">(Temp a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">if</span>(!b)<span class="keyword">return</span>;<span class="built_in">putLeading</span>(a/<span class="number">10</span>,b<span class="number">-1</span>);<span class="built_in">putChar</span>(a%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Temp&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putDouble</span><span class="params">(Temp a)</span></span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;<span class="built_in">putChar</span>(<span class="number">45</span>);a=-a;&#125;__int128 b=a;<span class="built_in">putInt</span>(b);a-=b;a*=base2[Eps];b=a+Acc;<span class="built_in">putChar</span>(<span class="number">46</span>);<span class="built_in">putLeading</span>(b,Eps);&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">char</span> a)&#123;<span class="built_in">putChar</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> <span class="type">char</span> *a)&#123;<span class="keyword">while</span>(*a)<span class="built_in">putChar</span>(*a++);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(string a)&#123;<span class="keyword">for</span>(<span class="keyword">auto</span> c:a)<span class="built_in">putChar</span>(c);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">int</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">long</span> <span class="type">long</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(__int128 a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> <span class="type">int</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">unsigned</span> __int128 a)&#123;<span class="built_in">putInt</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">float</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">double</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">OUT&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="type">long</span> <span class="type">double</span> a)&#123;<span class="built_in">putDouble</span>(a);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">~<span class="built_in">OUT</span>()&#123;<span class="built_in">flush</span>();&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> fastio::IN;</span><br><span class="line"><span class="keyword">using</span> fastio::OUT;</span><br><span class="line">IN fin;</span><br><span class="line">OUT fout;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,res;</span><br><span class="line"><span class="comment">//#define NaraFluorine</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NaraFluorine</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;P_.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;std.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">fin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">fin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用法:fin替代cin,fout替代cout.其中eps默认的6是保留几位小数,可以改.</p><p>现役板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> enter putchar(<span class="string">&#x27;\n&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> space putchar(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dot putchar(<span class="string">&#x27;,&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> oui putchar(<span class="string">&#x27;Y&#x27;</span>),putchar(<span class="string">&#x27;e&#x27;</span>),putchar(<span class="string">&#x27;s&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> non putchar(<span class="string">&#x27;N&#x27;</span>),putchar(<span class="string">&#x27;o&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si putchar(<span class="string">&#x27;?&#x27;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> bufsize=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> buf[bufsize],*p1=buf,*p2=buf;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,bufsize,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="type">char</span> obuf[bufsize],*p3=obuf;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> putchar(x) (p3-obuf&lt;(bufsize))?(*p3++=x):(fwrite(obuf,p3-obuf,1,stdout),p3=obuf,*p3++=x)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> tf=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">tf=ch==<span class="string">&#x27;-&#x27;</span>?<span class="number">1</span>:<span class="number">0</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">sum=(sum&lt;&lt;<span class="number">1</span>)+(sum&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">(tf)&amp;&amp;(sum=-sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> ...Args&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;tmp,Args &amp;...tmps)</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(tmp);</span><br><span class="line"><span class="built_in">read</span>(tmps...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">printt</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>)<span class="built_in">printt</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">x&lt;<span class="number">0</span>?<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),<span class="built_in">printt</span>(-x):<span class="built_in">printt</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> ...Args&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T tmp,Args ...tmps)</span></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(tmp);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(tmps...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(x),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> ...Args&gt;<span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(T tmp,Args ...tmps)</span></span>&#123;</span><br><span class="line"><span class="built_in">put</span>(tmp);</span><br><span class="line"><span class="built_in">put</span>(tmps...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readc</span><span class="params">(<span class="type">char</span> &amp;a)</span></span>&#123;<span class="comment">//获取一个字符,自动过滤空格回车 </span></span><br><span class="line">a=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(a==<span class="string">&#x27; &#x27;</span>||a==<span class="string">&#x27;\n&#x27;</span>||a==<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">a=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">char</span>,<span class="keyword">typename</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readc</span><span class="params">(<span class="type">char</span> &amp;a,Args &amp;...b)</span></span>&#123;</span><br><span class="line"><span class="built_in">readc</span>(a);</span><br><span class="line"><span class="built_in">readc</span>(b...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面这俩是打印十六进制数和二进制数的 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">bprint</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">(x&gt;=<span class="number">2</span>)?(<span class="built_in">bprint</span>(x&gt;&gt;<span class="number">1</span>),<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+(x&amp;<span class="number">1</span>))):(<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+(x&amp;<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">xprint</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">((x^(x&amp;<span class="number">0xf</span>))!=<span class="number">0</span>)?(<span class="built_in">xprint</span>(x&gt;&gt;<span class="number">4</span>),x&amp;=<span class="number">0xf</span>,(x&gt;=<span class="number">10</span>)?(<span class="built_in">putchar</span>(<span class="string">&#x27;A&#x27;</span>+x<span class="number">-10</span>)):(<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x))):((x&gt;=<span class="number">10</span>)?(<span class="built_in">putchar</span>(<span class="string">&#x27;A&#x27;</span>+x<span class="number">-10</span>)):(<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,res;</span><br><span class="line"><span class="comment">//#define NaraFluorine</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NaraFluorine</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;P_.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;std.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">read</span>(t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">read</span>(n,m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">put</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是Flu最常用的快读快写板子.</p><h2 id="位运算">位运算</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> T <span class="title">lowbit</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&amp;-a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowcnt</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_ctz(num);</span><br><span class="line">&#125;<span class="comment">//最低位1之前有多少个0</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowcnt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_ctzll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">highcnt</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_clz(num);</span><br><span class="line">&#125;<span class="comment">//最高位1之后有多少个0</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">highcnt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_clzll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cnt1</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_popcount(num);</span><br><span class="line">&#125;<span class="comment">//统计这个数有多少个位是1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cnt1</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_popcountll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">even1</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_parity(num);</span><br><span class="line">&#125;<span class="comment">//这个数1的个数的奇偶</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">even1</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_parityll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">low1</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_ffs(num);</span><br><span class="line">&#125;<span class="comment">//最低位1是第几位</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">low1</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_ffsll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">highreal</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_clrsb(num);</span><br><span class="line">&#125;<span class="comment">//如果符号位是0返回前导0个数-1,否则返回前导1个数-1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">highreal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __builtin_clrsbll(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) ((x^(x&gt;&gt;31))-(x&gt;&gt;31))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs64(x) ((x^(x&gt;&gt;63))-(x&gt;&gt;63))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs128(x) ((x^(x&gt;&gt;127))-(x&gt;&gt;127))</span></span><br><span class="line"><span class="comment">//绝对值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=num;i;i=(i<span class="number">-1</span>)&amp;num)&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;<span class="comment">//枚举二进制子集(降序)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0 is here</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=num;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>,t;x&lt;=num;t=x+(x&amp;-x),x=(t|((((t&amp;-t)/(x&amp;-x))&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>)))&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//二进制1位数相同数的枚举顺序增序排列,O(n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用库函数">常用库函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmax</span><span class="params">(T1&amp; num,T2 val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (num&lt;=val)?(num=val,<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmin</span><span class="params">(T1&amp; num,T2 val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (num&gt;=val)?(num=val,<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>数据结构</h1><h2 id="排序-归并排序-逆序对">排序(归并排序) 逆序对</h2><p>鉴于不好封装,保留源码了,res是逆序对,dat是需要排序的数组,ddat是辅助数组,程序跑完之后元素也会排序,区间 <code>[0,n-1]</code> 或 <code>[1,n]</code> 都可以.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>,dat[<span class="number">500001</span>],ddat[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ssort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> mid,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> hi=l,ho=mid+<span class="number">1</span>,top=l;</span><br><span class="line"><span class="keyword">while</span>(hi&lt;=mid&amp;&amp;ho&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[hi]&gt;dat[ho])&#123;</span><br><span class="line">res+=mid-hi+<span class="number">1</span>;</span><br><span class="line">ddat[top++]=dat[ho++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ddat[top++]=dat[hi++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(hi&lt;=mid)&#123;</span><br><span class="line">ddat[top++]=dat[hi++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ho&lt;=r)&#123;</span><br><span class="line">ddat[top++]=dat[ho++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">msort</span>(l,mid);</span><br><span class="line"><span class="built_in">msort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">ssort</span>(l,mid,r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=l;o&lt;=r;++o)&#123;</span><br><span class="line">dat[o]=ddat[o];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分-最小值">二分(最小值)</h2><p>比某个数大的数都满足某个性质.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">BSCheck</span><span class="params">(T num)</span></span>&#123;</span><br><span class="line"><span class="comment">//checker自己写 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">BS</span><span class="params">(T l,T r)</span></span>&#123;<span class="comment">//范围[l,r]</span></span><br><span class="line">T mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">BSCheck</span>(mid))r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分-最大值">二分(最大值)</h2><p>比某个数小的数都满足某个性质.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">BSCheck</span><span class="params">(T num)</span></span>&#123;</span><br><span class="line"><span class="comment">//checker自己写 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">BS</span><span class="params">(T l,T r)</span></span>&#123;<span class="comment">//范围[l,r]</span></span><br><span class="line">r++;</span><br><span class="line">T mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">BSCheck</span>(mid))l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三分-最小值">三分(最小值)</h2><p>三分的板子,由于三分区间比较宽,我们使用eeps来限定误差,超出误差直接手动判定答案.<br><s>为啥要用三分?因为考试考,就让你两个点同时判断,只能三分.</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">TriSearch</span><span class="params">(T l,T r)</span></span>&#123;<span class="comment">//[l,r]</span></span><br><span class="line">T ll,rr,res,eeps=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(l+eeps&lt;r)&#123;</span><br><span class="line">ll=((l&lt;&lt;<span class="number">1</span>)+r)/<span class="number">3</span>;</span><br><span class="line">rr=((r&lt;&lt;<span class="number">1</span>)+l)/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//Check</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>()&#123;<span class="comment">//[rr+1,r]</span></span><br><span class="line">l=rr+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;<span class="comment">//[ll+1,rr]</span></span><br><span class="line">l=ll+<span class="number">1</span>;</span><br><span class="line">r=rr;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//[l,ll]</span></span><br><span class="line">r=ll;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Check</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> l+<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="搜联通块">搜联通块</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> dat[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (y&lt;<span class="number">0</span>||x&lt;<span class="number">0</span>||y&gt;n||x&gt;m||dat[y][x]==<span class="string">&#x27;.&#x27;</span>)?<span class="number">0</span>:(dat[y][x]=<span class="string">&#x27;.&#x27;</span>,<span class="built_in">dfs</span>(y+<span class="number">1</span>,x)+<span class="built_in">dfs</span>(y<span class="number">-1</span>,x)+<span class="built_in">dfs</span>(y,x+<span class="number">1</span>)+<span class="built_in">dfs</span>(y,x<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="并查集-路径压缩-DSU">并查集(路径压缩)(DSU)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dsunoden 1000010</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dsu</span>&#123;</span><br><span class="line"><span class="type">int</span> ko[dsunoden];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dsunoden;++i)&#123;</span><br><span class="line">ko[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">isfa</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num==ko[num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ffind</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ko[num]==num?num:ko[num]=<span class="built_in">ffind</span>(ko[num]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uunion</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">ko[b]=<span class="built_in">ffind</span>(a);</span><br><span class="line">&#125;<span class="comment">//b被a合并 </span></span><br><span class="line"><span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> num)&#123;</span><br><span class="line"><span class="keyword">return</span> ko[num];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表">链表</h2><p>首尾链表,插入是倒着插的,支持快速合并(然而没有什么卵用).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">htlist</span>&#123;<span class="comment">/*head-Tail-List*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">T val;</span><br><span class="line">&#125;;</span><br><span class="line">node* dat;</span><br><span class="line"><span class="type">int</span> *sz,*head,*tail;</span><br><span class="line"><span class="type">int</span> siz,top,n;</span><br><span class="line"><span class="built_in">htlist</span>(<span class="type">int</span> num=<span class="number">200010</span>,<span class="type">int</span> nn=<span class="number">100010</span>):<span class="built_in">siz</span>(num),<span class="built_in">n</span>(nn),<span class="built_in">top</span>(<span class="number">0</span>)&#123;</span><br><span class="line">sz=<span class="keyword">new</span> <span class="type">int</span>[num]&#123;&#125;;</span><br><span class="line">head=<span class="keyword">new</span> <span class="type">int</span>[num]&#123;&#125;;</span><br><span class="line">tail=<span class="keyword">new</span> <span class="type">int</span>[num]&#123;&#125;;</span><br><span class="line">dat=<span class="keyword">new</span> node[num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos,T val)</span></span>&#123;</span><br><span class="line">sz[pos]++;</span><br><span class="line">dat[++top].val=val;</span><br><span class="line">dat[top].next=head[pos];</span><br><span class="line">head=top;</span><br><span class="line"><span class="keyword">if</span>(sz[pos]==<span class="number">1</span>)&#123;</span><br><span class="line">tail[pos]=top;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">sz[b]+=sz[a];</span><br><span class="line">sz[a]=<span class="number">0</span>;</span><br><span class="line">dat[tail[a]].next=head[b];</span><br><span class="line">head[b]=head[a];</span><br><span class="line">head[a]=tail[a]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">size</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[pos];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="区间划分">区间划分</h2><p>把一块非常大的[l,r]询问划分成左中右三部分,其中一块固定长度的区间信息非常好维护.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">segDiv</span><span class="params">(i64 l,i64 r)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lm=(l+n<span class="number">-1</span>)/n*n,rl=(r<span class="number">-1</span>)/n*n+<span class="number">1</span>,block=((r<span class="number">-1</span>)/n)-((l<span class="number">-1</span>)/n)<span class="number">-1</span>;<span class="comment">//整块个数</span></span><br><span class="line">fout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;lm&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rl&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;block&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(block&gt;=<span class="number">1</span>)&#123;<span class="comment">//中间至少存在一块,区间是[l,lm],[block*sum],[rl,r]</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(block==<span class="number">0</span>)&#123;<span class="comment">//中间隔着一条区块线,[l,lm][rl,r]</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//都在一个区块里面,[l,r],!区间编号分别是(x-1)/n默认区间从0开始!</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="树状数组">树状数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fenwick</span>&#123;<span class="comment">//tree line,树状数组 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ddat[<span class="number">1000010</span>]&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//建树 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ddat[i]+=dat[i];</span><br><span class="line"><span class="type">int</span> j=i+<span class="built_in">lowbit</span>(i);</span><br><span class="line"><span class="keyword">if</span>(j&lt;=n)ddat[j]+=ddat[i];<span class="comment">//向后找爹加和,实现O(n)建树 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">ddat[pos]+=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//[1,pos]</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">res+=ddat[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线段树-lazy-mulazy">线段树(lazy,mulazy)</h2><p>给的还是区间加乘的板子.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxxn 5000000</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtreenode</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val,lazy,mulazy;</span><br><span class="line">&#125;;</span><br><span class="line">segtreenode dat[mxxn];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>,p;<span class="comment">//对p取模 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建空树,返回根节点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line"><span class="built_in">read</span>(dat[++top].val);</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].mulazy=<span class="number">1</span>;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">dat[tmp].val=(dat[dat[tmp].l].val+dat[dat[tmp].r].val)%p;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">llazy</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//down stream</span></span><br><span class="line"><span class="keyword">if</span>(dat[mod].mulazy!=<span class="number">1</span>||dat[mod].lazy!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">dat[dat[mod].l].val=(dat[dat[mod].l].val*dat[mod].mulazy%p+dat[mod].lazy*(mid-l+<span class="number">1</span>)%p)%p;</span><br><span class="line">dat[dat[mod].r].val=(dat[dat[mod].r].val*dat[mod].mulazy%p+dat[mod].lazy*(r-mid)%p)%p;</span><br><span class="line">dat[dat[mod].l].lazy=(dat[dat[mod].l].lazy*dat[mod].mulazy%p+dat[mod].lazy)%p;</span><br><span class="line">dat[dat[mod].r].lazy=(dat[dat[mod].r].lazy*dat[mod].mulazy%p+dat[mod].lazy)%p;</span><br><span class="line">dat[dat[mod].l].mulazy=(dat[dat[mod].l].mulazy*dat[mod].mulazy)%p;</span><br><span class="line">dat[dat[mod].r].mulazy=(dat[dat[mod].r].mulazy*dat[mod].mulazy)%p;</span><br><span class="line">dat[mod].mulazy=<span class="number">1</span>;</span><br><span class="line">dat[mod].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aaddchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].val=(dat[mod].val+val*(r-l+<span class="number">1</span>)%p)%p;</span><br><span class="line">dat[mod].lazy=(dat[mod].lazy+val)%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">aaddchange</span>(dat[mod].l,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">aaddchange</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line">dat[mod].val=(dat[dat[mod].l].val+dat[dat[mod].r].val)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mmulchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].val=(dat[mod].val*val)%p;</span><br><span class="line">dat[mod].mulazy=(dat[mod].mulazy*val)%p;</span><br><span class="line">dat[mod].lazy=(dat[mod].lazy*val)%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">mmulchange</span>(dat[mod].l,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">mmulchange</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line">dat[mod].val=(dat[dat[mod].l].val+dat[dat[mod].r].val)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)res=(res+<span class="built_in">qquery</span>(dat[mod].l,l,mid,tl,tr))%p;</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)res=(res+<span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr))%p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线段树-lazy">线段树(lazy)</h2><p>给的是维护区间加和和lazytag的板子.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxxn 2000000</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtreenode</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val,lazy;</span><br><span class="line">&#125;;</span><br><span class="line">segtreenode dat[mxxn];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建空树,返回根节点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line"><span class="built_in">read</span>(dat[++top].val);</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">dat[tmp].val=dat[dat[tmp].l].val+dat[dat[tmp].r].val;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">llazy</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//down stream</span></span><br><span class="line"><span class="keyword">if</span>(dat[mod].lazy!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">dat[dat[mod].l].val+=dat[mod].lazy*(mid-l+<span class="number">1</span>);</span><br><span class="line">dat[dat[mod].r].val+=dat[mod].lazy*(r-mid);</span><br><span class="line">dat[dat[mod].l].lazy+=dat[mod].lazy;</span><br><span class="line">dat[dat[mod].r].lazy+=dat[mod].lazy;</span><br><span class="line">dat[mod].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aaddchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].val=dat[mod].val+val*(r-l+<span class="number">1</span>);</span><br><span class="line">dat[mod].lazy=dat[mod].lazy+val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">aaddchange</span>(dat[mod].l,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">aaddchange</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line">dat[mod].val=dat[dat[mod].l].val+dat[dat[mod].r].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aaddchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[mod].val+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">aaddchange</span>(dat[mod].l,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">aaddchange</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">dat[mod].val=dat[dat[mod].l].val+dat[dat[mod].r].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="built_in">llazy</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)res+=<span class="built_in">qquery</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)res+=<span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线段树-权值">线段树(权值)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxxn 600000</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;<span class="comment">//这个是权值线段树,由于区间加和,假如要求严格小于的有多少个就-1+1来弥补. </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtreenode</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,val;</span><br><span class="line">&#125;;</span><br><span class="line">segtreenode dat[mxxn];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建空树,返回根节点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> ++top;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> val)</span></span>&#123;<span class="comment">//某点加多少 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[mod].val+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">dat[mod].val+=val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">aadd</span>(dat[mod].l,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">aadd</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qqquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//查询pos单点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> <span class="built_in">qqquery</span>(dat[mod].l,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">qqquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//查询[1,pos]的和 </span></span><br><span class="line"><span class="keyword">if</span>(r&lt;=pos)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&lt;pos)<span class="keyword">return</span> dat[dat[mod].l].val+<span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">qquery</span>(dat[mod].l,l,mid,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">deqquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//查询[pos,r]的和 </span></span><br><span class="line"><span class="keyword">if</span>(pos&lt;=l)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=pos)<span class="keyword">return</span> dat[dat[mod].r].val+<span class="built_in">deqquery</span>(dat[mod].l,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">deqquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="吉司机线段树-势能线段树-Segment-Beats">吉司机线段树(势能线段树 Segment Beats)</h2><p>给定板子支持区间加上某个数,求区间最大最小值,区间和,区间修改为 $\min(a_i,k)$ 以及 $\max(a_i,k)$ .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1145141919</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">500010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line"><span class="type">int</span> mx,se,cnt;<span class="comment">//区间最大值,严格次大值</span></span><br><span class="line"><span class="type">int</span> mn,sn,cnn;<span class="comment">//区间最小值,严格次小值</span></span><br><span class="line"><span class="type">int</span> tgmx,tgmn,tgsu;<span class="comment">//maxtag,mintag,区间tgsutag</span></span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">x -inf 1</span></span><br><span class="line"><span class="comment">x inf  1</span></span><br><span class="line"><span class="comment">-inf inf 0</span></span><br><span class="line"><span class="comment">x x</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">node dat[<span class="number">1000100</span>];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls dat[mod].l</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs dat[mod].r</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">dat[mod].val=dat[ls].val+dat[rs].val;</span><br><span class="line">dat[mod].mx=<span class="built_in">max</span>(dat[ls].mx,dat[rs].mx);</span><br><span class="line">dat[mod].mn=<span class="built_in">min</span>(dat[ls].mn,dat[rs].mn);</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mx==dat[rs].mx)&#123;</span><br><span class="line">dat[mod].cnt=dat[ls].cnt+dat[rs].cnt;</span><br><span class="line">dat[mod].se=<span class="built_in">max</span>(dat[ls].se,dat[rs].se);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dat[ls].mx&lt;dat[rs].mx)&#123;</span><br><span class="line">dat[mod].cnt=dat[rs].cnt;</span><br><span class="line">dat[mod].se=<span class="built_in">max</span>(dat[ls].mx,dat[rs].se);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[mod].cnt=dat[ls].cnt;</span><br><span class="line">dat[mod].se=<span class="built_in">max</span>(dat[ls].se,dat[rs].mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mn==dat[rs].mn)&#123;</span><br><span class="line">dat[mod].cnn=dat[ls].cnn+dat[rs].cnn;</span><br><span class="line">dat[mod].sn=<span class="built_in">min</span>(dat[ls].sn,dat[rs].sn);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dat[ls].mn&lt;dat[rs].mn)&#123;</span><br><span class="line">dat[mod].cnn=dat[ls].cnn;</span><br><span class="line">dat[mod].sn=<span class="built_in">min</span>(dat[ls].sn,dat[rs].mn);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[mod].cnn=dat[rs].cnn;</span><br><span class="line">dat[mod].sn=<span class="built_in">min</span>(dat[ls].mn,dat[rs].sn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgsu!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> &amp;pos=dat[mod].tgsu;</span><br><span class="line"></span><br><span class="line">dat[ls].val+=<span class="number">1ll</span>*pos*(mid-l+<span class="number">1</span>);</span><br><span class="line">dat[ls].tgsu+=pos;</span><br><span class="line">dat[ls].mn+=pos;</span><br><span class="line">dat[ls].mx+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].se!=-inf)dat[ls].se+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].sn!= inf)dat[ls].sn+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].tgmx!=-inf)dat[ls].tgmx+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].tgmn!= inf)dat[ls].tgmn+=pos;</span><br><span class="line"></span><br><span class="line">dat[rs].val+=<span class="number">1ll</span>*pos*(r-mid);</span><br><span class="line">dat[rs].tgsu+=pos;</span><br><span class="line">dat[rs].mn+=pos;</span><br><span class="line">dat[rs].mx+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].se!=-inf)dat[rs].se+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].sn!= inf)dat[rs].sn+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].tgmx!=-inf)dat[rs].tgmx+=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].tgmn!= inf)dat[rs].tgmn+=pos;</span><br><span class="line"></span><br><span class="line">dat[mod].tgsu=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgmn!=inf)&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;pos=dat[mod].tgmn;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;dat[ls].mx)&#123;</span><br><span class="line">dat[ls].val-=<span class="number">1ll</span>*(dat[ls].mx-pos)*dat[ls].cnt;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mx==dat[ls].sn)dat[ls].sn=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mx==dat[ls].mn)dat[ls].mn=pos;</span><br><span class="line">dat[ls].tgmx=<span class="built_in">min</span>(dat[ls].tgmx,pos);</span><br><span class="line">dat[ls].mx=dat[ls].tgmn=pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;dat[rs].mx)&#123;</span><br><span class="line">dat[rs].val-=<span class="number">1ll</span>*(dat[rs].mx-pos)*dat[rs].cnt;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].mx==dat[rs].sn)dat[rs].sn=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].mx==dat[rs].mn)dat[rs].mn=pos;</span><br><span class="line">dat[rs].tgmx=<span class="built_in">min</span>(dat[rs].tgmx,pos);</span><br><span class="line">dat[rs].mx=dat[rs].tgmn=pos;</span><br><span class="line">&#125;</span><br><span class="line">dat[mod].tgmn=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgmx!=-inf)&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;pos=dat[mod].tgmx;</span><br><span class="line"><span class="keyword">if</span>(pos&gt;dat[ls].mn)&#123;</span><br><span class="line">dat[ls].val-=<span class="number">1ll</span>*(dat[ls].mn-pos)*dat[ls].cnn;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mn==dat[ls].se)dat[ls].se=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].mn==dat[ls].mx)dat[ls].mx=pos;</span><br><span class="line">dat[ls].tgmn=<span class="built_in">max</span>(dat[ls].tgmn,pos);</span><br><span class="line">dat[ls].mn=dat[ls].tgmx=pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos&gt;dat[rs].mn)&#123;</span><br><span class="line">dat[rs].val-=<span class="number">1ll</span>*(dat[rs].mn-pos)*dat[rs].cnn;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].mn==dat[rs].se)dat[rs].se=pos;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].mn==dat[rs].mx)dat[rs].mx=pos;</span><br><span class="line">dat[rs].tgmn=<span class="built_in">max</span>(dat[rs].tgmn,pos);</span><br><span class="line">dat[rs].mn=dat[rs].tgmx=pos;</span><br><span class="line">&#125;</span><br><span class="line">dat[mod].tgmx=-inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">top++;</span><br><span class="line">dat[top].val=dat[top].mx=dat[top].mn=a[l];</span><br><span class="line">dat[top].cnn=dat[top].cnt=<span class="number">1</span>;</span><br><span class="line">dat[top].tgmx=dat[top].se=-inf;</span><br><span class="line">dat[top].tgmn=dat[top].sn=inf;</span><br><span class="line">dat[top].tgsu=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmp=++top,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">dat[tmp].tgmn=inf;</span><br><span class="line">dat[tmp].tgmx=-inf;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(tmp);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquerysum</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line"><span class="keyword">return</span> dat[mod].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)res+=<span class="built_in">qquerysum</span>(ls,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)res+=<span class="built_in">qquerysum</span>(rs,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquerymax</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].mx;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,mnn=-inf;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)mnn=<span class="built_in">max</span>(mnn,<span class="built_in">qquerymax</span>(ls,l,mid,tl,tr));</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)mnn=<span class="built_in">max</span>(mnn,<span class="built_in">qquerymax</span>(rs,mid+<span class="number">1</span>,r,tl,tr));</span><br><span class="line"><span class="keyword">return</span> mnn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquerymin</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].mn;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,mxx=inf;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)mxx=<span class="built_in">min</span>(mxx,<span class="built_in">qquerymin</span>(ls,l,mid,tl,tr));</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)mxx=<span class="built_in">min</span>(mxx,<span class="built_in">qquerymin</span>(rs,mid+<span class="number">1</span>,r,tl,tr));</span><br><span class="line"><span class="keyword">return</span> mxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">int</span> val)</span></span>&#123;<span class="comment">//a=min(a,val)</span></span><br><span class="line"><span class="keyword">if</span>(dat[mod].mx&lt;=val)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr&amp;&amp;dat[mod].se&lt;val)&#123;</span><br><span class="line">dat[mod].val-=<span class="number">1LL</span>*(dat[mod].mx-val)*dat[mod].cnt;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].mx==dat[mod].mn)dat[mod].mn=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].mx==dat[mod].sn)dat[mod].sn=val;</span><br><span class="line">dat[mod].tgmx=<span class="built_in">min</span>(dat[mod].tgmx,val);</span><br><span class="line">dat[mod].mx=dat[mod].tgmn=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">mmin</span>(ls,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">mmin</span>(rs,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mmax</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">int</span> val)</span></span>&#123;<span class="comment">//a=max(a,val)</span></span><br><span class="line"><span class="keyword">if</span>(dat[mod].mn&gt;=val)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr&amp;&amp;val&lt;dat[mod].sn)&#123;</span><br><span class="line">dat[mod].val-=<span class="number">1LL</span>*(dat[mod].mn-val)*dat[mod].cnn;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].mn==dat[mod].mx)dat[mod].mx=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].mn==dat[mod].se)dat[mod].se=val;</span><br><span class="line">dat[mod].tgmn=<span class="built_in">max</span>(dat[mod].tgmn,val);</span><br><span class="line">dat[mod].mn=dat[mod].tgmx=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">mmax</span>(ls,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">mmax</span>(rs,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].val+=<span class="number">1LL</span>*(r-l+<span class="number">1</span>)*val;</span><br><span class="line">dat[mod].tgsu+=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgmn!=inf)dat[mod].tgmn+=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgmx!=-inf)dat[mod].tgmx+=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].se!=-inf)dat[mod].se+=val;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].sn!=inf)dat[mod].sn+=val;</span><br><span class="line">dat[mod].mn+=val;</span><br><span class="line">dat[mod].mx+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(mod,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">aadd</span>(ls,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">aadd</span>(rs,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="吉司机线段树2-支持">吉司机线段树2(支持)</h2><p>支持区间加某个数,区间变成某个数(不是max,就是全部赋值成某个数),区间查询最大值,历史最大值.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> inf=<span class="number">0x0000ffffffffffff</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mxx,dmxx,tgsu,mxsu,tgbe,mxbe;</span><br><span class="line"><span class="comment">//最大值,历史最大值,lazy,最大lazy,最大变成tag,当前变成值tag</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先传tgsu再传tgbe</span></span><br><span class="line"><span class="comment">两个tag可以同时存在</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">node dat[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls dat[mod].l</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs dat[mod].r</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">++top;</span><br><span class="line">dat[top].dmxx=dat[top].mxx=a[l];</span><br><span class="line"><span class="comment">// dat[top].tgbe=dat[top].mxbe=-inf;</span></span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmp=++top,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">dat[tmp].tgbe=dat[tmp].mxbe=dat[tmp].dmxx=-inf;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(tmp);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">dat[mod].mxx=<span class="built_in">max</span>(dat[ls].mxx,dat[rs].mxx);</span><br><span class="line">dat[mod].dmxx=(<span class="built_in">max</span>(dat[ls].dmxx,dat[rs].dmxx));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">dat[ls].dmxx=<span class="built_in">max</span>(dat[ls].dmxx,<span class="built_in">max</span>(dat[ls].mxx+dat[mod].mxsu,dat[mod].mxbe));</span><br><span class="line">dat[rs].dmxx=<span class="built_in">max</span>(dat[rs].dmxx,<span class="built_in">max</span>(dat[rs].mxx+dat[mod].mxsu,dat[mod].mxbe));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dat[ls].tgbe!=-inf)&#123;</span><br><span class="line">dat[ls].mxbe=<span class="built_in">max</span>(dat[ls].mxbe,dat[ls].tgbe+dat[mod].mxsu);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[ls].mxsu=<span class="built_in">max</span>(dat[ls].mxsu,dat[ls].tgsu+dat[mod].mxsu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].tgbe!=-inf)&#123;</span><br><span class="line">dat[rs].mxbe=<span class="built_in">max</span>(dat[rs].mxbe,dat[rs].tgbe+dat[mod].mxsu);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[rs].mxsu=<span class="built_in">max</span>(dat[rs].mxsu,dat[rs].tgsu+dat[mod].mxsu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgsu!=<span class="number">0</span>)&#123;</span><br><span class="line">dat[ls].mxx+=dat[mod].tgsu;</span><br><span class="line"><span class="keyword">if</span>(dat[ls].tgbe!=-inf)&#123;</span><br><span class="line">dat[ls].tgbe+=dat[mod].tgsu;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[ls].tgsu+=dat[mod].tgsu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dat[rs].mxx+=dat[mod].tgsu;</span><br><span class="line"><span class="keyword">if</span>(dat[rs].tgbe!=-inf)&#123;</span><br><span class="line">dat[rs].tgbe+=dat[mod].tgsu;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[rs].tgsu+=dat[mod].tgsu;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgbe!=-inf)&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span>&amp; pos=dat[mod].tgbe;</span><br><span class="line">dat[ls].mxx=pos;</span><br><span class="line">dat[ls].tgbe=pos;</span><br><span class="line">dat[ls].tgsu=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">dat[rs].mxx=pos;</span><br><span class="line">dat[rs].tgbe=pos;</span><br><span class="line">dat[rs].tgsu=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dat[ls].mxsu=<span class="built_in">max</span>(dat[ls].mxsu,dat[ls].tgsu);</span><br><span class="line">dat[ls].mxbe=<span class="built_in">max</span>(dat[ls].mxbe,<span class="built_in">max</span>(dat[ls].tgbe,dat[mod].mxbe));</span><br><span class="line"></span><br><span class="line">dat[rs].mxsu=<span class="built_in">max</span>(dat[rs].mxsu,dat[rs].tgsu);</span><br><span class="line">dat[rs].mxbe=<span class="built_in">max</span>(dat[rs].mxbe,<span class="built_in">max</span>(dat[rs].tgbe,dat[mod].mxbe));</span><br><span class="line"></span><br><span class="line">dat[mod].mxsu=<span class="number">0</span>;</span><br><span class="line">dat[mod].tgsu=<span class="number">0</span>;</span><br><span class="line">dat[mod].mxbe=-inf;</span><br><span class="line">dat[mod].tgbe=-inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquerymax</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].mxx;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=-inf;</span><br><span class="line"><span class="built_in">push_down</span>(mod);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">qquerymax</span>(ls,l,mid,tl,tr));</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">qquerymax</span>(rs,mid+<span class="number">1</span>,r,tl,tr));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquerydmax</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod].dmxx;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=-inf;</span><br><span class="line"><span class="built_in">push_down</span>(mod);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">qquerydmax</span>(ls,l,mid,tl,tr));</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">qquerydmax</span>(rs,mid+<span class="number">1</span>,r,tl,tr));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].mxx+=val;</span><br><span class="line">dat[mod].dmxx=<span class="built_in">max</span>(dat[mod].dmxx,dat[mod].mxx);</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tgbe!=-inf)&#123;</span><br><span class="line">dat[mod].tgbe+=val;</span><br><span class="line">dat[mod].mxbe=<span class="built_in">max</span>(dat[mod].mxbe,dat[mod].tgbe);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[mod].tgsu+=val;</span><br><span class="line">dat[mod].mxsu=<span class="built_in">max</span>(dat[mod].mxsu,dat[mod].tgsu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(mod);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">aadd</span>(ls,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">aadd</span>(rs,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">long</span> <span class="type">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].mxx=val;</span><br><span class="line">dat[mod].dmxx=<span class="built_in">max</span>(dat[mod].dmxx,val);</span><br><span class="line">dat[mod].tgbe=val;</span><br><span class="line">dat[mod].mxbe=<span class="built_in">max</span>(dat[mod].mxbe,val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(mod);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">cchange</span>(ls,l,mid,tl,tr,val);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">cchange</span>(rs,mid+<span class="number">1</span>,r,tl,tr,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line">fout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].r&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].mxx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].dmxx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].tgsu&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].tgbe&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i].mxbe&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;enter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主席树-可持久化线段树-UUU">主席树(可持久化线段树)UUU</h2><h2 id="树链剖分-重链剖分-树剖">树链剖分(重链剖分),树剖</h2><p>这里放的是一个能单点修改,查询区间max和区间和的板子.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> ddat[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nnode</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,val,mxx;</span><br><span class="line">&#125;;</span><br><span class="line">nnode dat[<span class="number">600000</span>];</span><br><span class="line"><span class="type">int</span>* rnk,top=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">dat[num].val=dat[dat[num].l].val+dat[dat[num].r].val;</span><br><span class="line">dat[num].mxx=<span class="built_in">max</span>(dat[dat[num].l].mxx,dat[dat[num].r].mxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">++top;</span><br><span class="line">dat[top].val=dat[top].mxx=ddat[rnk[l]];</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(tmp);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[mod].val=val;</span><br><span class="line">dat[mod].mxx=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">aadd</span>(dat[mod].l,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">aadd</span>(dat[mod].r,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> dat[num].mxx;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,mxx=<span class="number">-1145141919</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid)mxx=<span class="built_in">max</span>(mxx,<span class="built_in">querymax</span>(dat[num].l,l,mid,ql,qr));</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid)mxx=<span class="built_in">max</span>(mxx,<span class="built_in">querymax</span>(dat[num].r,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line"><span class="keyword">return</span> mxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querysum</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> dat[num].val;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid)res+=<span class="built_in">querysum</span>(dat[num].l,l,mid,ql,qr);</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid)res+=<span class="built_in">querysum</span>(dat[num].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">segtree koi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">heavyChainSeg</span>&#123;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;edge;</span><br><span class="line"><span class="type">int</span> sz,cnt,n,ttop,*_fa,*dep,*siz,*son,*top,*dfn,*rnk;</span><br><span class="line"><span class="built_in">heavyChainSeg</span>(<span class="type">int</span> nn=<span class="number">100010</span>):<span class="built_in">sz</span>(nn),<span class="built_in">n</span>(<span class="number">0</span>),<span class="built_in">cnt</span>(<span class="number">0</span>),<span class="built_in">ttop</span>(<span class="number">0</span>)&#123;</span><br><span class="line">edge.<span class="built_in">resize</span>(sz);</span><br><span class="line">_fa=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">dep=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">siz=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">son=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">top=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">dfn=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">rnk=<span class="keyword">new</span> <span class="type">int</span>[sz]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddedir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">son[num]=<span class="number">-1</span>;</span><br><span class="line">siz[num]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[i]==<span class="number">0</span>)&#123;</span><br><span class="line">dep[i]=dep[num]+<span class="number">1</span>;</span><br><span class="line">_fa[i]=num;</span><br><span class="line"><span class="built_in">dfs1</span>(i);</span><br><span class="line">siz[num]+=siz[i];</span><br><span class="line"><span class="keyword">if</span>(son[num]==<span class="number">-1</span>||siz[i]&gt;siz[son[num]])&#123;</span><br><span class="line">son[num]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> ko)</span></span>&#123;<span class="comment">/*当前节点,当前重链顶*/</span></span><br><span class="line">top[num]=ko;</span><br><span class="line">dfn[num]=++cnt;</span><br><span class="line">rnk[cnt]=num;</span><br><span class="line"><span class="keyword">if</span>(son[num]==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[num],ko);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=son[num]&amp;&amp;i!=_fa[num])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(i,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&gt;dep[top[v]])</span><br><span class="line">u=_fa[top[u]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v=_fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[u]&gt;dep[v]?v:u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">(<span class="type">int</span> nn,<span class="type">int</span> root=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">n=nn;</span><br><span class="line">dep[root]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(root);</span><br><span class="line"><span class="built_in">dfs2</span>(root,root);</span><br><span class="line">koi.rnk=rnk;</span><br><span class="line">koi.<span class="built_in">bbuild</span>(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquerymax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">-1145141919</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">res=<span class="built_in">max</span>(res,koi.<span class="built_in">querymax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x]));</span><br><span class="line">x=_fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">res=<span class="built_in">max</span>(res,koi.<span class="built_in">querymax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y]));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquerysum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">res+=koi.<span class="built_in">querysum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x]);</span><br><span class="line">x=_fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">res+=koi.<span class="built_in">querysum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">heavyChainSeg ko;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡树-有旋treap">平衡树(有旋treap)</h2><p>有旋treap.<br>定义排名是比他小的数+1,逆排名是比他大的数+1.</p><p>查找排名可能不存在,此时先插一个元素再查排名再删即可.</p><p>getval查询排名为x的数(使用前请保证存在).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">treap</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">phtnode</span>&#123;</span><br><span class="line">phtnode* p[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> val,rank,cnt,size;</span><br><span class="line"><span class="built_in">phtnode</span>(<span class="type">int</span> vval):<span class="built_in">val</span>(vval),<span class="built_in">cnt</span>(<span class="number">1</span>),<span class="built_in">size</span>(<span class="number">1</span>)&#123;</span><br><span class="line">p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="literal">nullptr</span>;</span><br><span class="line">rank=<span class="built_in">rand</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updsize</span><span class="params">()</span></span>&#123;</span><br><span class="line">size=cnt;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="literal">nullptr</span>)size+=p[<span class="number">0</span>]-&gt;size;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)size+=p[<span class="number">1</span>]-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">rtype</span>&#123;</span><br><span class="line">L=<span class="number">1</span>,R=<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">phtnode* root;</span><br><span class="line"><span class="type">int</span> ttmp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(phtnode*&amp; num,rtype dir)</span></span>&#123;</span><br><span class="line">phtnode* tmp=num-&gt;p[dir];</span><br><span class="line">num-&gt;p[dir]=tmp-&gt;p[!dir];</span><br><span class="line">tmp-&gt;p[!dir]=num;</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();tmp-&gt;<span class="built_in">updsize</span>();</span><br><span class="line">num=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _insert(phtnode*&amp; num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">num=<span class="keyword">new</span> <span class="built_in">phtnode</span>(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val==num-&gt;val)&#123;</span><br><span class="line">num-&gt;size++;</span><br><span class="line">num-&gt;cnt++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&lt;num-&gt;val)&#123;</span><br><span class="line">_insert(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">0</span>]-&gt;rank&lt;num-&gt;rank)&#123;</span><br><span class="line"><span class="built_in">rotate</span>(num,R);</span><br><span class="line">&#125;</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">_insert(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">1</span>]-&gt;rank&lt;num-&gt;rank)&#123;</span><br><span class="line"><span class="built_in">rotate</span>(num,L);</span><br><span class="line">&#125;</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _del(phtnode*&amp; num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="keyword">if</span>(val&gt;num-&gt;val)&#123;</span><br><span class="line">_del(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&lt;num-&gt;val)&#123;</span><br><span class="line">_del(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num-&gt;cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">num-&gt;cnt--;</span><br><span class="line">num-&gt;size--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">char</span> now=<span class="number">0</span>;</span><br><span class="line">now|=(num-&gt;p[<span class="number">0</span>]!=<span class="literal">nullptr</span>);</span><br><span class="line">now|=((num-&gt;p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">phtnode* tmp=num;</span><br><span class="line"><span class="keyword">switch</span>(now)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line"><span class="keyword">delete</span> num;</span><br><span class="line">num=<span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">num=tmp-&gt;p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">num=tmp-&gt;p[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">rtype dir=(num-&gt;p[<span class="number">0</span>]-&gt;rank&lt;num-&gt;p[<span class="number">1</span>]-&gt;rank)?R:L;</span><br><span class="line"><span class="built_in">rotate</span>(num,dir);</span><br><span class="line">_del(num-&gt;p[!dir],val);</span><br><span class="line">num-&gt;<span class="built_in">updsize</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _getrank(phtnode* num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="type">int</span> res=(num-&gt;p[<span class="number">0</span>]==<span class="literal">nullptr</span>)?<span class="number">0</span>:num-&gt;p[<span class="number">0</span>]-&gt;size;</span><br><span class="line"><span class="keyword">if</span>(val==num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&lt;num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">0</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> _getrank(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num-&gt;p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> res+num-&gt;cnt+_getrank(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> num-&gt;size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _getderank(phtnode* num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="type">int</span> res=(num-&gt;p[<span class="number">1</span>]==<span class="literal">nullptr</span>)?<span class="number">0</span>:num-&gt;p[<span class="number">1</span>]-&gt;size;</span><br><span class="line"><span class="keyword">if</span>(val==num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&gt;num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> _getderank(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num-&gt;p[<span class="number">0</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> res+num-&gt;cnt+_getderank(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> num-&gt;size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _getval(phtnode* num,<span class="type">int</span> rank)&#123;</span><br><span class="line"><span class="type">int</span> lesssize=(num-&gt;p[<span class="number">0</span>]==<span class="literal">nullptr</span>)?<span class="number">0</span>:num-&gt;p[<span class="number">0</span>]-&gt;size;</span><br><span class="line"><span class="keyword">if</span>(rank&lt;=lesssize)<span class="keyword">return</span> _getval(num-&gt;p[<span class="number">0</span>],rank);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rank&lt;=lesssize+num-&gt;cnt)<span class="keyword">return</span> num-&gt;val;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> _getval(num-&gt;p[<span class="number">1</span>],rank-lesssize-num-&gt;cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _getprevious(phtnode* num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="keyword">if</span>(val&lt;=num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">0</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> _getprevious(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ttmp=num-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)_getprevious(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">return</span> ttmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _getnext(phtnode* num,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="keyword">if</span>(val&gt;=num-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">1</span>]!=<span class="literal">nullptr</span>)<span class="keyword">return</span> _getnext(num-&gt;p[<span class="number">1</span>],val);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ttmp=num-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(num-&gt;p[<span class="number">0</span>]!=<span class="literal">nullptr</span>)_getnext(num-&gt;p[<span class="number">0</span>],val);</span><br><span class="line"><span class="keyword">return</span> ttmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">treap</span>()&#123;<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));root=<span class="literal">nullptr</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;_insert(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;_del(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getrank</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;<span class="keyword">return</span> _getrank(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getderank</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;<span class="keyword">return</span> _getderank(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getprevious</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;<span class="keyword">return</span> _getprevious(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getnext</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;<span class="keyword">return</span> _getnext(root,val);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getval</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;<span class="keyword">return</span> _getval(root,val);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡树-无旋fhqtreap">平衡树(无旋fhqtreap)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fhqtreap</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,rnd,siz;</span><br><span class="line">T val;</span><br><span class="line">&#125;;</span><br><span class="line">node *dat;</span><br><span class="line"><span class="type">int</span> n,top,root;</span><br><span class="line"><span class="built_in">fhqtreap</span>(<span class="type">int</span> nn=<span class="number">1000010</span>):<span class="built_in">n</span>(nn),<span class="built_in">top</span>(<span class="number">0</span>),<span class="built_in">root</span>(<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">dat=<span class="keyword">new</span> node[nn]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">new_node</span><span class="params">(T val)</span></span>&#123;</span><br><span class="line">++top;</span><br><span class="line">dat[top].l=dat[top].r=<span class="number">0</span>;</span><br><span class="line">dat[top].siz=<span class="number">1</span>;</span><br><span class="line">dat[top].val=val;</span><br><span class="line">dat[top].rnd=<span class="built_in">rand</span>();</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">dat[mod].siz=dat[dat[mod].l].siz+dat[dat[mod].r].siz+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> mod,T val,<span class="type">int</span>&amp; x,<span class="type">int</span>&amp; y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mod==<span class="number">0</span>)&#123;</span><br><span class="line">x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].val&lt;=val)&#123;</span><br><span class="line">x=mod;</span><br><span class="line"><span class="built_in">split</span>(dat[mod].r,val,dat[mod].r,y);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">y=mod;</span><br><span class="line"><span class="built_in">split</span>(dat[mod].l,val,x,dat[mod].l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)<span class="keyword">return</span> (x+y);</span><br><span class="line"><span class="keyword">if</span>(dat[x].rnd&lt;dat[y].rnd)&#123;</span><br><span class="line">dat[x].r=<span class="built_in">merge</span>(dat[x].r,y);</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[y].l=<span class="built_in">merge</span>(x,dat[y].l);</span><br><span class="line"><span class="built_in">push_up</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="built_in">split</span>(root,v,x,y);</span><br><span class="line">z=<span class="built_in">new_node</span>(v);</span><br><span class="line">root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,z),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="built_in">split</span>(root,v,x,z);</span><br><span class="line"><span class="built_in">split</span>(x,v<span class="number">-1</span>,x,y);</span><br><span class="line">y=<span class="built_in">merge</span>(dat[y].l,dat[y].r);</span><br><span class="line">root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">split</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line"><span class="type">int</span> res=dat[x].siz+<span class="number">1</span>;</span><br><span class="line">root=<span class="built_in">merge</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">topk</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> lsz=dat[dat[mod].l].siz;</span><br><span class="line"><span class="keyword">if</span>(k==lsz+<span class="number">1</span>)<span class="keyword">return</span> dat[mod].val;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=lsz)<span class="keyword">return</span> <span class="built_in">topk</span>(dat[mod].l,k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">topk</span>(dat[mod].r,k-lsz<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getpre</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">split</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line">T res=<span class="built_in">topk</span>(x,dat[x].siz);</span><br><span class="line">root=<span class="built_in">merge</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getaft</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">split</span>(root,v,x,y);</span><br><span class="line">T res=<span class="built_in">topk</span>(y,<span class="number">1</span>);</span><br><span class="line">root=<span class="built_in">merge</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串匹配-KMP">字符串匹配 KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getnextt</span><span class="params">(<span class="type">char</span>* b,<span class="type">int</span>* nextt,<span class="type">int</span> lb)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;lb;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j]==b[i])&#123;</span><br><span class="line">nextt[i]=++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">nextt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">j=nextt[j<span class="number">-1</span>];</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kmp</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;* res,<span class="type">char</span>* a,<span class="type">char</span>* b,<span class="type">int</span> la,<span class="type">int</span> lb,<span class="type">int</span>* nextt)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p&lt;la)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[p]==b[q])&#123;</span><br><span class="line">p++,q++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q)&#123;</span><br><span class="line">q=nextt[q<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> p++;</span><br><span class="line"><span class="keyword">if</span>(q==lb)&#123;</span><br><span class="line">res-&gt;<span class="built_in">push_back</span>(p-q+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串哈希UUU">字符串哈希UUU</h2><p>下面给了三个板子.分别是自然溢出哈希,单哈希以及双哈希.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//base: 101 103 131 233</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">strhashe64</span><span class="params">(<span class="type">char</span>* dat,<span class="type">int</span> n,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base=<span class="number">131</span>)</span></span>&#123;</span><br><span class="line"><span class="type">uint64_t</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">res=res*base+dat[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hash:1e16+61</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">strhashmod1</span><span class="params">(<span class="type">char</span>* dat,<span class="type">int</span> n,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base=<span class="number">131</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> mod=<span class="number">10000000000000061</span>)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">res=(res*base+dat[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::pair&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; <span class="title">strhashmod2</span><span class="params">(<span class="type">char</span>* dat,<span class="type">int</span> n,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base=<span class="number">131</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> mod1=<span class="number">10000000000000061</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> mod2=<span class="number">100000000000031</span>)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">res1=(res1*base+dat[i])%mod1;</span><br><span class="line">res2=(res2*base+dat[i])%mod2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;res1,res2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>图论</h1><h2 id="加边-最短路-Dijkstra-缩点-Tarjan-直径-d-割点-割边-点双连通分量">加边 最短路(Dijkstra) 缩点(Tarjan) 直径(d) 割点 割边 点双连通分量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span>&#123;</span><br><span class="line">vector&lt;vector&lt;pair&lt;<span class="type">int</span>,T&gt; &gt; &gt;edge;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">graph</span>(<span class="type">int</span> num=<span class="number">200000</span>):<span class="built_in">n</span>(num+<span class="number">5</span>)&#123;</span><br><span class="line">edge.<span class="built_in">resize</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T val)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(&#123;v,val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddedir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T val)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(&#123;v,val&#125;);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(&#123;u,val&#125;);</span><br><span class="line">&#125;</span><br><span class="line">T* dis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(T* dis,<span class="type">int</span> first,<span class="type">int</span> n)</span></span>&#123;<span class="comment">//对哪个点遍历,多少个点 </span></span><br><span class="line">dis=<span class="keyword">new</span> T[n];</span><br><span class="line"><span class="built_in">fill</span>(dis,dis+n,<span class="number">2147483647</span>);</span><br><span class="line">priority_queue&lt;pair&lt;T,<span class="type">int</span>&gt;,vector&lt;pair&lt;T,<span class="type">int</span>&gt; &gt;,greater&lt;pair&lt;T,<span class="type">int</span>&gt; &gt; &gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,first&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">pair&lt;T,<span class="type">int</span>&gt;qq=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(qq.first&gt;dis[qq.second])<span class="keyword">continue</span>;</span><br><span class="line">dis[qq.second]=qq.first;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[qq.second])&#123;</span><br><span class="line"><span class="keyword">if</span>((qq.first+i.second)&lt;dis[i.first])&#123;</span><br><span class="line">dis[i.first]=qq.first+i.second;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;qq.first+i.second,i.first&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *scc,*sccsize,sc,*dfn,*low,dfntop,*s,*in_stack,tp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">low[num]=dfn[num]=++dfntop;</span><br><span class="line">in_stack[num]=<span class="number">1</span>;</span><br><span class="line">s[++tp]=num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i.first])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i.first);</span><br><span class="line">low[num]=<span class="built_in">min</span>(low[num],low[i.first]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(in_stack[i.first])&#123;</span><br><span class="line">low[num]=<span class="built_in">min</span>(low[num],dfn[i.first]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[num]==low[num])&#123;</span><br><span class="line">++sc;</span><br><span class="line"><span class="keyword">while</span>(s[tp]!=num)&#123;</span><br><span class="line">scc[s[tp]]=sc;</span><br><span class="line">sccsize[sc]++;</span><br><span class="line">in_stack[s[tp]]=<span class="number">0</span>;</span><br><span class="line">--tp;</span><br><span class="line">&#125;</span><br><span class="line">scc[s[tp]]=sc;</span><br><span class="line">sccsize[sc]++;</span><br><span class="line">in_stack[s[tp]]=<span class="number">0</span>;</span><br><span class="line">--tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SCC</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*强连通分量*/</span></span><br><span class="line">scc=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">sccsize=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">dfn=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">low=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">s=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">in_stack=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">sc=<span class="number">0</span>,dfntop=<span class="number">0</span>,tp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T *pval;<span class="comment">/*缩点之后的点权*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SCCpoints</span><span class="params">(graph&amp; io,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="comment">// io.pval=new T[n]&#123;&#125;;</span></span><br><span class="line"><span class="built_in">SCC</span>(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> j:edge[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(scc[i]==scc[j.first])&#123;</span><br><span class="line">io.pval[scc[i]]+=j.second;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">io.<span class="built_in">adddir</span>(i,j.first,j.second,<span class="comment">/*新边权是啥写上*/</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用法: graph&lt;int&gt; ko(114514)</span></span><br><span class="line"><span class="comment">// 存储边权  多少个点</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无权边也来一个.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span>&#123;</span><br><span class="line"><span class="type">int</span> n<span class="comment">/*有多少个点*/</span>,tmp;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;edge;</span><br><span class="line"><span class="built_in">graph</span>(<span class="type">int</span> num=<span class="number">200000</span>):<span class="built_in">n</span>(num+<span class="number">5</span>)&#123;</span><br><span class="line">edge.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adddedir</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">edge[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* d;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ddfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d[v]&gt;d[tmp])tmp=v;</span><br><span class="line"><span class="built_in">ddfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getd</span><span class="params">()</span></span>&#123;<span class="comment">/*get d by dfs*/</span></span><br><span class="line">tmp=<span class="number">-1145141919</span>;</span><br><span class="line">d=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line"><span class="built_in">ddfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">d[tmp]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">ddfs</span>(tmp,<span class="number">0</span>);</span><br><span class="line">tmp=d[tmp];</span><br><span class="line"><span class="keyword">delete</span>[] d;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dpfs</span>(v,u);</span><br><span class="line">tmp=<span class="built_in">max</span>(tmp,d[u]+d[v]+<span class="number">1</span>);</span><br><span class="line">d[u]=<span class="built_in">max</span>(d[u],d[v]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdpd</span><span class="params">(<span class="type">int</span> root=<span class="number">1</span>)</span></span>&#123;<span class="comment">/*get d by dp*/</span></span><br><span class="line">tmp=<span class="number">-1145141919</span>;</span><br><span class="line">d=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line"><span class="built_in">dpfs</span>(root,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">delete</span>[] d;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *scc,*sccsize,sc,*dfn,*low,dfntop,*s,*in_stack,tp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">low[num]=dfn[num]=++dfntop;</span><br><span class="line">in_stack[num]=<span class="number">1</span>;</span><br><span class="line">s[++tp]=num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line">low[num]=<span class="built_in">min</span>(low[num],low[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(in_stack[i])&#123;</span><br><span class="line">low[num]=<span class="built_in">min</span>(low[num],dfn[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[num]==low[num])&#123;</span><br><span class="line">++sc;</span><br><span class="line"><span class="keyword">while</span>(s[tp]!=num)&#123;</span><br><span class="line">scc[s[tp]]=sc;</span><br><span class="line">sccsize[sc]++;</span><br><span class="line">in_stack[s[tp]]=<span class="number">0</span>;</span><br><span class="line">--tp;</span><br><span class="line">&#125;</span><br><span class="line">scc[s[tp]]=sc;</span><br><span class="line">sccsize[sc]++;</span><br><span class="line">in_stack[s[tp]]=<span class="number">0</span>;</span><br><span class="line">--tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SCC</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*强连通分量*/</span></span><br><span class="line">scc=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">sccsize=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">dfn=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">low=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">s=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">in_stack=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">sc=<span class="number">0</span>,dfntop=<span class="number">0</span>,tp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *Cut,*Dfn,*Low,Dfntop;<span class="comment">/*求割点*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> isroot)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> subtree=<span class="number">0</span>;<span class="comment">/*子树有多少个*/</span></span><br><span class="line">Low[num]=Dfn[num]=++Dfntop;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(!Dfn[i])&#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(i,<span class="number">0</span>);</span><br><span class="line">Low[num]=<span class="built_in">min</span>(Low[num],Low[i]);</span><br><span class="line">subtree++;</span><br><span class="line"><span class="keyword">if</span>(Dfn[num]&lt;=Low[i]&amp;&amp;(!isroot))Cut[num]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> Low[num]=<span class="built_in">min</span>(Low[num],Dfn[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isroot&amp;&amp;subtree&gt;=<span class="number">2</span>)Cut[num]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUTpoint</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">Dfn=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">Low=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">Cut=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">Dfntop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!Dfn[i])&#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *CUt,*DFn,*LOw,*_FA,DFntop;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TArjan</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">_FA[num]=fa;</span><br><span class="line">LOw[num]=DFn[num]=++DFntop;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(!DFn[i])&#123;</span><br><span class="line"><span class="built_in">TArjan</span>(i,num);</span><br><span class="line">LOw[num]=<span class="built_in">min</span>(LOw[num],LOw[i]);</span><br><span class="line"><span class="keyword">if</span>(DFn[num]&lt;LOw[i])CUt[i]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(DFn[i]&lt;DFn[num]&amp;&amp;i!=fa)&#123;</span><br><span class="line">LOw[num]=<span class="built_in">min</span>(LOw[num],DFn[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUTedge</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*当CUt[x]为1时,(_FA[x],x)是一条割边*/</span></span><br><span class="line">DFn=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">LOw=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">CUt=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">_FA=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">DFntop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!DFn[i])&#123;</span><br><span class="line"><span class="built_in">TArjan</span>(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;DCCpoints;</span><br><span class="line"><span class="type">int</span> *DCC,DCCtop;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DCCdfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">DCC[num]=DCCtop;</span><br><span class="line">DCCpoints[DCCtop].<span class="built_in">push_back</span>(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> j:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(DCC[j]||(CUt[num]==<span class="number">1</span>&amp;&amp;_FA[num]==j)||(CUt[j]==<span class="number">1</span>&amp;&amp;_FA[j]==num))<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">DCCdfs</span>(j,num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DCCedge</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">DCC=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">DCCpoints.<span class="built_in">resize</span>(n);</span><br><span class="line">DCCtop=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">CUTedge</span>(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;<span class="comment">//两点之间两条边,割一条还剩一条,这样的割边不是割边,要处理掉</span></span><br><span class="line"><span class="keyword">if</span>(CUt[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> tmp=_FA[i],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j:edge[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(j==tmp)cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)CUt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!DCC[i])&#123;</span><br><span class="line">DCCtop++;</span><br><span class="line"><span class="built_in">DCCdfs</span>(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *bccdfn,*bcclow,bcctop,bc;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;BCC;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;st;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bcctarjan</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> subtree=<span class="number">0</span>;</span><br><span class="line">bcclow[num]=bccdfn[num]=++bcctop;</span><br><span class="line">st.<span class="built_in">push</span>(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(!bccdfn[i])&#123;</span><br><span class="line">subtree++;</span><br><span class="line"><span class="built_in">bcctarjan</span>(i,num);</span><br><span class="line">bcclow[num]=<span class="built_in">min</span>(bcclow[num],bcclow[i]);</span><br><span class="line"><span class="keyword">if</span>(bcclow[i]&gt;=bccdfn[num])&#123;</span><br><span class="line">bc++;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">BCC[bc].<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">top</span>()==i)&#123;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">BCC[bc].<span class="built_in">push_back</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i!=fa)&#123;</span><br><span class="line">bcclow[num]=<span class="built_in">min</span>(bcclow[num],bccdfn[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fa==<span class="number">0</span>&amp;&amp;subtree==<span class="number">0</span>)BCC[++bc].<span class="built_in">push_back</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BCCpoint</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">/*点双连通分量*/</span></span><br><span class="line">bcclow=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">bccdfn=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">BCC.<span class="built_in">resize</span>(n);</span><br><span class="line">bcctop=<span class="number">0</span>;</span><br><span class="line">bc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!bccdfn[i])&#123;</span><br><span class="line"><span class="built_in">bcctarjan</span>(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *cens,*cenw,cenn,cenid[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetCen</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">cens[num]=<span class="number">1</span>;cenw[num]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">GetCen</span>(i,num);</span><br><span class="line">cens[num]+=cens[i];</span><br><span class="line">cenw[num]=<span class="built_in">max</span>(cenw[num],cens[i]);</span><br><span class="line">&#125;</span><br><span class="line">cenw[num]=<span class="built_in">max</span>(cenw[num],cenn-cens[num]);</span><br><span class="line"><span class="keyword">if</span>(cenw[num]&lt;=cenn/<span class="number">2</span>)&#123;</span><br><span class="line">cenid[cenid[<span class="number">0</span>]!=<span class="number">0</span>]=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getCent</span><span class="params">(<span class="type">int</span> nn)</span></span>&#123;</span><br><span class="line">cens=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">cenw=<span class="keyword">new</span> <span class="type">int</span>[n]&#123;&#125;;</span><br><span class="line">cenid[<span class="number">0</span>]=cenid[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">cenn=nn;</span><br><span class="line"><span class="built_in">GetCen</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;<span class="comment">//求树的重心(删掉该店整棵树分成若干子树,其中最大的子树最小,平均)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line"><span class="function">T1 <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">u64 *hsh;</span><br><span class="line">pair&lt;u64,u64&gt; *htmp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hdfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> ko,i64 dep)</span></span>&#123;<span class="comment">//树哈希,求出一个数的哈希值</span></span><br><span class="line">cens[num]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==ko)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">hdfs</span>(i,num,dep+<span class="number">1</span>);</span><br><span class="line">cens[num]+=cens[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[num])&#123;</span><br><span class="line"><span class="keyword">if</span>(i==ko)<span class="keyword">continue</span>;</span><br><span class="line">htmp[++top]=&#123;hsh[i],cens[i]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(htmp+<span class="number">1</span>,htmp+<span class="number">1</span>+top);</span><br><span class="line">u64 res=dep*<span class="number">19491001</span>;</span><br><span class="line">dep=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;<span class="comment">//19491001998244353</span></span><br><span class="line">res=(res+htmp[i].first*<span class="built_in">qp</span>(base,dep,mod))%mod;</span><br><span class="line">dep+=htmp[i].second;</span><br><span class="line">&#125;</span><br><span class="line">hsh[num]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;u64,u64&gt; <span class="title">hhash</span><span class="params">(<span class="type">int</span> nn)</span></span>&#123;</span><br><span class="line">htmp=<span class="keyword">new</span> pair&lt;u64,u64&gt;[n];</span><br><span class="line">hsh=<span class="keyword">new</span> u64[n];</span><br><span class="line"><span class="built_in">getCent</span>(nn);</span><br><span class="line"><span class="keyword">if</span>(cenid[<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">hdfs</span>(cenid[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> &#123;hsh[cenid[<span class="number">0</span>]],<span class="number">0</span>&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">hdfs</span>(cenid[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">u64 tmp=hsh[cenid[<span class="number">0</span>]];</span><br><span class="line"><span class="built_in">hdfs</span>(cenid[<span class="number">1</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">u64 ttmp=hsh[cenid[<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;ttmp)<span class="built_in">swap</span>(tmp,ttmp);</span><br><span class="line"><span class="keyword">return</span> &#123;tmp,ttmp&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-SAT">2-SAT</h2><p>给出的是checker以及合法解的输出,使用图论把整张图缩成若干个强连通分量.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ko.scc[i]==ko.scc[i+n])&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ko.scc[i]&gt;ko.scc[i+n])&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;1 &quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;0 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="传递闭包">传递闭包</h2><p>给一张邻接矩阵,计算任意两点是否能够到达,a[i][j]表示这两个点能不能到达.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bitset&lt;110&gt;dat[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">transitiveClosure</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[i][j])&#123;</span><br><span class="line">dat[i]|=dat[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>数学</h1><h2 id="快速幂-龟速乘-qp-qmul-快速乘">快速幂,龟速乘(qp,qmul),快速乘</h2><p>ps:如果希望求负几次方直接反转成 $1/x$ 然后直接反转n即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line"><span class="function">T1 <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">qmul</span><span class="params">(T a,T b,T p)</span></span>&#123;<span class="comment">//a*b对p取模,由于没有int128所以要用快速幂思想解这个问题 </span></span><br><span class="line">T res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(res+a)%p;</span><br><span class="line">a=(a&lt;&lt;<span class="number">1</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qmul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;<span class="comment">//a*b对p取模 </span></span><br><span class="line">a%=p;b%=p;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c=(<span class="type">long</span> <span class="type">double</span>)a*b/p;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=a*b-c*p;</span><br><span class="line"><span class="keyword">if</span>(res&lt;<span class="number">0</span>)res+=p;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(res&gt;=p)res-=p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CRT-exCRT-中国剩余定理-拓展中国剩余定理">CRT exCRT 中国剩余定理 拓展中国剩余定理</h2><p>少板子的Flu是屑…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">exgcd</span><span class="params">(T a,T b,T &amp;x,T &amp;y)</span></span>&#123;<span class="comment">//返回值是gcd </span></span><br><span class="line">T x1=<span class="number">1</span>,x2=<span class="number">0</span>,x3=<span class="number">0</span>,x4=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">T c=a/b;</span><br><span class="line"><span class="built_in">tie</span>(x1,x2,x3,x4,a,b)=<span class="built_in">make_tuple</span>(x3,x4,x1-x3*c,x2-x4*c,b,a-b*c);</span><br><span class="line">&#125;</span><br><span class="line">x=x1,y=x2;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">__int128 <span class="title">CRT</span><span class="params">(T* mmod,T* rres,<span class="type">int</span> n)</span></span>&#123;<span class="comment">//模几,剩几</span></span><br><span class="line">__int128 sum=<span class="number">1</span>,res=<span class="number">0</span>,m,c,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">sum*=mmod[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">m=sum/mmod[i];</span><br><span class="line"><span class="built_in">exgcd</span>(m,(__int128)mmod[i],x,y);</span><br><span class="line">x=(x%sum+sum)%sum;</span><br><span class="line">c=m*x;</span><br><span class="line">res=(res+rres[i]*c)%sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">__int128 <span class="title">exCRT</span><span class="params">(T* mmod,T* rres,<span class="type">int</span> n)</span></span>&#123;<span class="comment">//模几 剩几</span></span><br><span class="line">__int128 tmp=rres[<span class="number">1</span>],ttmp,res=mmod[<span class="number">1</span>],x,y,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ttmp=((mmod[i]-res)%rres[i]+rres[i])%rres[i];</span><br><span class="line">__int128 gg=<span class="built_in">exgcd</span>(tmp,(__int128)rres[i],x,y);</span><br><span class="line">x=ttmp/gg*x%rres[i];</span><br><span class="line">res+=tmp*x;</span><br><span class="line">tmp*=rres[i]/gg;</span><br><span class="line">res=(res+tmp)%tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="离散化">离散化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n);</span><br><span class="line">m=<span class="built_in">unique</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n)-dat<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//m是实际不重合元素个数.</span></span><br><span class="line"><span class="comment">//tmp是每个元素离散化之后的值(排名).</span></span><br><span class="line">tmp=<span class="built_in">upper_bound</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+m,val)-dat<span class="number">-1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组合数-杨辉三角">组合数(杨辉三角)</h2><p>说在前面,Flu的排列组合大的n永远放在前面,这是约定.</p><p>解决模数不是质数的组合数求解情况(没逆元).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> yh[<span class="number">114</span>][<span class="number">114</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">yh[i][<span class="number">1</span>]=yh[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;++j)&#123;</span><br><span class="line">yh[i][j]=(yh[i<span class="number">-1</span>][j]+yh[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> yh[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排列组合数-预处理阶乘">排列组合数(预处理阶乘)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> fac[<span class="number">200010</span>],defac[<span class="number">200010</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=defac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">fac[<span class="number">1</span>]=defac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">fac[i]=(i*fac[i<span class="number">-1</span>])%mod;</span><br><span class="line">defac[i]=<span class="built_in">qp</span>(fac[i],mod<span class="number">-2</span>,mod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m&lt;<span class="number">0</span>||m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n]*defac[m]%mod*defac[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">A</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m&lt;<span class="number">0</span>||m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n]*defac[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排列组合数-直接计算">排列组合数(直接计算)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">A</span><span class="params">(T n,T m,T p)</span></span>&#123;</span><br><span class="line">T  res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(T i=n-m+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">res=res*i%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">C</span><span class="params">(T n,T m,T p)</span></span>&#123;</span><br><span class="line">m=<span class="built_in">min</span>(m,n-m);</span><br><span class="line">T res=<span class="number">1</span>,udd=<span class="number">1</span>,tmp=n-m,x,y;</span><br><span class="line"><span class="keyword">for</span>(T i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">res=res*(i+tmp)%p;</span><br><span class="line">udd=udd*i%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exgcd</span>(udd,p,x,y);</span><br><span class="line">x=(x%p+p)%p;<span class="comment">//x是逆元</span></span><br><span class="line"><span class="keyword">return</span> res*x%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最大公约数-最小公倍数-GCD-LCM">最大公约数,最小公倍数(GCD,LCM)</h2><p>最快的版本.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">stein</span><span class="params">(T x,T y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">T a=y-x;</span><br><span class="line">T b=x-y;</span><br><span class="line"><span class="type">int</span> n=__builtin_ctzll(b);</span><br><span class="line">T s=(x&lt;y?a:b);</span><br><span class="line">T t=(x&lt;y?x:y);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stein</span>(s&gt;&gt;n,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">gcd</span><span class="params">(T x,T y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="type">int</span> n=__builtin_ctzll(x);</span><br><span class="line"><span class="type">int</span> m=__builtin_ctzll(y);</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">stein</span>(x&gt;&gt;n,y&gt;&gt;m)&lt;&lt;(n&lt;m?n:m));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">lcm</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/<span class="built_in">gcd</span>(a,b)*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最好记最好写的版本.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">gcd</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;<span class="comment">//欧几里得算法 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是高精适用的版本,只需要支持判定是不是奇数以及除2的操作和减法即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//优化的更相减损术 </span></span><br><span class="line"><span class="function">T <span class="title">gcd</span><span class="params">(T a,T b)</span></span>&#123;<span class="comment">//a&gt;=b guarantee</span></span><br><span class="line"><span class="keyword">if</span>(a==b)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)&#123;<span class="comment">//a ji</span></span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;<span class="comment">//b ji</span></span><br><span class="line">T tmp=a-b;</span><br><span class="line"><span class="keyword">return</span> tmp&gt;b?<span class="built_in">gcd</span>(tmp,b):<span class="built_in">gcd</span>(b,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(a,b&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;<span class="comment">//b ji</span></span><br><span class="line">T tmp=a&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tmp&gt;b?<span class="built_in">gcd</span>(tmp,b):<span class="built_in">gcd</span>(b,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(a&gt;&gt;<span class="number">1</span>,b&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拓展欧几里得算法-EXGCD">拓展欧几里得算法(EXGCD)</h2><p>常用的迭代版本.(求逆元只要求两数互质就行了,不然逆元不存在也就求不了了,qp求逆元要求mod是质数)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">exgcd</span><span class="params">(T a,T b,T &amp;x,T &amp;y)</span></span>&#123;<span class="comment">//返回值是gcd </span></span><br><span class="line">T x1=<span class="number">1</span>,x2=<span class="number">0</span>,x3=<span class="number">0</span>,x4=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">T c=a/b;</span><br><span class="line"><span class="built_in">tie</span>(x1,x2,x3,x4,a,b)=<span class="built_in">make_tuple</span>(x3,x4,x1-x3*c,x2-x4*c,b,a-b*c);</span><br><span class="line">&#125;</span><br><span class="line">x=x1,y=x2;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很好记的版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(T a,T b,T &amp;x,T &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b)<span class="built_in">exgcd</span>(b,a%b,y,x),y-=a/b*x;</span><br><span class="line"><span class="keyword">else</span> x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Lucas-卢卡斯定理">Lucas(卢卡斯定理)</h2><p>$$\binom{n}{m}\mod p=\binom{\lfloor n/p\rfloor}{\lfloor m/p\rfloor}\binom{n\mod p}{m\mod p}\mod p$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">lucas</span><span class="params">(T n,T m,T p)</span></span>&#123;<span class="comment">//p must be a prime</span></span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C</span>(n%p,m%p,p)*<span class="built_in">lucas</span>(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数论分块">数论分块</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> l=<span class="number">1</span>;r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> l=<span class="number">1</span>;r;l&lt;=<span class="built_in">min</span>(n,m);l=r+<span class="number">1</span>)&#123;</span><br><span class="line">r=<span class="built_in">min</span>(n/(n/l),m/(m/l));</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="欧拉筛">欧拉筛</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span>   vis[<span class="number">1000010</span>];<span class="comment">//存最小质因数,负的表示质数表中的位置(负的)</span></span><br><span class="line"><span class="type">int</span>  prime[<span class="number">100010</span>],primetop=<span class="number">0</span>;<span class="comment">//存质数 </span></span><br><span class="line"><span class="type">short</span>  mu[<span class="number">1000010</span>];<span class="comment">//莫比乌斯函数 </span></span><br><span class="line"><span class="type">int</span>  musu[<span class="number">1000010</span>];<span class="comment">//梅滕斯函数,莫比乌斯前缀和 </span></span><br><span class="line"><span class="type">int</span>   phi[<span class="number">1000010</span>];<span class="comment">//欧拉函数 </span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> phisu[<span class="number">1000010</span>];<span class="comment">//欧拉函数前缀和 </span></span><br><span class="line"><span class="type">int</span> d[<span class="number">1000010</span>];<span class="comment">//存每个数的约数个数 </span></span><br><span class="line"><span class="type">int</span> mnnum[<span class="number">1000010</span>];<span class="comment">//最小质因子出现次数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//[1,n]</span></span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;phisu[<span class="number">1</span>]=<span class="number">1</span>;mu[<span class="number">1</span>]=<span class="number">1</span>;musu[<span class="number">1</span>]=<span class="number">1</span>;d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">vis[i]=-(++primetop);</span><br><span class="line">prime[primetop]=i;</span><br><span class="line">mu[i]=<span class="number">-1</span>;<span class="comment">//</span></span><br><span class="line">phi[i]=i<span class="number">-1</span>;<span class="comment">//</span></span><br><span class="line">d[i]=<span class="number">2</span>;<span class="comment">//</span></span><br><span class="line">mnnum[i]=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=primetop&amp;&amp;i*prime[j]&lt;=n;++j)&#123;</span><br><span class="line">vis[i*prime[j]]=prime[j];</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*prime[j]]=phi[i]*prime[j];<span class="comment">//</span></span><br><span class="line">mnnum[i*prime[j]]=mnnum[i]+<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">d[i*prime[j]]=d[i]/mnnum[i*prime[j]]*(mnnum[i*prime[j]]+<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">mu[i*prime[j]]=-mu[i];<span class="comment">//</span></span><br><span class="line">phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);<span class="comment">//</span></span><br><span class="line">mnnum[i*prime[j]]=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">d[i*prime[j]]=d[i]*<span class="number">2</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">musu[i]=musu[i<span class="number">-1</span>]+mu[i];<span class="comment">//</span></span><br><span class="line">phisu[i]=phisu[i<span class="number">-1</span>]+phi[i];<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DLC:因数分解板子,复杂度 $O(d(n)\log(d(n)))$ ,d(n)表示数的因子,在1e6范围内max(d(n))=240,数据大的情况下也许能打过根号暴力找因子的,但是数据大了欧拉筛就成瓶颈了…<br>返回值不保证递增,结合欧拉筛一起用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> ddivtop;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;ddiv;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divdfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; res,<span class="type">int</span> num,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;=ddivtop)&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=ddiv[num].first;++i)&#123;</span><br><span class="line"><span class="built_in">divdfs</span>(res,num+<span class="number">1</span>,val);</span><br><span class="line">val*=ddiv[num].second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">divsor</span>(<span class="type">int</span> num)&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[num]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">mp[prime[-vis[num]]]++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">mp[vis[num]]++;</span><br><span class="line">num/=vis[num];</span><br><span class="line">&#125;</span><br><span class="line">ddiv.<span class="built_in">clear</span>();ddivtop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line">ddiv.<span class="built_in">push_back</span>(&#123;i.second,i.first&#125;);</span><br><span class="line">ddivtop++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">divdfs</span>(res,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="杜教筛-S-sieve">杜教筛(S_sieve)</h2><p>建立在欧拉筛的基础上,算是一个插件(?).<br>使用前需先使用欧拉筛筛到 <code>mxxn</code> 的范围,然后再进行单点求积性函数前缀和.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mxxn=<span class="number">1000000</span>;</span><br><span class="line">unordered_map&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt;_S_mu;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">S_mu</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=mxxn)<span class="keyword">return</span> musu[n];</span><br><span class="line"><span class="keyword">if</span>(_S_mu[n]!=<span class="number">0</span>)<span class="keyword">return</span> _S_mu[n];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> l=<span class="number">2</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">res-=<span class="built_in">S_mu</span>(n/l)*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _S_mu[n]=res;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;_S_phi;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">S_phi</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=mxxn)<span class="keyword">return</span> phisu[n];</span><br><span class="line"><span class="keyword">if</span>(_S_phi[n]!=<span class="number">0</span>)<span class="keyword">return</span> _S_phi[n];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">res=(n&amp;<span class="number">1</span>)?((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)*n:(n&gt;&gt;<span class="number">1</span>)*(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> l=<span class="number">2</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">res-=<span class="built_in">S_phi</span>(n/l)*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _S_phi[n]=res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单点求phi">单点求phi</h2><p>复杂度O(logn)(其实你可以用两次杜教筛解决一切问题…).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">phi</span><span class="params">(T n)</span></span>&#123;</span><br><span class="line">T res=n;</span><br><span class="line"><span class="keyword">for</span>(T i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)res=res/i*(i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)n/=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (n!=<span class="number">1</span>)?(res/n*(n<span class="number">-1</span>)):(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="BSGS-exBSGS-大步小步">BSGS(exBSGS)大步小步</h2><p>求形如下面的式子.(叫做离散对数同余方程)<br>$$a^x\equiv n\mod p$$<br>的式子,其中 $\gcd(a,p)=1$ 时使用BSGS即可,否则使用exBSGS,无解输出 <code>-1</code> ,复杂度 $O(\sqrt p)$ ,常数大一点,因为用了umap</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line"><span class="function">T1 <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;u64,u64&gt;bsgsmp;</span><br><span class="line"><span class="function">u64 <span class="title">BSGS</span><span class="params">(u64 a,u64 n,u64 p,u64 ad=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">bsgsmp.<span class="built_in">clear</span>();</span><br><span class="line">u64 m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line"><span class="keyword">for</span>(u64 k=<span class="number">0</span>,val=n;k&lt;m;++k,val=val*a%p)&#123;</span><br><span class="line">bsgsmp[val]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(u64 i=<span class="number">0</span>,tmp=<span class="built_in">qp</span>(a,m,p),val=ad;i&lt;=m;++i,val=val*tmp%p)&#123;</span><br><span class="line"><span class="keyword">if</span>(bsgsmp.<span class="built_in">find</span>(val)!=bsgsmp.<span class="built_in">end</span>()&amp;&amp;(i*m)&gt;=bsgsmp[val])&#123;</span><br><span class="line"><span class="keyword">return</span> i*m-bsgsmp[val];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//无解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">exBSGS</span><span class="params">(u64 a,u64 n,u64 p)</span></span>&#123;</span><br><span class="line">a%=p;n%=p;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||p==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">u64 cnt=<span class="number">0</span>,gg,curd=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((gg=__gcd(a,p))!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%gg!=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">cnt++;n/=gg;p/=gg;</span><br><span class="line">curd=(curd*a/gg)%p;</span><br><span class="line"><span class="keyword">if</span>(curd==n)<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">u64 res=<span class="built_in">BSGS</span>(a,n,p,curd);</span><br><span class="line"><span class="keyword">if</span>(res==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> res+cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二次剩余">二次剩余</h2><p>求解形如 $x^2\equiv n\mod p$ 的式子.其中,p是奇质数,必须读入全局变量,程序将从小到大返回两个值代表程序的两个解.(n=0时只有0一个解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sq,p;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ccomplex</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> real,imag;</span><br><span class="line"><span class="built_in">ccomplex</span>(<span class="type">long</span> <span class="type">long</span> a=<span class="number">0</span>,<span class="type">long</span> <span class="type">long</span> b=<span class="number">0</span>):<span class="built_in">real</span>(a),<span class="built_in">imag</span>(b)&#123;&#125;</span><br><span class="line">ccomplex <span class="keyword">operator</span> *(<span class="type">const</span> ccomplex&amp; io)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ccomplex&#123;(real*io.real%p+sq*imag%p*io.imag%p+p)%p,(imag*io.real%p+real*io.imag%p+p)%p&#125;;</span><br><span class="line">&#125;</span><br><span class="line">ccomplex <span class="keyword">operator</span> %(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; io)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ccomplex&#123;real%io,imag%io&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po)</span></span>&#123;</span><br><span class="line"><span class="function">T1 <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt;<span class="built_in">Cipolla</span>(<span class="type">long</span> <span class="type">long</span> n)&#123;</span><br><span class="line">n%=p;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">qp</span>(n,(p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>)==(p<span class="number">-1</span>))<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res1=<span class="number">-1</span>,res2=<span class="number">-1</span>,a;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">a=<span class="built_in">rand</span>()%p;</span><br><span class="line">sq=(a*a%p-n+p)%p;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">qp</span>(sq,(p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>)==(p<span class="number">-1</span>))<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res1=<span class="built_in">qp</span>(<span class="built_in">ccomplex</span>(a,<span class="number">1</span>),(p+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>).real;</span><br><span class="line">res2=p-res1;</span><br><span class="line"><span class="keyword">return</span> (res1&gt;res2)?<span class="built_in">pair</span>&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt;(res2,res1):<span class="built_in">pair</span>&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt;(res1,res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拉格朗日插值UUU">拉格朗日插值UUU</h2><h2 id="PollardRho-PR-Pollard-Rho-质因数分解">PollardRho(PR,Pollard_Rho)质因数分解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> decompos&#123;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Number</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="keyword">return</span> (a+<span class="built_in">rng</span>()%(b-a+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">stein</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a=y-x;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> b=x-y;</span><br><span class="line"><span class="type">int</span> n=__builtin_ctzll(b);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s=(x&lt;y?a:b);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> t=(x&lt;y?x:y);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stein</span>(s&gt;&gt;n,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gcd</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="type">int</span> n=__builtin_ctzll(x);</span><br><span class="line"><span class="type">int</span> m=__builtin_ctzll(y);</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">stein</span>(x&gt;&gt;n,y&gt;&gt;m)&lt;&lt;(n&lt;m?n:m));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> limit=<span class="number">2147483648</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;small=&#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">61</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;large=&#123;<span class="number">2</span>,<span class="number">325</span>,<span class="number">9375</span>,<span class="number">28178</span>,<span class="number">450775</span>,<span class="number">9780504</span>,<span class="number">1795265022</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">qp</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> m)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)res=((<span class="type">unsigned</span> __int128)res*x)%m;</span><br><span class="line">x=((<span class="type">unsigned</span> __int128)x*x)%m;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isComposite</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> d,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x=<span class="built_in">qp</span>(a,d,n);</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(s--)&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=((<span class="type">unsigned</span> __int128)x*x)%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;bases=(n&lt;limit?small:large);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(bases.<span class="built_in">begin</span>(),bases.<span class="built_in">end</span>(),n)!=bases.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p:bases)</span><br><span class="line"><span class="keyword">if</span>(n%p==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s=__builtin_ctzll(n<span class="number">-1</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> d=(n<span class="number">-1</span>)&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> base:bases)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isComposite</span>(base,d,n,s))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Montgomery</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Montgomery</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n):<span class="built_in">m</span>(n),<span class="built_in">r</span>(n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">r*=<span class="number">2</span>-m*r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">fma</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> b,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> c)</span><span class="type">const</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> __int128 d=(<span class="type">unsigned</span> __int128)(a)*b;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> e=c+m+(d&gt;&gt;<span class="number">64</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> f=(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(d)*r;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> g=((<span class="type">unsigned</span> __int128)(f)*m)&gt;&gt;<span class="number">64</span>;</span><br><span class="line"><span class="keyword">return</span> (e-g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">mul</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> b)</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">fma</span>(a,b,<span class="number">0</span>);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">PollardRho</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="function">Montgomery <span class="title">m</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> c1=<span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> c2=<span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> M=<span class="number">512</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> w1=<span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> w2=<span class="number">2</span>;</span><br><span class="line">retry:</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> z1=w1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> z2=w2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> k=M;;k &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x1=z1+n;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x2=z2+n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> j=<span class="number">0</span>;j&lt;k;j+=M)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y1=z1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y2=z2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> q1=<span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> q2=<span class="number">2</span>;</span><br><span class="line">z1=m.<span class="built_in">fma</span>(z1,z1,c1);</span><br><span class="line">z2=m.<span class="built_in">fma</span>(z2,z2,c2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> t1=x1-z1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> t2=x2-z2;</span><br><span class="line">z1=m.<span class="built_in">fma</span>(z1,z1,c1);</span><br><span class="line">z2=m.<span class="built_in">fma</span>(z2,z2,c2);</span><br><span class="line">q1=m.<span class="built_in">mul</span>(q1,t1);</span><br><span class="line">q2=m.<span class="built_in">mul</span>(q2,t2);</span><br><span class="line">&#125;</span><br><span class="line">q1=m.<span class="built_in">mul</span>(q1,x1-z1);</span><br><span class="line">q2=m.<span class="built_in">mul</span>(q2,x2-z2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> q3=m.<span class="built_in">mul</span>(q1,q2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> g3=<span class="built_in">gcd</span>(n,q3);</span><br><span class="line"><span class="keyword">if</span>(g3==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(g3!=n)<span class="keyword">return</span> g3;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> g1=<span class="built_in">gcd</span>(n,q1);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> g2=<span class="built_in">gcd</span>(n,q2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> c=(g1!=<span class="number">1</span>?c1:c2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x=(g1!=<span class="number">1</span>?x1:x2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> z=(g1!=<span class="number">1</span>?y1:y2);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> g=(g1!=<span class="number">1</span>?g1:g2);</span><br><span class="line"><span class="keyword">if</span>(g==n)&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">z=m.<span class="built_in">fma</span>(z,z,c);</span><br><span class="line">g=<span class="built_in">gcd</span>(n,x-z);</span><br><span class="line">&#125;<span class="keyword">while</span>(g==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(g!=n)<span class="keyword">return</span> g;</span><br><span class="line">w1+=<span class="number">2</span>;</span><br><span class="line">w2+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">goto</span> retry;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">factorize</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n,vector&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;&amp; res)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isPrime</span>(n))&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> p=<span class="built_in">PollardRho</span>(n);</span><br><span class="line"><span class="built_in">factorize</span>(p,res);</span><br><span class="line"><span class="built_in">factorize</span>(n/p,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用法:使用factorize(数,接受答案的vec)进行一个数的分解,返回一个数的所有不重因子(记得排序)别的函数都不用管 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速傅里叶变换-FFT">快速傅里叶变换(FFT)</h2><p>用于解决多项式快速乘法问题…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cp complex<span class="string">&lt;double&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">double</span> <span class="title">pi</span><span class="params">(acos(<span class="number">-1</span>))</span></span>;</span><br><span class="line"><span class="type">int</span> rev[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,lim=<span class="number">1</span>;<span class="comment">/*n是数列长度,k是log(s),s是答案的最长长2*n-1*/</span></span><br><span class="line"><span class="keyword">while</span>(lim&lt;n)k++,lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++)&#123;<span class="comment">//生成旋转交换数列 </span></span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim;<span class="comment">//这个是紧接着进行FFT的填的范围[0,lim)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cp* a,<span class="type">int</span> n,<span class="type">int</span> flag)</span></span>&#123;<span class="comment">//区间[0,n) </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">1</span>;h&lt;n;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">cp wn=<span class="built_in">exp</span>(<span class="built_in">cp</span>(<span class="number">0</span>,flag*pi/h));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(h&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line"><span class="function">cp <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;j+h;k++)&#123;</span><br><span class="line"><span class="built_in">tie</span>(a[k],a[k+h])=<span class="built_in">make_tuple</span>(a[k]+w*a[k+h],a[k]-w*a[k+h]);</span><br><span class="line">w*=wn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">-1</span>)&#123;<span class="comment">//IFFT</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[i]/=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">gt</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="type">long</span> <span class="type">long</span>)(io+<span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">gt</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((__int128)(io+<span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getres</span><span class="params">(cp* res,<span class="type">int</span>* rres)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(rres,<span class="number">0</span>,<span class="built_in">sizeof</span>(rres));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)&#123;</span><br><span class="line">rres[i]+=res[i].<span class="built_in">real</span>()+<span class="number">0.5</span>;</span><br><span class="line">rres[i+<span class="number">1</span>]+=rres[i]/<span class="number">10</span>;</span><br><span class="line">rres[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=lim<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,rres[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rres[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">ff=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,rres[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速数论变换-NTT">快速数论变换(NTT)</h2><p>使用逆元代换上式的复数和一堆奇奇怪怪的东西得到这个…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rev[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,lim=<span class="number">1</span>;<span class="comment">/*n是数列长度,k是log(s),s是答案的最长长2*n-1*/</span></span><br><span class="line"><span class="keyword">while</span>(lim&lt;(n&lt;&lt;<span class="number">1</span>))k++,lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++)&#123;<span class="comment">//生成旋转交换数列 </span></span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim;<span class="comment">//这个是紧接着进行ntt的填的范围[0,lim)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> ord=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n,<span class="type">int</span> flag)</span></span>&#123;<span class="comment">//[0,n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[i]&lt;i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">2</span>;h&lt;=n;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> k=h&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> gn=<span class="built_in">qp</span>((<span class="type">long</span> <span class="type">long</span>)ord,(mod<span class="number">-1</span>)/h,mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=h)&#123;</span><br><span class="line"><span class="type">int</span> g=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;++j,g=<span class="number">1LL</span>*g*gn%mod)&#123;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">1LL</span>*a[i+j+k]*g%mod;</span><br><span class="line">a[i+j+k]=(a[i+j]-tmp+mod)%mod;</span><br><span class="line">a[i+j]=(a[i+j]+tmp)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">-1</span>)&#123;<span class="comment">//FNTT</span></span><br><span class="line"><span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line"><span class="type">int</span> inv=<span class="built_in">qp</span>((<span class="type">long</span> <span class="type">long</span>)n,mod<span class="number">-2</span>,mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[i]=<span class="number">1LL</span>*a[i]*inv%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getres</span><span class="params">(<span class="type">int</span>* cc)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(cc[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">cc[i+<span class="number">1</span>]+=cc[i]/<span class="number">10</span>;</span><br><span class="line">cc[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">1</span>)&#123;</span><br><span class="line">fout&lt;&lt;cc[i];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cc[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">fout&lt;&lt;cc[i];</span><br><span class="line">ff=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)fout&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MTT-任意模数卷积">MTT 任意模数卷积</h2><p>模数可以不是质数.</p><p>经测试不能通过 <code>FFT-killer</code> 的数据,但是洛谷的板子题能过.这是分拆FFT的版本,下面还会有三模NTT的版本.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cp complex<span class="string">&lt;long double&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxx 1500010</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> pi=(<span class="built_in">acos</span>(<span class="number">-1</span>));</span><br><span class="line"><span class="type">int</span> rev[mxx];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,lim=<span class="number">1</span>;<span class="comment">/*n是数列长度,k是log(s),s是答案的最长长2*n-1*/</span></span><br><span class="line"><span class="keyword">while</span>(lim&lt;n)k++,lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++)&#123;<span class="comment">//生成旋转交换数列 </span></span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim;<span class="comment">//这个是紧接着进行FFT的填的范围[0,lim)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cp* a,<span class="type">int</span> n,<span class="type">int</span> flag)</span></span>&#123;<span class="comment">//区间[0,n) </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">1</span>;h&lt;n;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">cp wn=<span class="built_in">exp</span>(<span class="built_in">cp</span>(<span class="number">0</span>,flag*pi/h));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(h&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line"><span class="function">cp <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;j+h;k++)&#123;</span><br><span class="line"><span class="built_in">tie</span>(a[k],a[k+h])=<span class="built_in">make_tuple</span>(a[k]+w*a[k+h],a[k]-w*a[k+h]);</span><br><span class="line">w*=wn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">-1</span>)&#123;<span class="comment">//IFFT</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[i]/=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cceil</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="type">long</span> <span class="type">long</span>)(num+<span class="number">0.5</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">gt</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="type">long</span> <span class="type">long</span>)(io+<span class="number">0.5</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">gt</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((__int128)(io+<span class="number">0.5</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MTT</span><span class="params">(<span class="type">long</span> <span class="type">long</span>* a,<span class="type">long</span> <span class="type">long</span>* b,<span class="type">long</span> <span class="type">long</span>* res,<span class="type">int</span> la,<span class="type">int</span> lb)</span></span>&#123;<span class="comment">//[0,la) [0,lb)</span></span><br><span class="line"><span class="type">int</span> lim=<span class="built_in">init</span>(la+lb<span class="number">-1</span>);</span><br><span class="line"><span class="type">static</span> cp f[<span class="number">1500010</span>],g[<span class="number">1500010</span>],h[<span class="number">1500010</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;la;++i)&#123;</span><br><span class="line">f[i]=<span class="built_in">complex</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;(a[i]&amp;<span class="number">32767</span>,<span class="number">0</span>);</span><br><span class="line">g[i]=<span class="built_in">complex</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;(a[i]&gt;&gt;<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lb;++i)&#123;</span><br><span class="line">h[i]=<span class="built_in">complex</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;(b[i]&amp;<span class="number">32767</span>,b[i]&gt;&gt;<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FFT</span>(f,lim,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(g,lim,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(h,lim,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)&#123;</span><br><span class="line">f[i]=(f[i]*h[i]);</span><br><span class="line">g[i]=(g[i]*h[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FFT</span>(f,lim,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(g,lim,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)&#123;</span><br><span class="line">res[i]=(<span class="built_in">cceil</span>(f[i].<span class="built_in">real</span>())+</span><br><span class="line">   ((<span class="built_in">cceil</span>(g[i].<span class="built_in">real</span>()+<span class="built_in">cceil</span>(f[i].<span class="built_in">imag</span>())))&lt;&lt;<span class="number">15</span>)+</span><br><span class="line">   (<span class="built_in">cceil</span>(g[i].<span class="built_in">imag</span>())&lt;&lt;<span class="number">30</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)&#123;<span class="comment">//复原</span></span><br><span class="line">f[i]=g[i]=h[i]=<span class="built_in">complex</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FWT-快速沃尔什变换">FWT 快速沃尔什变换</h2><p>求解 $C_i=\sum_{j\oplus k=i}A_j\times B_k$ 的问题,其中 $\oplus$ 可代表 <code>|</code>或 <code>&amp;</code>与 <code>^</code>抑或运算,注意元素有.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line"><span class="function">T1 <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lim,inv2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_or</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//[0,2^n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;lim;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=p)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">a[i+j+k]=(a[j+k]+a[i+j+k])%mod;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+j+k]=(a[i+j+k]+mod-a[j+k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_and</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//[0,2^n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;lim;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=p)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">a[j+k]=(a[j+k]+a[i+j+k])%mod;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[j+k]=(a[j+k]+mod-a[i+j+k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_xor</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//[0,2^n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;lim;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=p)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line"><span class="built_in">tie</span>(a[j+k],a[i+j+k])=<span class="built_in">make_tuple</span>((a[j+k]+a[i+j+k])%mod,(mod+a[j+k]-a[i+j+k])%mod);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">-1</span>)</span><br><span class="line">a[j+k]=a[j+k]*inv2%mod,a[i+j+k]=a[i+j+k]*inv2%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FST-子集卷积">FST 子集卷积</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> da[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],db[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">21</span>][<span class="number">1</span>&lt;&lt;<span class="number">21</span>],g[<span class="number">21</span>][<span class="number">1</span>&lt;&lt;<span class="number">21</span>],h[<span class="number">21</span>][<span class="number">1</span>&lt;&lt;<span class="number">21</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,res;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1000000009</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_or</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//[0,2^n)</span></span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;m;j+=p)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line">a[i+j+k]=(a[j+k]+a[i+j+k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;m;j+=p)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line">a[i+j+k]=(a[i+j+k]+mod-a[j+k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fin&gt;&gt;n;</span><br><span class="line">m=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">fin&gt;&gt;da[i];</span><br><span class="line">f[__builtin_popcount(i)][i]=da[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">fin&gt;&gt;db[i];</span><br><span class="line">g[__builtin_popcount(i)][i]=db[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">FWT_or</span>(f[i],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FWT_or</span>(g[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;m;++k)&#123;</span><br><span class="line">h[i][k]=(h[i][k]+<span class="number">1LL</span>*f[j][k]*g[i-j][k]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">FWT_or</span>(h[i],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">fout&lt;&lt;h[__builtin_popcount(i)][i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多项式求乘法逆-多项式求逆-INV">多项式求乘法逆 多项式求逆 INV</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">qp</span><span class="params">(T1 b,T2 po,T3 p)</span></span>&#123;</span><br><span class="line">T1 res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(po&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(po&amp;<span class="number">1</span>)</span><br><span class="line">res=res*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">po&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rev[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,lim=<span class="number">1</span>;<span class="comment">/*n是数列长度,k是log(s),s是答案的最长长度,2*n-1*/</span></span><br><span class="line"><span class="keyword">while</span>(lim&lt;(n&lt;&lt;<span class="number">1</span>))k++,lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++)&#123;<span class="comment">//生成旋转交换数列 </span></span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> ord=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">long</span> <span class="type">long</span>* a,<span class="type">int</span> n,<span class="type">int</span> flag)</span></span>&#123;<span class="comment">//[0,n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[i]&lt;i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">2</span>;h&lt;=n;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> k=h&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> gn=<span class="built_in">qp</span>((<span class="type">long</span> <span class="type">long</span>)ord,(mod<span class="number">-1</span>)/h,mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=h)&#123;</span><br><span class="line"><span class="type">int</span> g=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;++j,g=<span class="number">1LL</span>*g*gn%mod)&#123;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">1LL</span>*a[i+j+k]*g%mod;</span><br><span class="line">a[i+j+k]=(a[i+j]-tmp+mod)%mod;</span><br><span class="line">a[i+j]=(a[i+j]+tmp)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">-1</span>)&#123;<span class="comment">//FNTT</span></span><br><span class="line"><span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line"><span class="type">int</span> inv=<span class="built_in">qp</span>((<span class="type">long</span> <span class="type">long</span>)n,mod<span class="number">-2</span>,mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[i]=<span class="number">1LL</span>*a[i]*inv%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*        原函数        结果          辅助数组       [0,len)*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">INV</span><span class="params">(<span class="type">long</span> <span class="type">long</span>* a,<span class="type">long</span> <span class="type">long</span>* b,<span class="type">long</span> <span class="type">long</span>* tmp,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">b[<span class="number">0</span>]=<span class="built_in">qp</span>(a[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">INV</span>(a,b,tmp,(len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> p=<span class="built_in">init</span>(len);</span><br><span class="line"><span class="built_in">copy</span>(a,a+len,tmp);</span><br><span class="line"><span class="built_in">fill</span>(tmp+len,tmp+p,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">NTT</span>(tmp,p,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">NTT</span>(b,p,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;++i)&#123;</span><br><span class="line">b[i]=(<span class="number">2</span>-b[i]*tmp[i]%mod+mod)%mod*b[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NTT</span>(b,p,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">fill</span>(b+len,b+p,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线性基">线性基</h2><p>支持插入元素(返回能不能插进去),查询所有数的最大抑或最小抑或第k小抑或.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">basis</span>&#123;</span><br><span class="line">__int128 *dat,*tmp;</span><br><span class="line"><span class="type">int</span> len,flag;<span class="comment">/*有效长度,即logn长度,能不能表示0*/</span></span><br><span class="line"><span class="built_in">basis</span>(<span class="type">int</span> llen=<span class="number">64</span>):<span class="built_in">len</span>(llen),<span class="built_in">flag</span>(<span class="number">0</span>)&#123;</span><br><span class="line">dat=<span class="keyword">new</span> __int128[len]&#123;&#125;;</span><br><span class="line">tmp=<span class="keyword">new</span> __int128[len]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">insert</span><span class="params">(__int128 x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">x^=dat[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[i]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">/*没有插进去*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">getmin</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[i]!=<span class="number">0</span>)<span class="keyword">return</span> dat[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0x0d000721</span>;<span class="comment">/*理论上这个值不会出现*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">getmax</span><span class="params">()</span></span>&#123;</span><br><span class="line">__int128 res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">res=<span class="built_in">max</span>(res,res^dat[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">getkmin</span><span class="params">(__int128 k)</span></span>&#123;</span><br><span class="line">__int128 res=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">k-=flag;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>((dat[i]&gt;&gt;j)&amp;<span class="number">1</span>)dat[i]^=dat[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dat[i]!=<span class="number">0</span>)tmp[cnt++]=dat[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=(<span class="number">1</span>&lt;&lt;cnt))<span class="keyword">return</span> <span class="number">0x0d000721</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>((k&gt;&gt;i)&amp;<span class="number">1</span>)res^=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模拟退火-SA">模拟退火(SA)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">SAcheck</span><span class="params">(<span class="type">double</span> v)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">SA</span><span class="params">(<span class="type">double</span> rres,<span class="type">double</span> t=<span class="number">3000</span>,<span class="type">double</span> EPS=<span class="number">1e-14</span>,<span class="type">double</span> down=<span class="number">0.996</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="type">double</span> res=<span class="built_in">SAcheck</span>(rres);</span><br><span class="line"><span class="keyword">while</span>(t&gt;EPS)&#123;</span><br><span class="line"><span class="type">double</span> eres=rres+t*((<span class="built_in">rand</span>()&lt;&lt;<span class="number">1</span>)-RAND_MAX);<span class="comment">//新随机答案</span></span><br><span class="line"><span class="type">double</span> tmp=<span class="built_in">SAcheck</span>(eres);</span><br><span class="line"><span class="type">double</span> de=tmp-res;</span><br><span class="line"><span class="keyword">if</span>(de&lt;<span class="number">0</span>)&#123;</span><br><span class="line">res=tmp;</span><br><span class="line">rres=eres;<span class="comment">//答案生成器</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-de/t)*RAND_MAX&gt;<span class="built_in">rand</span>())&#123;</span><br><span class="line">rres=eres;</span><br><span class="line">&#125;</span><br><span class="line">t*=down;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>计算几何</h1><h2 id="直角坐标转极坐标">直角坐标转极坐标</h2><p>下面的板子只会返回一个角度,范围是 $[0,2\pi]$ .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> pi=<span class="built_in">acos</span>((<span class="type">long</span> <span class="type">double</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">ang</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x,<span class="type">long</span> <span class="type">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">atan</span>(y/x);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*pi-<span class="built_in">atan</span>(-y/x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> pi-<span class="built_in">atan</span>(-y/x);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> pi+<span class="built_in">atan</span>(y/x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>)<span class="built_in">return</span> (y&gt;<span class="number">0</span>)?(pi/<span class="number">2</span>):(pi*<span class="number">3</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正在研发中…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="built_in">point</span>(<span class="type">double</span> a=<span class="number">0</span>,<span class="type">double</span> b=<span class="number">0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line"><span class="type">char</span> <span class="keyword">operator</span>&lt;(point io)&#123;</span><br><span class="line"><span class="keyword">return</span> (x==io.x)?(y&lt;io.y):(x&lt;io.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(point io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((io.y-y)*(io.y-y)+(io.x-x)*(io.x-x));</span><br><span class="line">&#125;</span><br><span class="line">point <span class="keyword">operator</span>-(point io)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x-io.x,y-io.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line">fout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span>&#123;</span><br><span class="line">point p;</span><br><span class="line"><span class="type">double</span> r;</span><br><span class="line"><span class="built_in">circle</span>(<span class="type">double</span> a=<span class="number">0</span>,<span class="type">double</span> b=<span class="number">0</span>,<span class="type">double</span> c=<span class="number">0</span>):<span class="built_in">p</span>(a,b),<span class="built_in">r</span>(c)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isincircle</span><span class="params">(point io)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> tmp=p.<span class="built_in">dis</span>(io)-r;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//在圆上</span></span><br><span class="line"><span class="keyword">if</span>(tmp&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//在圆内</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//在园外</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">direct</span>&#123;</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="built_in">direct</span>(<span class="type">double</span> a=<span class="number">0</span>,<span class="type">double</span> b=<span class="number">0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line"><span class="built_in">direct</span>(point a,point b):<span class="built_in">x</span>(b.x-a.x),<span class="built_in">y</span>(b.y-a.y)&#123;&#125;<span class="comment">//a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">xmul</span><span class="params">(direct io)</span></span>&#123;<span class="comment">//正值代表逆时针方向,负值代表顺时针方向,0代表共线</span></span><br><span class="line"><span class="keyword">return</span> x*io.y-y*io.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dotmul</span><span class="params">(direct io)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*io.x+y*io.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">direct <span class="title">inv</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;-x,-y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">lenth</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">xmul</span><span class="params">(point a,point b,point c,point d)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">direct</span>(a,b).<span class="built_in">xmul</span>(&#123;c,d&#125;);</span><br><span class="line">&#125;</span><br><span class="line">point dat[<span class="number">400010</span>];</span><br><span class="line"><span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">AndrewHull</span><span class="params">(point* dat,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n);</span><br><span class="line"><span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> stac[n+<span class="number">3</span>]&#123;&#125;,top=<span class="number">0</span>;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">stac[++top]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="type">double</span> tmp=<span class="built_in">xmul</span>(dat[stac[top<span class="number">-1</span>]],dat[stac[top]],dat[stac[top]],dat[i]);</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;<span class="number">0</span>)top--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">stac[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</span><br><span class="line"><span class="comment">//在这里求出下凸包并且计算距离,do something</span></span><br><span class="line">res+=dat[stac[i]].<span class="built_in">dis</span>(dat[stac[i+<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">stac[++top]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="type">double</span> tmp=<span class="built_in">xmul</span>(dat[stac[top<span class="number">-1</span>]],dat[stac[top]],dat[stac[top]],dat[i]);</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;<span class="number">0</span>)top--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">stac[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</span><br><span class="line"><span class="comment">//在这里求出上凸包并计算距离,do something</span></span><br><span class="line">res+=dat[stac[i]].<span class="built_in">dis</span>(dat[stac[i+<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="扫描线">扫描线</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000010</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mxxn 2000000</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtreenode</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">int</span> lazy;<span class="comment">//区间被覆盖的厚度</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val,mxx;<span class="comment">//当前和,最大和</span></span><br><span class="line">&#125;;</span><br><span class="line">segtreenode dat[mxxn];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].lazy&gt;<span class="number">0</span>)&#123;</span><br><span class="line">dat[mod].val=dat[mod].mxx;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[mod].val=dat[dat[mod].l].val+dat[dat[mod].r].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aadd</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line">dat[mod].lazy++;</span><br><span class="line">dat[mod].val=dat[mod].mxx;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">aadd</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">aadd</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ddec</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].lazy&gt;<span class="number">0</span>)&#123;</span><br><span class="line">dat[mod].lazy--;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].lazy==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dat[mod].val=dat[mod].mxx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">ddec</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="built_in">ddec</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">ddec</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">ddec</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qquery</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dat[<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bbuild</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建空树，返回根节点 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[++top].val=<span class="number">0</span>;</span><br><span class="line">dat[top].mxx=a[l];</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=++top;</span><br><span class="line">dat[tmp].l=<span class="built_in">bbuild</span>(l,mid);</span><br><span class="line">dat[tmp].r=<span class="built_in">bbuild</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">dat[tmp].mxx=dat[dat[tmp].l].mxx+dat[dat[tmp].r].mxx;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">segtree ko;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l,r,ver,val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> node&amp; a,<span class="type">const</span> node&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.ver==b.ver)<span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line"><span class="keyword">return</span> a.ver&lt;b.ver;</span><br><span class="line">&#125;</span><br><span class="line">node ddat[<span class="number">1000010</span>];</span><br><span class="line"><span class="type">int</span> dat[<span class="number">1000010</span>],top=<span class="number">0</span>,ttop=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> l,r,u,d;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">fin&gt;&gt;l&gt;&gt;u&gt;&gt;r&gt;&gt;d;</span><br><span class="line"><span class="keyword">if</span>(r&lt;l)<span class="built_in">swap</span>(r,l);</span><br><span class="line"><span class="keyword">if</span>(u&lt;d)<span class="built_in">swap</span>(u,d);</span><br><span class="line">ddat[++ttop]=&#123;l,r,d,<span class="number">1</span>&#125;;</span><br><span class="line">ddat[++ttop]=&#123;l,r,u,<span class="number">-1</span>&#125;;</span><br><span class="line">dat[++top]=l;</span><br><span class="line">dat[++top]=r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+top);</span><br><span class="line"><span class="type">int</span> ni=<span class="built_in">unique</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+top)-dat<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;ni;++i)&#123;</span><br><span class="line">a[i]=dat[i+<span class="number">1</span>]-dat[i];</span><br><span class="line">&#125;</span><br><span class="line">ko.<span class="built_in">bbuild</span>(<span class="number">1</span>,ni);</span><br><span class="line"><span class="built_in">sort</span>(ddat+<span class="number">1</span>,ddat+<span class="number">1</span>+ttop,cmp);</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> pre=ddat[<span class="number">1</span>].ver,li,ri;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ttop;++i)&#123;</span><br><span class="line">res+=ko.<span class="built_in">qquery</span>()*(ddat[i].ver-pre);</span><br><span class="line">li=<span class="built_in">upper_bound</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+ni,ddat[i].l)-dat<span class="number">-1</span>;</span><br><span class="line">ri=<span class="built_in">upper_bound</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+ni,ddat[i].r)-dat<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(ddat[i].val==<span class="number">1</span>)&#123;</span><br><span class="line">ko.<span class="built_in">aadd</span>(<span class="number">1</span>,<span class="number">1</span>,ni,li,ri<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ko.<span class="built_in">ddec</span>(<span class="number">1</span>,<span class="number">1</span>,ni,li,ri<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pre=ddat[i].ver;</span><br><span class="line">&#125;</span><br><span class="line">fout&lt;&lt;res&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BST,平衡树</title>
      <link href="/2024/07/21/10026BST-%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2024/07/21/10026BST-%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1>fhq-treap <code>YYDS</code> !!!</h1><p>牛逼的fhq-treap支持分裂,合并,然后在此基础上实现一堆复杂功能,还支持可持久化,当之无愧的超强平衡树(好像还支持区间操作).</p><h2 id="例题">例题</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1486">P1486</a> 郁闷的出纳员</li></ol><p>写一个平衡树支持删除所有小于某个数的操作,重点在于 <code>delta</code> 的处理.初始时delta为0,工资下界不会变也不能变.碰到涨工资降工资都变动delta,然后平衡树压val-delta的值,每次删除 <code>mnn-de-1</code> 的值.一定要注意delta的处理.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散化</title>
      <link href="/2024/07/20/10002%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
      <url>/2024/07/20/10002%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>离散化作用就是把值域较大的数据建立一个映射放到值域较小的范围里面.鉴于Flu不太会用函数,所以开个坑.</p><p>离散化步骤:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n);</span><br><span class="line">m=<span class="built_in">unique</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+n)-dat<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//m是实际不重合元素个数.</span></span><br><span class="line"><span class="comment">//tmp是每个元素离散化之后的值(排名).</span></span><br><span class="line">tmp=<span class="built_in">upper_bound</span>(dat+<span class="number">1</span>,dat+<span class="number">1</span>+m,val)-dat<span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>对应函数解释:<br><code>sort</code>排序,啥也不说是默认从小往大排序.写cmp可以实现自定义排序规则.<br><code>upper_bound</code>是二分返回第一个<strong>大于</strong>元素的地址.<br><code>lower_bound</code>二分返回第一个<strong>不小于</strong>元素的地址.</p><h3 id="排序规则">排序规则</h3><p>这里仔细讲讲,防止Flu考试的时候先检查排序结果对不对…</p><p>其实排序标准挺好记的,就是用<code>&lt;</code>连接的就是结果.比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.a==b.a)<span class="keyword">return</span> a.b&gt;b.b;</span><br><span class="line"><span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码首先按照a从小到大(<code>&lt;</code>的顺序)排序,a一样按b从大到小排序.</p><p>附:函数调用未知函数的格式是这样:(课设的程序,乐)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a&gt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ssort</span><span class="params">(node* head,<span class="type">char</span> cc(node a,node b))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cc</span>(tmp,ttmp))&#123;</span><br><span class="line">        <span class="comment">//交换...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用:</span></span><br><span class="line"><span class="built_in">ssort</span>(stuhead,cmp11);</span><br><span class="line"><span class="comment">//函数名字写上就行了...程序会自动调用</span></span><br></pre></td></tr></table></figure><p>排序的时候有用,多重排序规则可以一个排序函数完成多种排序,大大降低码量,拒绝屎山(得意).</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2024/07/20/10013%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2024/07/20/10013%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>线段树分好几类.接下来分开讲解.</p><p>线段树维护的是一段区间上的某些信息.比如最大值,加和等.</p><p>线段树写法有类似堆的儿子是<code>2fa</code>和<code>2fa+1</code>定死的以及类似栈分配内存的<code>++top</code>两种.由于动态开点比较方便,笔者一律采用第二种.</p><p>笔者把板子叫<code>str</code>,选取segment tree的名字简写.</p><p>但是吧考虑到Flu码风要和大多数人接轨,以后可能会改成很长的名字也说不准…</p><h2 id="线段树写法">线段树写法</h2><p>如果是Flu的码风,写法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push_down</span><br><span class="line">push_up</span><br><span class="line">aadd</span><br><span class="line">bbuild</span><br><span class="line">qquery</span><br><span class="line">cchange</span><br></pre></td></tr></table></figure><p>写法要点:1. <strong>所有tag等到pd结束时再回归初始值,在某吉司机线段树的时候由于取最大值非常容易写错</strong> .<br>2. <code>#define ls dat[mod].l</code> and <code>#define rs dat[mod].r</code> 加上!!!不然你写着不累吗…<br>3. 以下是push_up和push_down函数的标准写法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">dat[mod].val=dat[dat[mod].l].val+dat[dat[mod].r].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tg!=<span class="number">0</span>)&#123;</span><br><span class="line">xxx;</span><br><span class="line">dat[mod].tg=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.以下是查询函数的正确写法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>()<span class="keyword">return</span> x;</span><br><span class="line"><span class="type">int</span> mid=(),res=;</span><br><span class="line"><span class="built_in">push_down</span>(mod);<span class="comment">//这句一定不要忘了</span></span><br><span class="line"><span class="keyword">if</span>();</span><br><span class="line"><span class="keyword">if</span>();</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">aadd</span>(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr,<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">a</span><br><span class="line">&#125;</span><br><span class="line">mid;</span><br><span class="line"><span class="built_in">push_down</span>();<span class="comment">//这两句不要忘了</span></span><br><span class="line"><span class="keyword">if</span>()</span><br><span class="line"><span class="keyword">if</span>()</span><br><span class="line"><span class="built_in">push_up</span>(mod);<span class="comment">//不要忘了加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标记永久化">标记永久化</h2><p>这是一个线段树的技巧.适用条件:标记不会溢出(炸int,炸long long,etc).</p><p>标记永久化的思想是,向下一路叠加,向上一路修改.可能会没有pushdown.</p><p>举例:扫描线的线段树,给n个点,区间加上一个tag,减一个tag,每次求所有tag大于0的点的和.(保证任意时刻tag不小于0)</p><p>全局查询,这是一个很重要的点.所以不必刻意下传tag,只需要不断维护根节点信息即可.我们定义mxx是该节点维护的最大长度,val是当前长度,lazy是一个能叠层数的tag,下传加的时候直接加,减的时候判定以下该节点能不能承受得住,如果可以就减掉,同时更新这个节点的val是子节点的加和,如果不行就暴力去左右子树减1.</p><p>复杂度分析.实际上暴力递归左子树右子树的过程仍然是logn的,因为当初扫描线加tag的时候复杂度是log,现在删的时候复杂度肯定也会是logn级别的.</p><h2 id="动态开点线段树-不会">动态开点线段树(不会)</h2><p>略</p><h2 id="内存计算">内存计算</h2><p>普通线段树的内存是 $O(n\log n)$ .计算的时候由于计算器大多数没有 $\log_2$ 的选项,根据换底公式可以取 $\lg$ 然后乘上 $1.44$ 一个常数得到实际上的内存占用,所谓的线段树<code>20</code>倍空间实际上应该是对主席树说的.</p><p>记住,<code>1e7</code>大小的<code>int</code>大概是<code>40Mb</code>.</p><h1>普通线段树</h1><p>懒标记.</p><h1>权值线段树</h1><p>这个时候有人要问了,假如我想查找比他小的元素有多少个,但是线段树是[1,pos]和[pos,n]区间的加和,该咋办?<br>…<br>你傻啊,减1加1不就完了…</p><h1>zkw线段树</h1><p>重口味线段树?</p><h1>势能线段树(吉司机线段树)</h1><p>用于求区间最大值最小值的变化.例如区间查询最大值及区间和,但是修改是 <strong>a=min(a,v)</strong> 这样取最小值的版本,不好修改.势能线段树维护的有: <code>val</code> 区间加和,以及叶节点的值, <code>mx</code> 最大值, <code>cnt</code> 最大值出现次数, <code>se</code> 严格最小值, <code>tg</code> 表示的是最小值tag,下传的时候所有大于这个值的都会被砍掉.</p><p>然后下传分为三种情况:比最大值大,直接忽略.比最大值小,但是比次大值大,那就可以打一个tag然后结束,如果比这俩都小那就只好暴力遍历左右子树重复操作然后更新节点.时间复杂度比较玄学,听说是介于 $O(n\log n)~O(n\log^2n)$ 的能过级别.</p><h1>可持久化线段树</h1><p>RT,就是为了实现版本回退提供的特殊数据结构.满足一次操作新建logn个节点,然后支持历史版本查询和回退.放一张图:<br><img src="https://cdn.luogu.com.cn/upload/pic/20236.png" alt="图炸了请联系Flu"></p><p>也就是线段树克隆子枝的一个过程.</p><h2 id="应用">应用</h2><p>看题.</p><ol><li>区间加一个 <strong>等差数列</strong> ,单点查询.</li></ol><p>建一个普通线段树,维护 <strong>差分数列</strong> ,然后查询就是1-n的和,修改就是 $a_l$ 加首项, $a_{l+1}-a_r$ 加公差, $a_{r+1}$ 减末项即可.</p><ol start="2"><li>求最长上升M元子序列</li></ol><p>使用dp.设 $f[i][j]$ 表示以 $a_j$ 结尾的长度为i的序列的个数,有<br>$$f[i][j]=\sum_{k&lt;j,a_k&lt;a_j}f[i-1][k]$$<br>可以用树状数组,也可以用线段树维护.具体实现:先循环i,离散化,树状数组存储 $f[i-1][a_i]$ ,循环到j的时候加上这么多就行(比它小的),然后数组加上 $f[i-1][a_j]$ .注意j要从小到大循环,每次询问 $a_j-1$ 保证闭区间求和.</p><p>3.GSS系列(1&amp;3)</p><p>SPOJ上面的一系列数据结构题,线段树维护一些奇奇怪怪的东西的题.:维护一段序列,单点修改,问一段区间的 <strong>最大子段和</strong>(也就是求 $\sum_{i=l}^ra_i,L\le l\le r\le R$ )</p><p>我们先对子段和进行分析:一段大区间上的子段和只可能是左边的,或者右边的,或者一段横贯左右两个小区间的子段和.</p><p>横贯两个区间显然左区间的最大包含右边的子段和和右边包含左边的最大子段和拼起来就完了.对此我们魔改<code>push_up</code>函数,也就是大区间包含小区间的过程.</p><p>我们需要维护val表示区间直接相加的和,res表示区间的最大子段和,lmax表示区间包含左边界的最大子段和,rmax同理.</p><p>由于lmax必须包含左边界,所以区间的lmax要么是左区间的lmax要么是左区间和加上右区间的lmax.rmax同理.</p><p>所以我们可以做出<code>push_up</code>函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//down stream</span></span><br><span class="line">dat[mod].val=dat[dat[mod].l].val+dat[dat[mod].r].val;</span><br><span class="line">dat[mod].lmax=<span class="built_in">max</span>(dat[dat[mod].l].lmax,dat[dat[mod].l].val+dat[dat[mod].r].lmax);</span><br><span class="line">dat[mod].rmax=<span class="built_in">max</span>(dat[dat[mod].r].rmax,dat[dat[mod].r].val+dat[dat[mod].l].rmax);</span><br><span class="line">dat[mod].res=<span class="built_in">max</span>(<span class="built_in">max</span>(dat[dat[mod].l].res,dat[dat[mod].r].res),dat[dat[mod].l].rmax+dat[dat[mod].r].lmax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询也一样,我们可以把区间缩成一个一个的点,然后最后的区间合并成一个点,然后结果就是最后的节点里面装着的res.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">strnode <span class="title">qquery</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l&amp;&amp;r&lt;=tr)<span class="keyword">return</span> dat[mod];</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tr&lt;=mid)<span class="keyword">return</span> <span class="built_in">qquery</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;tl)<span class="keyword">return</span> <span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line">strnode a,b,res;</span><br><span class="line">a=<span class="built_in">qquery</span>(dat[mod].l,l,mid,tl,tr),b=<span class="built_in">qquery</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line">res.lmax=<span class="built_in">max</span>(a.lmax,a.val+b.lmax);</span><br><span class="line">res.rmax=<span class="built_in">max</span>(b.rmax,b.val+a.rmax);</span><br><span class="line">res.val=a.val+b.val;</span><br><span class="line">res.res=<span class="built_in">max</span>(<span class="built_in">max</span>(a.res,b.res),a.rmax+b.lmax);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>qquery</code>中的递归顺序:正常线段树中的<code>qquery</code>是只要区间沾一点就递归加,现在是必须完全覆盖,所以要稍微改一下递归顺序.</p><ol start="4"><li>GSS4 给一段序列,区间每一个数开根号(向下取整),区间求和.显然还是使用线段树去维护的.如何搞???</li></ol><p>我们可以发现一个性质:即便是 $10^{18}$ 在开6次根号之后也就变成1点多了,所以每个数最多被开6次根号.</p><p>所以我们需要使用线段树维护一个val和是否是1的tag,其中开根号就暴力求,如果区间都是1或0直接忽略,求和就线段树求和.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cchange</span><span class="params">(<span class="type">int</span> mod,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> tl,<span class="type">int</span> tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dat[mod].tg)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">dat[mod].val=<span class="built_in">sqrt</span>(dat[mod].val);</span><br><span class="line"><span class="keyword">if</span>(dat[mod].val&lt;=<span class="number">1</span>)dat[mod].tg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid)<span class="built_in">cchange</span>(dat[mod].l,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid)<span class="built_in">cchange</span>(dat[mod].r,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line"><span class="built_in">push_up</span>(mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>HH的项链,给定序列,查询区间[l,r]中有多少种不同的数字.</li></ol><p>对于去重这种的首先考虑离线做法.我们按照r升序排列所有询问,然后从左到右扫描(a).我们扫什么?建一个vis数组表示这个数上一次出现的位置,然后如果这个数上一次出现了(b),那就线段树减(b,-1),该点相加(a,1),举例:<br>序列 1 1 4 5 1 4 ,从左到右扫分别是(线段树叶子节点):<br>100000 010000 011000 011100 001110 000111<br>假如我们碰到询问了,假如说是[2,5],那就求前缀和(5)-(2-1)就可以了.</p><ol start="6"><li>HH的项链加强版:给定序列区间中出现两次(及以上)不重的数.</li></ol><p>考虑5的魔改.上一回我们使用了一个vis记录第一次出现的位置,这次我们拓展这个成last1和last2表示第一次出现以及第二次出现(第二次以上出现就没意思了),<strong>第一次出现记录last1,第二次出现记录last2,同时对last1对应的位置+1</strong>(因为对last2位置+1会错,区间l可能不覆盖第一次的位置)<strong>第二次及以上就覆盖,add(last1,-1),add(last2,1),然后向下传递last1=last2,last2=pos</strong>.查询不变.<br>拓展:同时出现n次才算:维护last1-lastn即可.</p><ol start="7"><li>区间查询sin值和,区间加上角度v.</li></ol><p>考虑公式<br>$$\sin(x+v)=\sin x\cos v+\sin v\cos x$$<br>$$\cos(x+v)=\cos x\cos v-\sin v\sin x$$<br>我们维护该点的sin,cos,然后打一个懒标记.</p><p>然后发现tag也可以直接加.于是就是普通线段树题了.<br>收获:懒标记代表的是已经计算过但是没传的.而不应该是打了没算.<br>三个函数: <code>push_up</code> 通过儿子更新该节点的答案, <code>push_down</code> 把tag传给孩子, <code>upd</code> 通过tag更新答案.</p><ol start="8"><li>区间查询和,单点修改,区间对某个数取模.</li></ol><p>首先,模数大的时候是不会变的,如果模数小,那么这个数至少被砍半.所以一个数最多被取模 $\log n$ 次,又因为在树上操作,一次的复杂度不会超过 $\log^2n$ .代码十分好写,甚至没有pushdown,记录区间加和和max,如果取模取到了那就暴力推平.</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Round.952 Div.4</title>
      <link href="/2024/07/18/20001CF-Round952-Div4/"/>
      <url>/2024/07/18/20001CF-Round952-Div4/</url>
      
        <content type="html"><![CDATA[<p>妈耶,我打Div4都不能AK…</p><h2 id="C">C</h2><p>给一个数列.统计有多少个i满足前i个数是好的.<br>好的定义是数列中存在一个数是其他所有数的和.</p><p><strong>贪心</strong>:假如有一个数是其他所有数的和,他占数列和的50%,也就是说他是最大的.所以我们先算前缀和再找最大数直接比较即可.</p><h2 id="G">G</h2><p>$$D(x)=\sum_xdigits$$<br>D函数,是所有数字的和.比个例子: $D(114)=1+1+4=6$ .</p><p>D函数有一个性质:假如有<br>$$D(k\cdot n)=k\cdot D(n)$$<br>则 $kn$ 不会有进位.也就是说n中数字没有大于 $\lfloor\frac9k\rfloor$ 的.</p><h2 id="H1">H1</h2><p>给一个用.和#组成的矩阵,求选择一行或一列全部变成#的最大连通块是多少.<br>举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">#...#</span><br><span class="line">....#</span><br><span class="line">#...#</span><br><span class="line">.....</span><br><span class="line">...##</span><br><span class="line">输出</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>思路:我们选择一行的时候首先要把.变成#,这个可以预处理出来.然后我们要把两边的最大连通块搞出来加上.</p><p>最终我们需要预处理连通块,也就是前几行以边为界的连通块,可以dfs出来.这样选边的时候可以 $O(1)$ 计算.</p><p>时间复杂度 $O(nm)$ .</p><h2 id="H2">H2</h2><p>还是这个矩阵,变成可以选一行和一列.</p><p>算法:只是变成前几行前几列为界的连通块而已,算法没变太多.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NowCoder ACM Round1</title>
      <link href="/2024/07/17/20002NewCoder-ACM-Round1/"/>
      <url>/2024/07/17/20002NewCoder-ACM-Round1/</url>
      
        <content type="html"><![CDATA[<p>第一场训练拉开帷幕…</p><h2 id="赛程">赛程</h2><p>我们队非常幸运,做对了四道题成功拿到高位银牌(204/1488个有分的).</p><p>我们队(BJL,边角料)有一位零基础选手,一位高中OIer,一位初中OIer,就这么开始了又菜又爱玩的旅途…</p><p>我们最初的目标是只要开出来签到题就算成功…结果最后开对了四个…真的十分意外…</p><p>刚开始Flu从F开始看,看到K发现一共有H和I像是可做题目.</p><p>Flu开H,挂了.QianK也写H,过了.<br>Flu开I,此时零基础选手开C发现不会,QianK开C,过了.<br>此时Flu全力开I,最后WA三发过了I,稳铜了.<br>最后,大佬告诉我们组合数可以用杨辉三角做,QianK开A,过了.</p><p>然后,大家凭借4道题的优势稳高位银(对4个如果罚时少的话可以进金的),下班.</p><h1>总结环节(比赛程重要多了)</h1><p>以下按照主观排序.</p><h2 id="C">C</h2><p>签到.假设 $q_i=a_i+a_{i+1}+a_{i+2}+…+a_n$ ,计算 $\sum_{i=1}^nq_i$ .<br>拆成每一个元素贡献维护 $\sum_{i=1}^ni*a_i$ 即可.</p><h2 id="H">H</h2><p>有一个人能打A比赛或B比赛(只能参加一场),然后排名目前已经确定,求他的最好名次.</p><p>贪心.Flu开题写挂的地方在于, <strong>最优解是要么参加第一场,其他所有人参加第二场,要么参加第二场,其他所有人参加第一场</strong> ,Flu没想到,挂了.</p><h2 id="I">I</h2><p>Flu唯一一道靠自己写对的题.大模拟即可.</p><p>Flu WA了三发.前两发是记忆化写挂了,后面发现记忆化假了,于是硬模拟,又WA了一发,是因为镜子可以被反射两次但是计数一次,最后过了.</p><h2 id="A">A</h2><p>求有多少个长度为 $n$ ,元素取值在 $[0,2^m)$ 范围的数列满足其非空子序列与和是 $1$ .对输入整数 $q$ 取模(<strong>特别注意 $q$ 不一定是质数</strong>).<br>$$1\le n,m\le5000,1\le q\le10^9$$<br>设数列中二进制位最低为1的数有k个.求<br>$$\sum_{k=1}^n\binom{n}{k}2^{(n-k)(m-1)}(2^k-1)^{m-1}$$<br>式子解释:设了一个k,然后最后一位是0的显然不能在子序列里面,最后一位是0的有 $2^{m-1}$ 个,套上组合数就是前面半部分.</p><p>后半部分就是,剩下的子序列都是尾部是1的,然后由于他们与和是1(由于1&amp;0=0所以剩下的尾数为1的都可以加到子序列里面),要在每一位分散一些0.如何分散?就是 $\binom{k}{1}+\binom{k}{2}+…+\binom{k}{k}=2^k-1$ (删掉全是1的情况),然后这样的位一共有 $m-1$ 个,就是后半部分答案.</p><p>取模:由于q不一定是质数,考虑杨辉三角解决.</p><h2 id="B">B</h2><p>在A的基础上变成&quot;存在两个不同非空子序列&quot;这个条件.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast Transform Algorithms</title>
      <link href="/2024/07/12/10023FTs/"/>
      <url>/2024/07/12/10023FTs/</url>
      
        <content type="html"><![CDATA[<p>这里放所有变换,FFT,NTT,FWT,FMT,的知识,etc.</p><p>Flu发现好像关于这些的算法开三倍空间一般就够用了.</p><h2 id="FFT">FFT</h2><p>FFT,一个令人胆寒的算法(前置知识比较多,又是复数又是矩阵又是点值的…).<br>如果想学习原理,请左转<a href="https://oi-wiki.org/math/poly/fft/">OIWiki</a>,这里主要聊聊FFT的升级以及实战经验该怎么写.</p><p>FFT解决的问题是在O(nlogn)时间内求解多项式相乘,长这样:<br>$$C_k=\sum_{i+j=k}A_iB_j$$<br>然后这是板子.(显然题目不会这么考,我们要做变形)</p><ol><li>给两个序列 $a,b$ 你可以对序列进行旋转操作(如 $1,2,3,4,5$ 可以变成 $2,3,4,5,1$ )你也可以对任意序列进行全部加 $x(x&gt;0)$ 的操作,定义差异值是下面的式子,求两个数列最小差异值.<br>$$s=\sum_{i=1}^n(a_i-b_i)^2$$<br>首先,对于一个数列加x和另一个数列-x效果相当,于是式子先转成<br>$$s=\sum_{i=1}^n(a_i+x-b_i)^2,-m\le x\le m$$<br>展开式子得<br>$$s=\sum_{i=1}^na_i^2+\sum_{i=1}^nb_i^2+nx^2+2x(\sum_{i=1}^na_i-\sum_{i=1}^nb_i)-2\sum_{i=1}^na_ib_i$$<br>然后发现只有最后的部分和旋转有关,是不确定的,其他都可以快速找出来,现在要求 $\sum_{i=1}^na_ib_i$ 的最大值.</li></ol><p>我们先把a反过来,式子变成 $\sum_{i=1}^na’_{n-i+1}b_i$ 发现这是一个卷积形式,然后 <strong>倍长a</strong> 和b进行卷积,答案里面的 <strong>n+1~2n</strong> 项就是最大值(妙啊).</p><h2 id="NTT">NTT</h2><p>会炸精度…实际有效的精度大概就是两位.</p><p>例题:P2000拯救世界,计算 $(a+1)(a+2)(a+3)(a+4)/24$ ,使用NTT先计算出 $(a+1)*(a+2)$ 然后要 <strong>处理进位</strong> ,然后再乘上后半部分.</p><h3 id="原根表">原根表</h3><p>转载自<a href="https://blog.miskcoo.com/2014/07/fft-prime-table,%E5%85%B6%E4%B8%AD%E8%B4%A8%E6%95%B0%E6%BB%A1%E8%B6%B3">https://blog.miskcoo.com/2014/07/fft-prime-table,其中质数满足</a> $prime=r\cdot2^k+1$ ,ord是原根.</p><table><thead><tr><th style="text-align:center">$r\cdot2^k+1$</th><th style="text-align:center">r</th><th style="text-align:center">k</th><th style="text-align:center">$ord$</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">97</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">193</td><td style="text-align:center">3</td><td style="text-align:center">6</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">257</td><td style="text-align:center">1</td><td style="text-align:center">8</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">7681</td><td style="text-align:center">15</td><td style="text-align:center">9</td><td style="text-align:center">17</td></tr><tr><td style="text-align:center">12289</td><td style="text-align:center">3</td><td style="text-align:center">12</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">40961</td><td style="text-align:center">5</td><td style="text-align:center">13</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">65537</td><td style="text-align:center">1</td><td style="text-align:center">16</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">786433</td><td style="text-align:center">3</td><td style="text-align:center">18</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">5767169</td><td style="text-align:center">11</td><td style="text-align:center">19</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">7340033</td><td style="text-align:center">7</td><td style="text-align:center">20</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">23068673</td><td style="text-align:center">11</td><td style="text-align:center">21</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">104857601</td><td style="text-align:center">25</td><td style="text-align:center">22</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">167772161</td><td style="text-align:center">5</td><td style="text-align:center">25</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">469762049</td><td style="text-align:center">7</td><td style="text-align:center">26</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">998244353</td><td style="text-align:center">119</td><td style="text-align:center">23</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">1004535809</td><td style="text-align:center">479</td><td style="text-align:center">21</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2013265921</td><td style="text-align:center">15</td><td style="text-align:center">27</td><td style="text-align:center">31</td></tr><tr><td style="text-align:center">2281701377</td><td style="text-align:center">17</td><td style="text-align:center">27</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3221225473</td><td style="text-align:center">3</td><td style="text-align:center">30</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">75161927681</td><td style="text-align:center">35</td><td style="text-align:center">31</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">77309411329</td><td style="text-align:center">9</td><td style="text-align:center">33</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">206158430209</td><td style="text-align:center">3</td><td style="text-align:center">36</td><td style="text-align:center">22</td></tr><tr><td style="text-align:center">2061584302081</td><td style="text-align:center">15</td><td style="text-align:center">37</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">2748779069441</td><td style="text-align:center">5</td><td style="text-align:center">39</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">6597069766657</td><td style="text-align:center">3</td><td style="text-align:center">41</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">39582418599937</td><td style="text-align:center">9</td><td style="text-align:center">42</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">79164837199873</td><td style="text-align:center">9</td><td style="text-align:center">43</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">263882790666241</td><td style="text-align:center">15</td><td style="text-align:center">44</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">1231453023109121</td><td style="text-align:center">35</td><td style="text-align:center">45</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">1337006139375617</td><td style="text-align:center">19</td><td style="text-align:center">46</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3799912185593857</td><td style="text-align:center">27</td><td style="text-align:center">47</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">4222124650659841</td><td style="text-align:center">15</td><td style="text-align:center">48</td><td style="text-align:center">19</td></tr><tr><td style="text-align:center">7881299347898369</td><td style="text-align:center">7</td><td style="text-align:center">50</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">31525197391593473</td><td style="text-align:center">7</td><td style="text-align:center">52</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">180143985094819841</td><td style="text-align:center">5</td><td style="text-align:center">55</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">1945555039024054273</td><td style="text-align:center">27</td><td style="text-align:center">56</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">4179340454199820289</td><td style="text-align:center">29</td><td style="text-align:center">57</td><td style="text-align:center">3</td></tr></tbody></table><h2 id="FWT-快速沃尔什变换">FWT 快速沃尔什变换</h2><p>用于求解 $C_i=\sum_{k\oplus j=i}A_iB_j$ 的问题,其中 $\oplus$ 代表<code>&amp;</code> <code>|</code> <code>&amp;</code> 三种运算符,还可以解决子集卷积问题.</p><h2 id="FMT-快速莫比乌斯变换">FMT 快速莫比乌斯变换</h2><p>莫比乌斯反演在集合上的结论:<br>$$g(S)=∑_{T⊆S}(−1)^{|S|−|T|}f(T)$$<br>有人说FMT是高阶的容斥原理,FMT板子放在下面,但是Flu选择FWT.</p><h2 id="多项式乘法逆">多项式乘法逆</h2><p>虽然不是FT里面的,但这是多项式全家桶的一员,还是放在这里吧…</p><h2 id="例题">例题</h2><ol><li><p>给出n个数,计算每个数的 $E_i$ ,有<br>$$E_i=\frac{F_i}{q_i}$$<br>$$F_j=\sum_{i=1}^{j-1}\frac{q_i\times q_j}{(i-j)^2}-\sum_{i=j+1}^n\frac{q_i\times q_j}{(i-j)^2}$$<br>先推式子:<br>$$E_j=\sum_{i=1}^{j-1}\frac{q_i}{(i-j)^2}-\sum_{i=j+1}^n\frac{q_i}{(i-j)^2}$$<br>令 $g(i)=1/i^2$ ,g(0)=0 有<br>$$E_j=\sum_{i=0}^{j}q_ig(i-j)-\sum_{i=j}^nq_ig(i-j)$$<br>发现前半部分是卷积形式,直接FFT即可.看后半部分,把初始j带进去得到<br>$$E_j=\sum_{i=0}^{j}q_ig(i-j)-\sum_{i=0}^nq_{i+j}g(i)$$<br>引入 $q’(i)=q(n-i)$ ,原式得<br>$$E_j=\sum_{i=0}^{j}q_ig(i-j)-\sum_{i=0}^{n-j}q’_{n-i-j}g(i)$$<br>至此,两个式子都变成了卷积形式,直接FFT计算即可.但是后面半个部分是上界 $n-j$ 的,注意最后减掉的时候别减错了.</p></li><li><p><strong>子集卷积</strong> :计算<br>$$C_k​=\sum_{i&amp;j=0}^{i|j=k}A_i​B_j$$<br>记|S|表示集合S的元素个数,<code>∗</code>表示子集并卷积运算,即 $h_i=∑_{j∪k=i}f_j×g_k​$ .</p></li></ol><p>第一个限制 $i∪j=k$ 容易处理,直接FWT计算子集并卷积即可.<br>第二个限制 $i∩j=∅$ ,等价于 $|i|+|j|=|i∪j|$ .我们再开一维记录集合中的元素个数即可.</p><p>具体地，令 $f_{i,j}=\begin{cases}a_j(|j|=i)\0\end{cases}$ , $g_{i,j}=\begin{cases}b_j(|j|=i)\0\end{cases}$ ,有 $h_i=\sum_{k=0}^if_k*g_{i-k}$ .最后我们所求的答案 $c_i=h_{|i|,i}$ ,复杂度 $O(n^22^n)$ .</p><p>代码实现:先读入,用<code>popcount</code>计算有多少个1,存进去,然后对 <code>f[i],g[i]</code> 每一个二进制多少个进行 <code>FWT_or</code> ,然后h直接乘,取模,然后对h进行 <code>IFWT_or</code> ,最后输出,瓶颈在于卷积的计算.</p><ol start="3"><li>(bzoj4589)从m个质数中选出n个数(可以重),让他们的抑或和是0,有多少种情况? ($1\le n\le10^9,m\le50000$)</li></ol><p>从生成函数的角度考虑:设数组f表示当前抑或和是i时的情况数,初始状况就是每个质数的位置填1,然后答案就是f使用FWT抑或卷积,卷积n次,最后取0的位置即可,套一个快速幂.复杂度 $O(m\log n)$ .</p><p>代码实现:发现FWT_xor卷积具有结合性,也就是说,假设 $f’$ 表示 $fwt(f)$ ,有 $f<em>f</em>g=f’f’g’$ 不需要进行FWT的多余还原操作,复杂度并不是 $O(m\log m\log n)$ .</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Round957 Div3</title>
      <link href="/2024/07/12/20003CF-Round957-Div-3/"/>
      <url>/2024/07/12/20003CF-Round957-Div-3/</url>
      
        <content type="html"><![CDATA[<p>这是蒟蒻的CF游记!虽然10点35的比赛Flu10点55才收到消息,急慌燎忙开打,总归是收获不小.</p><p>蒟蒻没有用过CF Better插件,在ZHY大神的帮助下装了(蒟蒻因为浏览器自带翻译把i这个变量翻译成我,而且装在LaTeX里面特别乱,Flu整场光读题估计就花了很长时间,约半个小时?),感谢一下.</p><p>这是蒟蒻第一次打CF,见谅(个屁,我等级分不可能再降了,因为原先是0).</p><p>现在是讲题时间.</p><h2 id="A">A</h2><p>给仨数,你每次能选一个数加1,你能操作5次.</p><p>Flu赛时做法是穷举,暴搜每一种情况.</p><p>其实应该这么想:有 $a\times b\times c$ 这么个值,你要选一个加一,就能把乘法看成加法.于是考虑贡献,得出结论:每次给最小的加上1,能收获最大结果.</p><h2 id="B">B</h2><p>合并与被合并的题.好多根木棒,你要拼成1根.你每次能把一根劈成1和剩下的,也可以用1和一根合成一根更长的.</p><p>直接计算即可.</p><h2 id="C">C</h2><p>构造排列题.</p><p>这个题卡了Flu很久,原因是读不懂题,后来做了D之后再看的C.</p><blockquote><p>原题干:<br>$g(i)$ is the sum of all the numbers in the permutation on a prefix of length $i$ that are not greater than $m$ .</p></blockquote><p>什么意思呢,又是排列又是加和又是前缀和的…所以看不懂,卡了很久.</p><p>人话: $g$ 是一个加和函数,如果一个数 $a_i\le m$ 那么 $g(i)$ 就加上 $a_i$ ,仅此而已.</p><p>构造本身是比较简单的,一眼能看出来.</p><h2 id="D">D</h2><p>检验爱情,有一个人要游泳过河.河宽n(也就是从0游到n+1这两个点),整数位上有东西,是水W,木头L和鳄鱼C.</p><p>Flu的做法是跑两遍,第一遍倒着覆盖鳄鱼,因为有鳄鱼的地方不能游,就先把所有不能到的地方标记上鳄鱼,那些是只能跳过去的地方.</p><p>运算就是,定一个ff表示距离,如果到原木(终点加一个原木即可)那就结算(游+跳能不能过去),碰到鳄鱼就加ff(距离),一直到鳄鱼结束不要结算,判断一下能不能跳过去,因为鳄鱼后面可能还有水是能游的.</p><p><strong>另外,结算的时候注意一点,游泳是整张图只能游这么长,也就是结算时候语句是<code>k-=max(0,ff-m)</code>防止不减反增.</strong></p><h2 id="E">E</h2><p>定义字符串的加是<br>$$n*a=\underbrace{nn…n}_{a}$$<br>字符串的减是直接末尾抹去几位,求对于n,有多少(a,b)满足 $na-b=na-b$ .左边字符串算法,右边正常数值算法.<br>$$1\le n\le100,1\le a,b\le10000$$<br>比赛的时候没看到数据范围,以为不可做,谁知道直接暴力就行了…</p><p>对的,就是暴力.</p><p>但是Flu赛后补题的时候WA了一发,原因是,倒着取模.数肯定是要从高位拼起来的,所以取模的时候整数an(最高位)对应0,也就是说你需要一个逆着的数字,不仅仅是逆着转移.所以对于33这种回文数字Flu是正解,但是对于某些如63这种就假了.</p><h2 id="F">F</h2><p>因子.</p><p>有一点要注意:map的特性(因为这个导致Flu没调出来,少A了一道题)是查找就建表了.</p><p>比个例子:表里面装着2,现在查找1,由于没有1,查出来是0.(在查的时候已经建表了,只是1对应0而已)</p><p>然后遍历表里面的元素进行除再加新元素(使用一个vector作为中继,防止遍历到才加进去的元素)的时候会出问题,因为1在查的时候已经加进去了,就喜提WA.</p><p>如果加上特判标记就会喜提TLE.</p><p>综上,要使用set,别老惦记着unordered_map.</p><h2 id="G">G</h2><p>定义MEX(S,k)表示集合S中第k个没出现的最小元素.</p><p>求给定集合n(也就是1-n所有数组成的集合)的所有子集的 $MEX(S,|S|+1)$ 和.</p><p>例: $MEX({1,2,4},1)=3$</p><p>首先,观察发现,范围 $|S|+1\le MEX(S,|S|+1)\le2|S|+1$ ,也就是所有元素都在里面和都不在里面的极端状况.然后考虑一般状况,也就是一部分在里面一部分不在里面.至此,我们枚举所有S的大小(i),然后枚举对应的mex的大小(j).考虑有些元素在mex里面,也就是 $\binom{j-1}{j-i-1}$ ,然后不在里面的就是 $\binom{n-j}{2i-j+1}$ ,乘在一起就是了.</p><p>注意一个点是j-1有可能大于n,卡好范围.</p><h2 id="总结">总结</h2><p>多见见题.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉定理,费马小定理</title>
      <link href="/2024/07/11/10004%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
      <url>/2024/07/11/10004%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>RT,这里摆一些公式怕某人忘了.</p><p>费马小定理:<br>$$a^{p-2}\equiv a^{-1}\mod p$$<br>欧拉定理/拓展欧拉定理:<br>$$a^b\equiv\begin{cases}a^{b\mod \varphi(p)}&amp;\gcd(a,p)=1\a^b&amp;\gcd(a,p)\neq1,b&lt;\varphi(p)\a^{b\mod\varphi(p)+\varphi(p)}&amp;\gcd(a,p)\neq1,b\ge\varphi(p)\end{cases}\mod p$$<br>其中第二行的意思是不能降幂了(欧拉定理推出来的比原来还大不是我们想要的)</p><h2 id="质数专题">质数专题</h2><p>总结一下啥时候能直接使用函数,什么时候不可以.</p><h2 id="模数随意使用">模数随意使用</h2><p>快速幂.</p><h2 id="模数互质时随意使用">模数互质时随意使用</h2><h2 id="模数必须是质数">模数必须是质数</h2>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉格朗日插值</title>
      <link href="/2024/07/11/10016%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
      <url>/2024/07/11/10016%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>拉插的用法就是,给定好多个点,让你拟合一条多项式的曲线经过这些点,求出这个函数在x=k的时候的值.</p><h2 id="拉插公式">拉插公式</h2><p>$$f(x)=\sum_{i=0}^ny_i\prod_{i\neq j}\frac{k-x_j}{x_i-x_j}$$<br>理解一下:假如给的点是 $(1,3),(2,7),(3,13)$ ,拉插就是:<br>$$f(k)=3\frac{(k-2)(k-3)}{(1-2)(1-3)}+7\frac{(k-1)(k-2)}{(2-1)(2-3)}+13\frac{(k-1)(k-2)}{(3-1)(3-2)}$$</p><h2 id="x取值连续的优化">x取值连续的优化</h2><p>由于x取值连续,可以快速计算前缀积和后缀积(上面)以及阶乘(下面)然后实现 $O(n)$ 的计算拉插.(N表示有几项)<br>$$pre_i=\prod_{j=1}^ik-j$$<br>$$suf_i=\prod_{j=i}^Nk-j$$<br>$$f(k)=\sum_{i=1}^Ny_i\frac{pre_{i-1}\cdot suf_{i+1}}{(i-1)!(N-i)!}$$</p><h2 id="重心拉插">重心拉插</h2><p>可以实现加点的计算方式:<br>$$f(x)=\sum_{i=0}^ny_i\prod_{i\neq j}\frac{k-x_j}{x_i-x_j}$$<br>令 $g=\prod^n_{i=0}k-x_i$ ,则有<br>$$f(k)=g\sum_{i=0}^n\prod_{i\neq j}\frac{y_i}{(k-x_i)(x_i-x_j)}$$<br>设 $t_i=\frac{y_i}{\prod_{i\neq j}x_i-x_j}$ ,则有<br>$$f(k)=g\sum_{i=0}^n\frac{t_i}{(k-x_i)}$$<br>这样加点的时候只需要计算他的 $t_i$ 即可.</p><h2 id="应用">应用</h2><p>首先你要证明这是一个多项式,能用插值.</p><p>典型:<br>$$\sum_{i=1}^ni^k$$<br>首先证明是一个多项式,然后&quot;直接插值&quot;(按n为变元,暴力算每个数,然后按点插值即可)</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2024/07/11/10025%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2024/07/11/10025%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>并查集有普通并查集,拓展域并查集,带权并查集这几种.</p><p>所有并查集的初始化都是初始爹都是自己.</p><p>并查集支持路径压缩和按秩合并两种合并方法.</p><p>在本博客中,记录爹的数组一律叫ko,是为了纪念橙王.</p><p><img src="https://static.wikia.nocookie.net/animatorvsanimation/images/7/73/OrangeNoCrown.png/revision/latest?cb=20240617165159" alt="橙王,图炸了请联系笔者更换" title="老父亲了"></p><h1>路径压缩</h1><p>由于路径压缩是查询的时候顺带压缩了一下,时间复杂度比较玄学,但是肯定比 $O(\log n)$ 要低,因为他相较于可持久化并查集牺牲了回溯的功能,也就是说查找的时候可能会修改好多好多东西(压缩路径嘛).</p><h1>按秩合并</h1><p>并查集的另一种合并操作就是按秩合并,这样的并查集会因为一个size而控制树高不会超过 $\log n$ 的高度.</p><p>而且,这样的合并是一开始就写好固定了的,也就是支持可持久化(使用主席树维护即可)</p><h2 id="普通并查集">普通并查集</h2><p>一个人的爹变成另一个人.用于检查某些元素在不在一个集合里面.</p><p>并查集支持维护区间,用法是一段序列的头和更靠右的合并,保证区间末尾一定是并查集的头,这样可以保证时间复杂度O(n),因为每一个数最多被合并一次.</p><h2 id="拓展域并查集-种类并查集">拓展域并查集(种类并查集)</h2><p>就是有两个及以上的并查集一起操作.比如,要求原有朋友关系的基础上添加一种新关系叫敌人关系,满足&quot;敌人的敌人是朋友&quot;,就可以拓展一个并查集,开到二倍空间.</p><p>实战就是,假设A和B是敌人,就合并A+n和B+n,假如B原先有敌人了那就合并朋友一个人和他敌人的敌人.</p><p>敌人本质上还是一个并查集.</p><h2 id="带权并查集">带权并查集</h2><p>并查集加个权重.比较灵活,维护的东西也比较多变,不好讲.</p><p>举例:给哪个学生比哪个学生多考几分,问谁和谁之间的分数差,就可以维护并查集叶节点和根节点的分数差关系.</p><h2 id="魔改并查集">魔改并查集</h2><p>有的时候会让写一种奇怪的数据结构,支持某个节点的孩子并到节点的爹那里,同时后续操作还可能让某些节点继续并到该节点.</p><p>这类题的特征是:</p><ol><li>支持查询一个节点的爹</li><li>盒子装球,合并盒子之后一个是空的,于是接着装球</li></ol><p>我们把所有节点都看作一个点,于是他就是普通并查集.但是如何解决空盒子的问题?<br><strong>建立一个映射,在并查集上动态开点,标记新开的点是原来被合并的点即可.</strong> 同时size啥的就很好维护了.</p><h2 id="实战">实战</h2><ol><li>p5937,维护一个01组成的序列,给定一个区间,请你判断以下话语的正确性.如(1 2 odd 3 4 even)给定区间首尾.</li></ol><blockquote><p>对于区间的题考虑如下转化:<br>区间[l,r]可以转化为区间[0,l-1]和区间[0,r]的性质.<br>然后再由于奇偶性的传递可以维护一个种类并查集.</p></blockquote><ol start="2"><li>NOI食物链问题:</li></ol><blockquote><p>维护三个并查集，表达的是吃与被吃的关系.<br>如何表达他们是同级的呢？A不吃B而且B不吃A，或者直接查他们是不是一个集合<br>如何表达吃的关系呢？直接维护并查集，A吃B抽象成A的上级就是B+n(不同群系，不同并查集)<br>这样就得到了一个循环的样子：群系ABC三个并查集，同级就直接合并<br>吃的关系就opt1合并opt2+mxx表示A群系的opt1和opt2+mxx是一级的，由于opt2+mxx是B群系所以体现了opt1吃opt2<br>注意初始化并查集直接原数存就好<br>注意先判断是不是真话再合并防止出现环的情况</p></blockquote><ol start="3"><li>ATabc279f 盒子,写一个程序支持维护以下操作:1把一个新球放到某个盒子里2把a盒子里面的所有球放到b盒子里面3查询某个球属于某个盒子.</li></ol><blockquote><p>并查集维护,关于某个盒子放到另一个盒子里面的情况可以通过开点的方法解决.(注意,点和箱子都应该看成点)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论分块</title>
      <link href="/2024/07/11/10027%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/"/>
      <url>/2024/07/11/10027%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>数论分块是简单的结论,这里相较于OIWiki上的叙述补充点东西.</p><h2 id="数论分块">数论分块</h2><p>结论:对于区间lr,满足 $\lfloor\frac nx\rfloor$ 的最大区间边界是<br>$$\Big\lfloor\frac n{\lfloor\frac nx\rfloor}\Big\rfloor$$<br>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    r=n/(n/l);</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度是 $O(\sqrt n)$ .</p><h2 id="多次分块">多次分块</h2><p>有的时候要处理诸如 $\lfloor\frac nx\rfloor\lfloor\frac mx\rfloor$ 的两个都需要分块的式子.这个时候代码怎么写?很简单.如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=<span class="built_in">min</span>(n,m);l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    r=<span class="built_in">min</span>(n/(n/l),m/(m/l));</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其实就是一段一段的划分更细了.其时间复杂度是 $O(\sqrt n+\sqrt m)$ .</p><p>(本篇文章知识点极其简单,因为有一个人写的二次分块代码是这样,又难写又难调:)</p><blockquote><p>声明:以下代码是相对错误示例,太难调了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l1=<span class="number">1</span>,r1,l1&lt;=<span class="built_in">min</span>(n,m);l1=r1+<span class="number">1</span>)&#123;</span><br><span class="line">    r1=n/(n/l1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l2=l1,r2,l2&lt;=r1;l2=r2+<span class="number">1</span>)&#123;</span><br><span class="line">        r2=m/(m/l1);<span class="comment">//其实这里错了,因为r2有可能越界</span></span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2024/07/07/10014%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2024/07/07/10014%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<p>本篇学习著名莫比乌斯反演的应用以及卷积式子的转化.</p><h2 id="积性函数">积性函数</h2><p>先了解以下卷积以及积性函数的定义:数论中的卷积默认是狄利克雷卷积,写作$*$,星号夹在两个函数中间.常见的积性函数有:</p><p>单位函数 $\varepsilon(n)=[n=1]$ ,完全积性<br>恒等函数 $\mathrm{id}<em>k(n)=n^k$ ,完全积性<br>常数函数 $1(n)=1$ ,完全积性<br>欧拉函数 $\varphi(n)=\sum</em>{i=1}^n[\gcd(i,n)=1]$ 也就是小于等于n和n互质的数的个数<br>除数函数 $\sigma_k(n)=\sum_{d|n}d^k$ ,其中 $\sigma_0$ 经常记作 $d$ 或 $\tau$ ,$\sigma_1$经常记作$\sigma$ .<br>莫比乌斯函数 $\mu(n)=\begin{cases}1&amp;n=1\0&amp;\exist d&gt;1,d^2|n\(-1)^{\omega(n)}&amp;otherwise\end{cases}$ ,是加性函数<br>(人话就是说,1是1,有完全平方数就是0,否则就是按照积性函数-1之间相乘.)<br>$\omega(n)$ 表示n的本质不同质因子个数</p><p>(加性函数,指满足 $f(ab)=f(a)+f(b)$ 的函数)</p><p>积性函数推广:假如fg是积性函数,以下也都是积性函数:<br>$$f(x^p)\qquad f^p(x)\qquad f(x)g(x)\qquad f(x)*g(x)$$</p><h2 id="狄利克雷卷积">狄利克雷卷积</h2><p>对于两个数论函数fg,定义其结果h<br>$$h(x)=\sum_{d|x}f(d)g(\frac xd)=\sum_{ab=x}f(a)g(b)$$<br>即为<br>$$h=f*g$$</p><blockquote><p>性质:交换律结合律分配律.有一个特殊点的:<br>$f=g$ 和 $f<em>h=g</em>h$ 是充要条件,其中 $h(1)\neq0$ .</p></blockquote><p><strong>高维前缀和</strong>:铺垫一下,优化有用.高位前缀和就是状压dp,用于快速求解集合及其子集和.</p><p>可以对这道题中的模型进行抽象化,即:对于任意数论函数f,积性函数g,在 $O(n\log\log n)$ 的时间复杂度内求出狄利克雷卷积h.</p><p>将每个质数视为一个维度,则狄利克雷卷积就是一个带系数的高维前缀和,考虑分别处理每一个维度 $p_i$ ,每个 $p_k$ 都是一个物品,每个物品只转移一次,所以是一个01背包(DP统计所有方案的价值总和).物品 $p_k$ 的体积为 $p_k$ (这里总体积是每个物品的体积相乘),价值为 $g(p_k)$ (价值也相乘).</p><h3 id="常见卷积式子">常见卷积式子:</h3><p>$$\mathrm{id}<em>\mu=\varphi$$<br>$$\varphi</em>1=\mathrm{id}$$<br>$$\mu<em>1=\varepsilon$$<br>$$1</em>1=\mathrm{d}$$<br>$$\mathrm d*\mu=1*\varepsilon=1$$</p><h3 id="关于-mathrm-d-的高阶推导">关于 $\mathrm d$ 的高阶推导</h3><p>二元<br>$$\mathrm d(AB)=\sum_{i|A}\sum_{j|B}[\gcd(i,j)=1]$$<br>三元<br>$$\mathrm d(ABC)=\sum_{i|A}\sum_{j|B}\sum_{k|C}[\gcd(i,j)=1][\gcd(j,k)=1][\gcd(i,k)=1]$$<br>n维二元<br>$$\sigma^k(AB)=\sum_{i|A}\sum_{j|B}<a href="ij">\gcd(i,\frac Bj)=1</a>^k$$<br>n维三元<br>$$\sigma^k(ABC)=\sum_{i|A}\sum_{j|B}\sum_{l|C}[\gcd(i,\frac Bj)=1][\gcd(i,\frac Cl)=1]<a href="ijl">\gcd(j,\frac Cl)=1</a>^k$$</p><h2 id="并不-快乐的导式子时间">(并不)快乐的导式子时间</h2><p>常见技巧:变换枚举变量,在类欧几里得算法的时候也会用到.有点像二重积分三重积分那里使用一个变量去反卡另一个变量的值域,这个比较难说清,自己做题理解一下.</p><p>常用公式:<br>$$[\gcd(i,j)=k]=[\gcd(\frac ik,\frac jk)=1]$$</p><ul><li>反演结论1:<br>$$[\gcd(i,j)=1]=\sum_{d|\gcd(i,j)}\mu(d)=\sum_{d|i,j}\mu(d)$$</li><li>结论2: 若 $f(n)=(1<em>g)(n)$ ,则 $g(n)=(\mu</em>f)(n)$ .</li><li>结论3:(1~n中与n互质的数的和是这个)<br>$$\sum_{i=1}^{d}i[\gcd(i,d)=1]=\frac{\varphi(d)d}2$$</li></ul><blockquote><p>结论3的证明:<br>与d互质的数成对出现.<br>若id互质则有d-i与d互质<br>这样的数有$\frac{\varphi(d)d}2$对.</p></blockquote><h2 id="例题">例题</h2><ol><li>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^n\gcd(i,j)\=&amp;\sum_{i=1}^n\sum_{j=1}^n\sum_{d|\gcd(i,j)}\varphi(d)\=&amp;\sum_{i=1}^n\sum_{j=1}^n\sum_{d|i,j}\varphi(d)\=&amp;\sum_{d=1}^n\Big\lfloor\frac nd\Big\rfloor^2\varphi(d)\end{aligned}$$</li></ol><blockquote><p>第一步:一个数等于其因子的欧拉函数和,也就是 $\varphi=1*\mathrm{id}$ .<br>第二步:d如果是gcd的因子,则d一定同时是ij的因子.<br>第三步:改变枚举变量,先枚举d,考虑ij对于式子的贡献(这么想,假如d是d,i和j都可以是k*d,所以最大就是有 $\lfloor\frac nd\rfloor$ 个贡献,也就是这么多的 $\varphi(d)$ ,同时注意到后面式子完全和ij没关系了,放心转化即可.)</p></blockquote><ol start="2"><li>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m\gcd(i,j)\=&amp;\sum_{k=1}^{\min(m,n)}\sum_{i=1}^n\sum_{j=1}^mk[\gcd(i,j)=k]\=&amp;\sum_{k=1}^{\min(m,n)}\sum_{i=1}^n\sum_{j=1}^mk[\gcd(\frac ik,\frac jk)=1]\=&amp;\sum_{k=1}^{\min(m,n)}\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}k[\gcd(i,j)=1]\=&amp;\sum_{k=1}^{\min(m,n)}k\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}\sum_{d|\gcd(i,j)}\mu(d)\=&amp;\sum_{k=1}^{\min}k\sum_{d=1}^{\min}\mu(d)\Big\lfloor\frac n{kd}\Big\rfloor\Big\lfloor\frac m{kd}\Big\rfloor\=&amp;\sum_{T=1}^{\min}\Big\lfloor\frac n{T}\Big\rfloor\Big\lfloor\frac m{T}\Big\rfloor\sum_{k|T}k\mu(\frac Tk)\=&amp;\sum_{T=1}^{\min}\Big\lfloor\frac n{T}\Big\rfloor\Big\lfloor\frac m{T}\Big\rfloor\varphi(T)\end{aligned}$$</li></ol><blockquote><p>前三步是正常的推式子.<br>第四步上了反演结论.<br>第五步更换枚举变量消掉了两个 $\sum$ .<br>第六步使用T=kd代换,发现式子中的卷积关系.<br>第七步使用家喻户晓的 $\varphi=\mu*\mathrm{id}$ .</p></blockquote><ol start="3"><li><p>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^n\gcd(i,j)a_ia_j\<br>=&amp;\sum_{d=1}^nd\sum_{i=1}^n\sum_{j=1}^n[\gcd(i,j)=d]a_ia_j\<br>=&amp;\sum_{d=1}^nd\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac nd\rfloor}[\gcd(i,j)=1]a_{di}a_{dj}\<br>=&amp;\sum_{d=1}^nd\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac nd\rfloor}\sum_{e|i,j}\mu(e)a_{di}a_{dj}\<br>=&amp;\sum_{d=1}^nd\sum_{e=1}^{n}\mu(e)\sum_{i=1}^{\lfloor\frac n{de}\rfloor}\sum_{j=1}^{\lfloor\frac n{de}\rfloor}a_{die}a_{dje}\<br>=&amp;\sum_{T=1}^n\sum_{d|T}d\mu(\frac Td)\sum_{i=1}^{\lfloor\frac n{T}\rfloor}\sum_{j=1}^{\lfloor\frac n{T}\rfloor}a_{iT}a_{jT}\=&amp;\sum_{T=1}^n\varphi(T)\left(\sum_{i=1}^{\lfloor\frac n{T}\rfloor}a_{iT}\right)^2\end{aligned}$$<br>直接预处理即可.</p></li><li><p>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m\mathrm{lcm}(i,j)\=&amp;\sum_{i=1}^n\sum_{j=1}^m\frac{ij}{\gcd(i,j)}\=&amp;\sum_{i=1}^n\sum_{j=1}^m\sum_{k=1}^{\min}\frac{ij}{k}[\gcd(i,j)=k]\=&amp;\sum_{k=1}^{\min}\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}ijk[\gcd(i,j)=1]\=&amp;\sum_{k=1}^{\min}\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}ijk\sum_{d|\gcd(i,j)}\mu(d)\=&amp;\sum_{k=1}^{\min}k\sum_{d=1}^{\min(\lfloor\frac nk\rfloor,\lfloor\frac mk\rfloor)}d^2\mu(d)\sum_{i=1}^{\lfloor\frac n{kd}\rfloor}i\sum_{j=1}^{\lfloor\frac m{kd}\rfloor}j\=&amp;\sum_{T=1}^{\min}T\sum_{d|T}d\mu(d)\sum_{i=1}^{\lfloor\frac nT\rfloor}i\sum_{j=1}^{\lfloor\frac mT\rfloor}j\end{aligned}$$</p></li></ol><blockquote><p>前两步正常化卷积式子.<br>第三步特别注意,因为ij除以k,所以后面要乘上一个k.<br>第四步反演结论.<br>第五步特别注意乘上$d^2$,因为枚举d的时候从1开始意味着ij还会发生值的变化.<br>第六步就是最终答案.使用方法就是,先证明T后面的函数是一个积性函数,然后线性筛算出来,T那一项直接前缀和算出来,最后两项是等差数列直接套公式求.</p></blockquote><ol start="5"><li>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^md(ij)\=&amp;\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}[\gcd(x,y)=1]\=&amp;\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}\sum_{d|\gcd(x,y)}\mu(d)\=&amp;\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}\sum_{d=1}^{\min}\mu(d)[d|\gcd(x,y)]\=&amp;\sum_{d=1}^{\min}\mu(d)\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}[d|\gcd(x,y)]\=&amp;\sum_{d=1}^{\min}\mu(d)\sum_{i=1}^n\sum_{j=1}^m\Big\lfloor\frac ni\Big\rfloor\Big\lfloor\frac mj\Big\rfloor[d|\gcd(i,j)]\=&amp;\sum_{d=1}^{\min}\mu(d)\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac md\rfloor}\Big\lfloor\frac n{id}\Big\rfloor\Big\lfloor\frac m{jd}\Big\rfloor\=&amp;\sum_{d=1}^{\min}\mu(d)\sum_{i=1}^{\lfloor\frac nd\rfloor}\Big\lfloor\frac n{id}\Big\rfloor\sum_{j=1}^{\lfloor\frac md\rfloor}\Big\lfloor\frac m{jd}\Big\rfloor\end{aligned}$$</li></ol><blockquote><p>第一步是约数公式.<br>第二步是莫反.<br>第三步把条件提出来,让d的条件变成区间.<br>第四步提出来 $\mu$ .<br>第五步考虑xy的贡献是这么多直接乘进去.<br>第六步是消掉最后条件的,方法为直接枚举di和dj.<br>第七步是最后整理式子,程序中可以数论分块解决(后面的 $f$ 可以 $O(n)$ 预处理).</p></blockquote><ol start="6"><li>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\mathrm{lcm}(i,n)\=&amp;n\sum_{d|n}\sum_{i=1}^n\frac id[\gcd(i,n)=d]\=&amp;n\sum_{d|n}\sum_{i=1}^{\frac nd}i[\gcd(i,\frac nd)=1]\=&amp;n\sum_{d|n}\sum_{i=1}^{d}i[\gcd(i,d)=1]\=&amp;n\sum_{d|n}\frac{\varphi(d)d}{2}\end{aligned}$$</li></ol><blockquote><p>第一步注意,因为n是固定的所以d不能从1开始,需要 $d|n$ .<br>第二步注意因为n是不变的,而i是变的,所以只需要乘一个n就可以.<br>第三步是因为,n|d,所以 $\frac nd\in d$ ,就有这个式子.<br>第四步就是结论3.</p></blockquote><ol start="7"><li>求(f()是斐波那契数列第几项)<br>$$\begin{aligned}&amp;\prod_{i=1}^n\prod_{j=1}^mf(\gcd(i,j))\=&amp;\prod_{k=1}^{\min}f(k)^{\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}[\gcd(i,j)=1]}\=&amp;\prod_{k=1}^{\min}f(k)^{\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}\sum_{e|\gcd(i,j)}\mu(e)}\=&amp;\prod_{k=1}^{\min}f(k)^{\sum_{e=1}^{\min(\lfloor\frac nk\rfloor,\lfloor\frac mk\rfloor)}\mu(e)\lfloor\frac n{ke}\rfloor\lfloor\frac m{ke}\rfloor}\=&amp;\prod_{T=1}^{\min}\prod_{k|T}f(k)^{\mu(\frac Tk)\lfloor\frac n{T}\rfloor\lfloor\frac m{T}\rfloor}\=&amp;\prod_{T=1}^{\min}\Big(\prod_{k|T}f(k)^{\mu(\frac Tk)}\Big)^{\lfloor\frac n{T}\rfloor\lfloor\frac m{T}\rfloor}\end{aligned}$$</li></ol><blockquote><p>第一步考虑斐波那契数列每一项对于答案的贡献(乘几次).<br>第二,三步莫反.<br>第四步是想把e的范围提出来,于是令T=ke,把T范围(其实就是原先e的范围)写在最下面.<br>第五步是解决方法:括号里的式子只与T有关,与nm无关,可以预处理,然后快速幂算出来结果加上去就可以了.</p></blockquote><ol start="8"><li>求<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m\gcd(i,j)^k\=&amp;\sum_{i=1}^n\sum_{j=1}^m\Big(\sum_{d=1}^{\min} d[\gcd(i,j)=d]\Big)^k\=&amp;\sum_{d=1}^{\min}\sum_{i=1}^n\sum_{j=1}^md^k[\gcd(i,j)=d]\=&amp;\sum_{d=1}^{\min}d^k\sum_{x=1}^{\lfloor\frac{\min}d\rfloor}\mu(x)\Big\lfloor\frac n{dx}\Big\rfloor\Big\lfloor\frac m{dx}\Big\rfloor\=&amp;\sum_{T=1}^{\min}\Big\lfloor\frac n{T}\Big\rfloor\Big\lfloor\frac m{T}\Big\rfloor\sum_{d|T}d^k\mu(\frac Td)\end{aligned}$$<br>其中<br>$$\begin{aligned}f(n)=&amp;\sum_{d|T}d^k\mu(\frac Td)\=&amp;\prod_{p_i}f(p_i^{x_i})\=&amp;\prod_{p_i}(p_i^{x_i}\cdot\mu(1)+p_i^{k(x_i-1)}\cdot\mu(p_i))\=&amp;\prod_{p_i}p_i^{k(x_i-1)}(p_i^k-1)\end{aligned}$$</li></ol><p>或者这么写?<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m\gcd(i,j)^k\=&amp;\sum_{i=1}^n\sum_{j=1}^m\Big(\sum_{d=1}^{\min}d[\gcd(i,j)=d]\Big)^k\=&amp;\sum_{d=1}^{\min}\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac md\rfloor}(d[\gcd(i,j)=1])^k\=&amp;\sum_{d=1}^{\min}\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac md\rfloor}\Big(\sum_{e|\gcd(i,j)} d\mu(e)\Big)^k\=&amp;\sum_{d=1}^{\min}\sum_{e=1}^{\lfloor\frac{\min}{d}\rfloor}\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac md\rfloor}( d\mu(e))^k\=&amp;\sum_{d=1}^{\min}\sum_{e=1}^{\lfloor\frac{\min}{d}\rfloor}\Big\lfloor\frac n{de}\Big\rfloor\Big\lfloor\frac m{de}\Big\rfloor(d\mu(e))^k\=&amp;\sum_{T=1}^{\min}\sum_{d|T}\Big\lfloor\frac n{T}\Big\rfloor\Big\lfloor\frac m{T}\Big\rfloor(d\mu(\frac Td))^k\=&amp;\sum_{T=1}^{\min}\sum_{d|T}\Big\lfloor\frac n{T}\Big\rfloor\Big\lfloor\frac m{T}\Big\rfloor\varphi^k(d)\end{aligned}$$</p><blockquote><p>第一步是常见展开环节.<br>第二步是把次方乘进去(注意不要认为就是例1的phi的次方)<br>第三步是莫反.<br>第四步是令T=dx,代换进去.<br>最后的式子左边是积性函数,也就直接线筛处理了,复杂度 $O(n+T\sqrt n)$ .</p></blockquote><p>9.计算<br>$$\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m\mathrm d(i)\mathrm d(j)\mathrm d(\gcd(i,j))\=&amp;\sum_{k=1}^{\min}\mathrm d(k)\sum_{i=1}^n\sum_{j=1}^m\mathrm d(i)\mathrm d(j)[\gcd(i,j)=k]\=&amp;\sum_{k=1}^{\min}\mathrm d(k)\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}\mathrm d(ik)\mathrm d(jk)[\gcd(i,j)=1]\=&amp;\sum_{k=1}^{\min}\mathrm d(k)\sum_{e|\gcd(i,j)}\mu(e)\sum_{i=1}^{\lfloor\frac nk\rfloor}\sum_{j=1}^{\lfloor\frac mk\rfloor}\mathrm d(ik)\mathrm d(jk)\=&amp;\sum_{T=1}^{\min}\mathrm d(k)\mu(\frac Tk)\sum_{i=1}^{\lfloor\frac nT\rfloor}\sum_{j=1}^{\lfloor\frac mT\rfloor}\mathrm d(iT)\mathrm d(jT)\=&amp;\sum_{T=1}^{\min}\sum_{i=1}^{\lfloor\frac nT\rfloor}\mathrm d(iT)\sum_{j=1}^{\lfloor\frac mT\rfloor}\mathrm d(jT)\end{aligned}$$</p><blockquote><p>第一步是枚举gcd.<br>第二步是除一个d.<br>第三步是莫反.<br>第四步是套路替换.<br>第五步是因为 $d*\mu=1$ ,直接消掉了.</p></blockquote><ol start="10"><li>计算<br>$$\begin{aligned}&amp;\sum_{i=1}^{N}\sum_{j=1}^{N}\sum_{p=1}^{\lfloor\frac Nj\rfloor}\sum_{q=1}^{\lfloor\frac Nj\rfloor}[\gcd(i,j)=1][\gcd(p,q)=1]\=&amp;\sum_{i=1}^{N}\sum_{j=1}^{N}\sum_{p=1}^{N}\sum_{q=1}^{N}[\gcd(i,j)=1][\gcd(p,q)=j]\=&amp;\sum_{i=1}^{N}\sum_{p=1}^{N}\sum_{q=1}^{N}[\gcd(i,p,q)=1]\=&amp;\sum_{i=1}^{N}\sum_{p=1}^{N}\sum_{q=1}^{N}\sum_{d|\gcd(i,p,q)}\mu(d)\=&amp;\sum_{d=1}^N\sum_{i=1}^{\lfloor\frac Nd\rfloor}\sum_{p=1}^{\lfloor\frac Nd\rfloor}\sum_{q=1}^{\lfloor\frac Nd\rfloor}\mu(d)\=&amp;\sum_{d=1}^N\mu(d)\left\lfloor\frac Nd\right\rfloor^3\end{aligned}$$</li></ol><blockquote><p>我们发现把j带回去能得到更好的效果…<br>于是剩下的就简单了,基本上是板题.</p></blockquote><ol start="11"><li>给一个数列 $a_n$ ,如果两个数之间的 $\gcd$ 不等于1那就有一条通路,现在求从1到n的通路有多少条.(998244353取模)</li></ol><p>设dp[i]表示从1到i有多少条路.转移: $dp_i=\sum_{j=1}^{i-1}dp_j[\gcd(a_i,a_j)\neq1]$ ,初始化dp1=1,答案是dpn.</p><p>设 $s_i=\sum_{j=1}^idp_j$ ,上式转换成 $dp_i=s_{i-1}-\sum_{j=1}^{i-1}dp_j[\gcd(a_i,a_j)=1]$ ,莫反之后就是<br>$$dp_i=s_{i-1}-\sum_{j=1}^{i-1}dp_j\sum_{e|\gcd(a_i,a_j)}\mu(e)$$<br>怎么算这个式子呢…</p><p>开一个桶表示所有在i前面有这个因子的dp和,于是直接枚举因子然后乘上mu就行了…</p><h2 id="一些比较牛逼的计算">一些比较牛逼的计算</h2><ol><li>欧拉函数的定义:p是质数,有<br>$$\varphi(j)=j\cdot\prod_{p|j}\frac{p-1}{p}$$</li><li>计算卷积 $\mathrm{id}<em>\varphi$ :<a href="https://www.cnblogs.com/PinkRabbit/p/8278728.html">摆结论</a>,由于直接分解即可,是 $O(\sqrt n)$ :<br>$$n=p_1^{b_1}p_2^{b_2}…p_k^{b_k}$$<br>$$\mathrm{id}</em>\varphi(n)=n\prod_{i=1}^k\frac{b_ip_i-b_i+p_i}{p_i}$$<br>缺点:一般积性函数计算,数论底子不扎实,化卷积式子(见题太少,紫题不满足需求了,建议来点黑的).</li></ol>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> NumberTheory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的测试以及更换工作</title>
      <link href="/2024/06/30/00003%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E5%B7%A5%E4%BD%9C/"/>
      <url>/2024/06/30/00003%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>首先是网页测试:</p><h1>这是一级标题</h1><h2 id="这是二级标题">这是二级标题</h2><h3 id="这是三级标题">这是三级标题</h3><h4 id="这是四级标题">这是四级标题</h4><h5 id="这是五级标题">这是五级标题</h5><h6 id="这是六级标题">这是六级标题</h6><p><strong>这是粗体</strong></p><p><em>这是斜体</em></p><p><s>这是删除</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114514</span></span><br></pre></td></tr></table></figure><blockquote><p>???</p><blockquote><p>???</p></blockquote></blockquote><table><thead><tr><th style="text-align:left">表格测试</th><th style="text-align:left">1</th><th style="text-align:left">2</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:left">4</td><td style="text-align:left">5</td></tr></tbody></table><p>注意:表格里面的 <code>|:--:|</code> 的冒号是设置对齐的,<code>|:-|</code> 是左对齐, <code>|-:|</code> 是右对齐, <code>|:-:|</code> 是居中,Markdown不支持表格合并语法.</p><p>无序列表</p><ul><li>114514</li><li>114514</li><li>114514</li></ul><p>有序列表</p><ol><li>114514</li><li>114514</li><li>114514</li></ol><p><a href="https://jlu.edu.cn">链接</a></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/a1g4z25g.png" alt="云盘图炸了" title="Kingdom Two Crowns"></p><p>换行</p><hr><h1>最后笔者要做的更换</h1><p>洛谷的LaTeX编辑器和Flu博客用的不太一样,需要对语法稍加改变.</p><ol><li>MarkDown的代码结束,从<code>`````</code>变成<code>```</code></li><li>LaTeX的换行从<code>\\</code>改成<code>\\\</code></li><li>LaTeX的粗体从<code>\bold</code>改成<code>\mathbf</code></li><li>LaTeX的无穷从<code>\infin</code>改成<code>\infty</code></li></ol><h2 id="一点提示">一点提示</h2><p>常见LaTeX代码:(最后面那个是空格)<br>$$\ge,\le,\perp,\approx,\sim,\pm,\quad,$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\ge</span>,<span class="keyword">\le</span>,<span class="keyword">\perp</span>,<span class="keyword">\approx</span>,<span class="keyword">\sim</span>,<span class="keyword">\pm</span>,<span class="keyword">\quad</span>,</span><br></pre></td></tr></table></figure><p>常见LaTeX字体:(最后那个是默认的)<br>$$\texttt{LOrem},\textsf{LOrem},\textrm{LOrem}\\mathbb{LOrem},\mathcal{LOrem},\mathscr{LOrem},\mathfrak{LOrem},\\mathrm{LOrem},\mathbf{LOrem},LOrem$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\texttt</span>,<span class="keyword">\textsf</span>,<span class="keyword">\textrm</span></span><br><span class="line"><span class="keyword">\mathbb</span>,<span class="keyword">\mathcal</span>,<span class="keyword">\mathscr</span>,<span class="keyword">\mathfrak</span></span><br><span class="line"><span class="keyword">\mathrm</span>,<span class="keyword">\mathbf</span>,默认</span><br></pre></td></tr></table></figure><h2 id="标签制定">标签制定</h2><p>那就这样吧,大科目可以写学习笔记,小科目(比如莫比乌斯反演)不用写学习笔记.</p><p>tag是标签,一个文章可以有很多个标签.目前的标签有:</p><p>Contest:竞赛特有标签.<br>C++:万恶之源.<br>Algorithm:算法标签.<br>NumberTheory:数论标签.<br>OTH:太小众了,不知道分到哪个,或者纯纯工具的网页.<br>Physics:大物的特有标签.<br>Python:爬虫.</p><p>category是分类,一个文章只能有一个分类.目前的分类有:(将来可能会出像OIWiki一样的数据结构分类啊分类啊啥的)</p><p>DataStructure:数据结构标签.<br>Math:数学分类.<br>OTH:其他分类.<br>Graph&amp;Network:图论.<br>MachineLearn:机器学习.</p><h2 id="不常用但是还会用到的部分LaTeX">不常用但是还会用到的部分LaTeX</h2><p>数论<br>$\equiv$ <code>\equiv</code><br>$\prod$ <code>\prod</code><br>$\ge$ <code>\ge</code><br>$\le$ <code>\le</code><br>$\binom{114}{514}$ <code>\binom&#123;114&#125;&#123;514&#125;</code><br>$\coloneqq$ <code>\coloneqq</code> 这个符号的意思是&quot;a的定义是b&quot;<br>$\eqqcolon$ <code>\eqqcolon</code> 这个符号的意思是&quot;a记作b&quot;</p><p>离散<br>$\cup$ <code>\cup</code><br>$\cap$ <code>\cap</code><br>$\land$ <code>\land</code><br>$\lor$ <code>\lor</code><br>$\exist$ <code>\exist</code><br>$\forall$ <code>\forall</code></p><h2 id="分区">分区</h2><p>现在的 <code>Hexo</code> 发布名称前会有名称,可以根据编号快速找到想要的条目.<br>目前开了 1e5 的范围.做分区如下:</p><ol><li><code>00000-09999</code> 这段分给杂项知识点,可能不会更改的东西.</li><li><code>10000-19999</code> 这段分给 <code>ACM</code> ,讲述算法知识.</li><li><code>20000-29999</code> 这段分给 <code>比赛专题</code> ,写一些补题啊之类的.</li><li><code>30000-39999</code> 这段分给 <code>生活经历</code> ,分享Flu的见闻以及详解.</li></ol><p>约定课程的学习笔记一律扔到杂项,因为:首先是课程学过就废了,其次是,Flu认为课程深度不足以归为 “有用” 那一档,这是一件比较可悲的事情.(有点心疼数据结构的sstl代码,但是这是必要的牺牲)</p><p>从此Flu的博客再也不用来回按时间来回找了…</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计A学习笔记</title>
      <link href="/2024/06/29/00004%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/29/00004%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面:OI打的好不等于这堂课不用认真学.OI是面向过程设计,搞出答案就完了,这个则是封装啊啥的一堆东西.OI确实可以让人灵活运用各种语法,但是这个$class$用法很多,都要认真看.</strong></p><p>程序=(算法+数据结构)s,使用对象框架组装程序.说白了就是,时代变了,有$MONEY$了,撑得起更大的程序了,不面向过程了,有对象了(雾)…</p><p>好像一个学期就只学了一个$class$的用法,有<strong>封装,继承,多态</strong>,这是三个基本特征.</p><p><strong>类与对象</strong>:类($class$)只是一个空的框架,对象是由类衍生出来的.它和结构体($struct$)的区别有以下三点:<br><strong>1.它有权限划分</strong>.这就是接下来会讲的$public,private,protected$.<br><strong>2.它有全局变量</strong>.就是那个$static$,虽然笔者不知道这玩意有啥用…反正$class$它就是有.<br><strong>3.它有合构析构函数</strong>,更方便用了.</p><p>$\mathbf{public,private,protected}$三种属性:$public$是所有人都能访问的,$private$和$protected$都是对象内部随便访问,对象外不可访问的,这俩的区别在继承(往下)那里会有介绍.默认啥也不写就是$private$,在碰到下一个标志前都是这个权限.</p><p>$\mathbf{static}$关键字:静态成员,静态函数.用法就是和$inline,register$一样,加在函数或者变量名前就好.$static$的作用是让函数或变量变成静态的,就是全局变量,想象一个学生对象,老师就是静态的,学生一届又一届,但是老师不变(排除特殊状况),老师就是静态的.老师根本不认识对象,只知道有多少个学生,学生去哪了被销毁了和老师没关系,大概这个意思.<strong>注意</strong>静态变量使用前记得先分配内存.举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">node</span>()&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">node</span>()&#123;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> node::cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">node a;</span><br><span class="line">a.<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那句$cnt$声明删了会出错,因为没分配内存.$static$修变量的作用主要有以下三点:<br><strong>1.</strong> 流动统计.实时统计当前开了多少个对象.<br><strong>2.</strong> 作为标记符,代表特定的事件是否发生,比如磁盘读写,同时只能有一个读写磁盘,就用标记表示.<br><strong>3.</strong> 链表头指针或尾指针.</p><p><strong>类名遮挡</strong>:就是名字重了咋办的意思.类名允许和变量名一致,每次需要使用变量时就直接用,用到同名类时就加$class\space name$即可.同理函数中的变量名可以与类中的变量名重,使用的时候加上$::$即可.</p><p><strong>合构函数,析构函数</strong>:类新建成员初始化会调用的函数,成员被delete时调用的函数.新建一个对象默认会分配一个合构函数和一个析构函数,但是他们什么也不做,通过自己写合适的函数实现合理的初始化.<br>格式:与类同名,没返回值(初始化要什么返回值),析构就加一个~即可.<br><strong>注意</strong>系统在编译阶段检查到你写了合构或者析构之后默认的啥也不做合构或者析构函数会消失,也就是说你要是想合构函数传参的话记得写默认的情况,省的运行出错.下面是一个简简单单的示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> val)&#123;</span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line">b=val;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> val,<span class="type">int</span> vval,<span class="type">int</span> vvval)&#123;</span><br><span class="line">a=val;</span><br><span class="line">b=vval;</span><br><span class="line">c=vvval;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">node</span>()&#123;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,cnt,a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> node::cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">node <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">node <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>::</strong> 类外可以写函数.方法对是类内声明,类外写$xx::xx(xx){xx}$函数即可写函数.类直接访问成员都是$::$,指针访问类成员用$-&gt;$,一个声明过的对象的直接调用就$.$就行了.</p><p><strong>默认值</strong>:函数在声明时候传参可以这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ko</span><span class="params">(<span class="type">int</span> val=<span class="number">10</span>,<span class="type">int</span> num=<span class="number">20</span>)</span></span>&#123;xx&#125;</span><br></pre></td></tr></table></figure><p>这样做的意思是,如果调用这个函数时缺少参数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koi=<span class="built_in">ko</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>然后第一个数就会被调用的传参顶掉,第二个参数由于少会使用20这个默认值.注意缺省参数只能在后面缺,前面(比方说下面这个就是错的)缺参数系统不给过:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koi=<span class="built_in">ko</span>(,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>类之间的关系</strong>:互不干涉内政.比如我需要一个学生类,学生里面套一个学生ID的类,此时声明一个学生会优先调用套娃里面的ID合构函数,然后再调用套娃外面的学生的构造函数,自动调用的,不用管.<br>但是这导致一个问题.我希望<strong>给ID传参</strong>该咋办呢?在学生的合构函数不能调用ID的合构函数,因为不能干涉内政,但是如果新建一个ID会直接在合构函数运行之后销毁掉(函数内部声明变量开的栈区空间),咋子办?</p><p>新语法来了,专门解决这个问题的(如果有好多个对象就逗号隔开,像下面一样).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> a=<span class="number">10</span>,<span class="type">int</span> b=<span class="number">10</span>):<span class="built_in">ID</span>(b),<span class="built_in">xx</span>(xx)&#123;xx&#125;</span><br></pre></td></tr></table></figure><p>这个冒号后面括号前面的就是对ID先进行初始化,然后再对主的学生对象进行合构的体现.如果不写冒号以及后面的合构函数,就会调用默认无参数的合构函数.</p><p><strong>新.天.地</strong>:这个冒号很灵性啊,就可以对常量数据成员和引用数据成员进行初始化.比方说下面一段代码就初始化了一个常量和一个引用成员.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val):<span class="built_in">op</span>(<span class="number">114514</span>),<span class="built_in">ip</span>(val)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> op;</span><br><span class="line"><span class="type">int</span> &amp;ip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="number">114</span>;</span><br><span class="line"><span class="function">ko <span class="title">aaa</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造对象的顺序</strong>:以下几点:<br><strong>1.</strong> 局部和静态对象按照声明顺序构造(函数中新建一个变量)<br><strong>2.</strong> 静态对象只被构造一次<br><strong>3.</strong> 全局对象都在$main$之前进行构造<br><strong>4.</strong> 全局对象构造时无特殊顺序<br><strong>5. 成员以其在类中的声明顺序构造</strong>:解释一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val):<span class="built_in">b</span>(val),<span class="built_in">a</span>(b+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ko <span class="title">a</span><span class="params">(<span class="number">114</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">858993459</span> <span class="number">114</span></span><br></pre></td></tr></table></figure><p>这份码因为最底下$ab$顺序导致调用合构函数时顺序变化,产生了野值.</p><p><strong>重载运算符</strong>:这里主要讲$++$和$–$的运算.你是否想过如何重载$a++$?这里就会有介绍.<br>首先,大家都知道的,<strong>内部类型不允许重载</strong>,比方说$int$.这个很好理解,这玩意要让你搞了$C++$会大乱的.<br>然后是操作数变不了,还有几个诸如$-&gt;$,$?:$,$::$,$.$,$@$(新运算符)不允许重载之类的规定.<br>如下就是一个简单的码,其中重载了自加:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">int</span> val=<span class="number">10</span>,<span class="type">int</span> vval=<span class="number">10</span>):<span class="built_in">b</span>(val),<span class="built_in">a</span>(vval)&#123;&#125;</span><br><span class="line">~<span class="built_in">ko</span>()&#123;&#125;</span><br><span class="line">ko&amp; <span class="keyword">operator</span> ++()&#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">ko <span class="keyword">operator</span> ++(<span class="type">int</span>)&#123;</span><br><span class="line"><span class="function">ko <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ko <span class="title">a</span><span class="params">(<span class="number">4</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">(a++).<span class="built_in">prr</span>();</span><br><span class="line">(++a).<span class="built_in">prr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是自加,$C++$约定区别在于一个$int$.</p><p>$\mathbf{new,delete}$:为什么我们需要它?<br>原因很简单,分配空间的时候,$new$会调用合构函数,而$delete$的时候又会调用析构函数.也就是说,不常用的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>其实是一个调用合构函数的过程.原来是这么回事.</p><p><strong>拷贝构造函数</strong>:为了防止乱用$=$导致权限分配或者数据分配混乱的问题,有了拷贝构造函数.一般传参传$&amp;$对象.<br><strong>注意</strong>:有的时候对象分配了资源(比如堆内存),拷贝直接复制地址是要出错的,所以自己写一个拷贝构造函数分配内存很有必要.</p><p><strong>无名对象</strong>:正如你所见,没名字的对象.这玩意有用,写作:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ko</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>用法有:<br><strong>1.</strong> 函数参数.假如函数传参要一个对象,就可以写一个无名对象顶上去.<br><strong>2.</strong> 初始化引用以及初始化对象定义.如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ko&amp; koi=<span class="built_in">ko</span>(<span class="number">10</span>);</span><br><span class="line">ko koip=<span class="built_in">ko</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>C++的试探</strong>:大家都知道,在$C++$中,$5/2$和$5.0/2$是两个完全不一样的东西.$C++$知道如何把整数转成$double$,也知道计算结果.但是对于我们写的类,$C++$的格式转换要靠我们实现.<br>如何实现呢?就靠我们写的合构函数.<br>如下是一段$C++$进行格式转换的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS<span class="comment">//这句话的意思是在VS上使用strcpy这种不安全的函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>(<span class="type">const</span> <span class="type">char</span> arg[])&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(arr,arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ko</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> arr[<span class="number">30</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">koi</span><span class="params">(ko op)</span></span>&#123;</span><br><span class="line">op.<span class="built_in">prr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">koi</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到,传参传一段字符串,自动匹配了一个合构函数,然后调用了,进行后续的运算($const\space char[\space]$和$char[\space]$不一样的,不然匹配不上).<br>$C++$有几点要求:<br><strong>1.</strong> 只会尝试有一个参数的合构函数<br><strong>2.</strong> 当有二义性时立即放弃尝试(比如,学生老师用一个打印函数,名字又是都有的部分,$C++$发现可以是老师也可以是学生,立刻退出了).</p><p>$\mathbf{friend}$:友元(杰哥)函数.有的时候普通函数也需要访问对象的保护成员(聴話,讓我康康!),为了加快效率.比如矩阵和向量的乘法,乘法的函数不可能同时是两个函数的成员,所以就让它是个普通函数,通过友元的联系来实现乘法.举个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>;<span class="comment">//这行的作用是让下面的friend中的prr认识tsc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tsc</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(ko a,tsc b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a.num[i]+b.num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ko a;</span><br><span class="line">tsc b;</span><br><span class="line"><span class="built_in">prr</span>(a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元函数除了对于标记友元的可以看他的赤酱外,就是个普通函数.一个类的成员可以是另一个类的友元,使用$::$选中函数,一个类也可以是另一个类的友元,直接$friend\space class\space name$.友元的第二个作用:方便重载操作符的使用.</p><p><strong>继承</strong>:就是在原有的状态上加点东西,让他变成一个新的类.比如,研究生在大学生基础上加点自己的东西.语法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">yanjiusheng</span>:<span class="keyword">public</span> daxvesheng&#123;xx&#125;;</span><br></pre></td></tr></table></figure><p>继承有什么作用呢？<br><strong>1.</strong> 可以通过改一个小类来实现继承大类的修改,更方便维护.<br><strong>2.</strong> 继承可以让$C++$做隐式格式转换.比如函数要求传大学生的参,我传一个研究生的参,也是可以被接受的.如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ko</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ko</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">prr</span><span class="params">(ko a)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>:<span class="keyword">public</span> ko&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tsc</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(ko a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a.num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ko a;</span><br><span class="line">tsc b;</span><br><span class="line"><span class="built_in">prr</span>(a);</span><br><span class="line"><span class="built_in">prr</span>(b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承方式</strong>:在这里,$protected$和$private$会进行区分.<br>一个类作为基类(大学生)时,其$public$和$protected$都可以随便被派生类(研究生)任意访问和调用,但是$private$真的就是谁也用不了,除非声明友类.<br>看例子,冒号后面的$public\space ko$这个权限分给的是类之后的东西.假如改成$private$或者$protected$,下面的$prr(b)$就会报错,理由是成员不可访问.(反正就记住$private$最神秘就对了,严严实实的)<br>注意到例子中的$ko$和$tsc$都有名字叫$num$的数组,为什么不冲突?其实只要访问$ko$中的$num$数组时加个$ko::$就没问题了.</p><p><strong>调整访问控制</strong>:就是改权限.冒号后面加的权限因为是取高的很容易啥也不给看,就需要改权限.如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">tsc</span>:<span class="keyword">public</span> ko&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> ko::num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就把$tsc$派生类的$ko$中的$num$调成了公有了.</p><p>继承和组合的关系:略,一堆废话.</p><p>多继承:加逗号隔开,加权限即可.但是这个时候注意变量名字加$::$区分是源自哪里的.</p><p><strong>虚拟继承</strong>:加$virtual$.虚拟继承的含义是,如果没有该类就新建一个,如果有了就不用动了,用建好的那一个.比如,$victim$和天选和$tsc$(再临)都是$\mathbf{Alan\space Becker}$画的,但是再临拥有前两者的一切战力,怎么表示?代码如下:</p><p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.sEdp7C8oeRzmx3cKBM0yxQAAAA?rs=1&amp;pid=ImgDetMain" alt="炸了"><br>再临</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">animation</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Running.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> atk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">victim</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> animation&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Revenge.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">the_chosen_one</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> animation&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dam</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Crushing.Damaging.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">the_second_coming</span>:<span class="keyword">public</span> victim,<span class="keyword">public</span> the_chosen_one&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AN</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Drawing.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">the_second_coming a;</span><br><span class="line">a.<span class="built_in">run</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样加$virtual$就会让再临只有一个$animation$了.</p><p><strong>注意</strong>:虚拟继承和虚拟函数是两个截然不同的概念.</p><p><strong>构造顺序</strong>:你学过成员里面套类,继承,虚拟,etc.<br>真的建一个类他们的顺序怎么办呢?为此规定:<br><strong>1.</strong> 虚拟先构造,顺序按照继承顺序<br><strong>2.</strong> 非虚拟的继承构造,按照继承顺序<br><strong>3.</strong> 成员对象<br><strong>4.</strong> 类自己的合构函数</p><p><strong>多态:若语言不支持多态,则不能被成为面向对象的语言.</strong></p><p>这里就会讲$virtual$的用法.比如,一个订单系统,分普通用户和$\mathbf{VIP}$用户,他们的买东西结算算法不太一样(打折),但是VIP除了打折好像也没啥不同了,我只想用一个函数实现计算,就需要用到虚函数.</p><p>$\mathbf{virtual}$:和$inline$一样,挂在函数的前面发挥作用.它的意思是迟后联编,说人话就是会覆盖,后面的同名函数会覆盖前面的函数,所以后面的函数加不加$virtual$其实没区别,只要前面加了就行了.比个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">user</span>(<span class="type">int</span> val=<span class="number">998</span>)&#123;</span><br><span class="line">buy=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> buy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> buy;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>:<span class="keyword">public</span> user&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VIP</span>(<span class="type">int</span> val=<span class="number">998</span>):<span class="built_in">user</span>(val)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> buy/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">VIP <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a.<span class="built_in">calc</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个简单的VIP用户打折的程序,重写了$calc$让不同用户计算方式不同.</p><p><strong>失败的迟后联编</strong>:计算函数传参不同,返回值不同,etc所有不能被看成相同函数的情况.</p><p><strong>可返回不同类</strong>:B继承A的,函数有两个,一个返回值是A,一个返回B,这个时候就可以用$virtual$进行联编.</p><p><strong>虚函数的限制</strong>:众所周知,$C++$追求快.所以只会选择个别的函数整成虚函数,那么限制就来了:内联不可以,只有类的成员函数才可以,合构析构不可以,静态不可以.</p><p><strong>类的冗余</strong>:害,其实就是自己关系没导清,多整了几个变量…解决办法就是多开几个类包含以下就没事了…</p><p><strong>抽象类与纯虚函数</strong>:只要有至少一个纯虚函数,这个类就是抽象类.纯虚函数就是函数声明时后面加=0,前面加$virtual$.比如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">ko</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>首先注意,纯虚函数不可以实例化.也就是说括号后面大括号不能有.抽象类不可以实例对象,所以抽象类就是用来继承的,继承的子类重写那个纯虚函数,就完了,子类可以对象化.所以抽象类又被称作接口.</p><p><strong>为什么要抽象类</strong>?方便指针的使用.先前提到了,继承的情况下,派生类的指针完全可以当成母类的指针去用,因为成员是一样的.这里就是可以用抽象类指针传参,然后调用直接放上派生类的指针,$C++$会自己匹配的.</p><hr><h3 id="笔者最后追加的东西-分文件编写">笔者最后追加的东西:分文件编写</h3><p>太重要了,做课设几千行代码不分文件很难维护的(虽然笔者就是这样硬写的…QwQ),而且今天才发的通知要求作业分文件编写…啊总之我就是加了这么个东西,以飨($\mathbf{xi\check{a}ng}$)读者(老套话了).</p><p>那啥,现在你要写一个$Visual Studio$程序.人有五名,主文件有三个.</p><p>首先,要写好一个头文件.头文件一般是$.h$的格式.新建一个空项目,添加一个空项.</p><p>头文件的<strong>基本结构</strong>:会有详细注释的,放心看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:function.h</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">//这句话的意思是防止头文件重复包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS<span class="comment">//安全问题,后面会讲到</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span><span class="comment">//在这里包含所有头文件名</span></span></span><br><span class="line"><span class="comment">//#include&lt;xxx&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FUNCTION_H<span class="comment">//如果没有定义这个,那就执行以下句子,还是防止头文件多次包含的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNCTION_H<span class="comment">//定义这个,其实名字随便起的,一般大家都这么写</span></span></span><br><span class="line"><span class="comment">//头文件开始写了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> n;<span class="comment">//在function.cpp中定义的变量这里写成这个</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(<span class="type">int</span> num)</span></span>;<span class="comment">//在function.cpp中声明的函数这里写成这个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//头文件写完了结束了</span></span></span><br></pre></td></tr></table></figure><p>头文件对应的实现文件的<strong>基本结构</strong>(头文件就是画大饼的):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:function.cpp</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prr</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">//头文件只声明,没大括号,这里实现头文件的大饼</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主文件的<strong>基本结构</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name:main.cpp</span></span><br><span class="line"><span class="comment">//author:NaraFluorine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;function.h&quot;</span><span class="comment">//为什么不用尖角括号后面会讲</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="number">114</span>;</span><br><span class="line"><span class="built_in">prr</span>(<span class="number">250</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好,这就完了.每个模块负责不同的函数,可以把大工程划分为一个一个小零件,一部分出错不需要整体重新编译.</p><p>有个部分忘写了,是$class$的用法,记住一个事情,$class$的声明都在头文件里面,然后函数就是正常的画大饼就好,但是对应的$cpp$要写成展开的,同时注意标清哪个$class$,比如下面的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//poly.h节选</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">poly</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">a</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//poly.cpp节选</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly::a</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//展开写函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对于重载运算符实例化可以写在外面,但是记得两点不同,一是操作数记得整俩,二是记得声明友元,否则看不了内存(这是全局重载和成员重载的区别).</p><p><strong>问题解答</strong>:<br><strong>1.</strong> 安全问题:$VS$是不赞成你使用$scanf$和$printf$的,因为他们不安全.为什么不安全笔者不知道,反正$VS$不赞成你用,想用可以选择更安全的$scanf_s$,或者像笔者那样加上这句话就可以无视警告接着用.<br><strong>2.</strong> 关于$include$后面的&lt;&gt;“”:尖角和引号的差异在于优先搜索哪里.正常的使用尖角的情况是大家使用库文件的时候,就是那些众所周知的头文件,如$stdio.h$或者$algorithm$,系统看到尖角会优先搜索库文件.然后引号的意思是系统优先搜索该$.cpp$对应的文件夹找这个头文件,一般自己写头文件的会用引号包起来,当然你用引号包库文件也不会有错,使用引号包住功能实现良好的$.cpp$文件也能运行的.<br><strong>3.</strong> $VS$:$Microsoft\space Visual\space Studio$,简称$VS$,是一个编辑器.一般写大型项目会用到这个东西 <s>,比如我们组四千五百行的课设</s>.为什么要用$VS$而不是$Dev$,因为功能全.但是由于安全啊(上文)或者不让用$__int128$呀,编译慢啊(初次启动编译三十秒,后面一两秒出来)之类的,笔者自己学习算法还是喜欢用$Dev$.</p><p>好$\mathbf{tm}$长啊,我半个学期这是差了多少节课啊QwQ…</p><p>但是最起码我把几百页的书用一篇文章就讲完了,这是十分好学,一看就懂的.</p><p><strong>UPD20240609:</strong></p><h1>做题总结</h1><p>众所周知,学的和考试考的往往是两个东西.Flu收获不小(套话).</p><p><strong>C++内存分配</strong>:<a href="https://blog.csdn.net/weixin_48896613/article/details/127371045">算了,懒得写了,看这个吧</a></p><h1>面向对象Cache</h1><p>这里放一些做题碰到的一些问题,随着考试结束,这篇帖子也会结束.</p><p>C++多文件的好处不是能同时编译生成多个可执行文件.</p><p>执行a.f(100)成功时,f可能的参数表不可以是f(int&amp;),但是可以是f(const int&amp;)</p><p>protected方式下,派生类对象的指针不可以转换成基类指针.</p><p><strong>静态成员的初始化</strong>:</p><p>一个类不能实例化对象有哪几种情况:1抽象类2构造函数是私有的</p><p>静态成员函数没有this指针(所以不可以加virtual,const).</p><p>this指针是一个指针常量.(<code>const A*</code>)指向<strong>类对象</strong> 而不是<strong>类类型</strong>,小心,看清楚了</p><p><strong>友元</strong>:C++友元不具有传递性</p><p>某些运算符重载只能在类内实现:<code>= () [] -&gt;</code></p><p>const的作用:先向左匹配,左边没有东西才会向右匹配,如:<code>int* const p</code>表示一个常指针,而<code>const int* p</code>和<code>int const* p</code>表示都是一个指向常量的指针.</p><p>构造函数要么都有缺省值,要么都没有缺省值. 对</p><p><strong>内联函数</strong>:运行时插到每一个调用函数的地方.</p><p>抽象类通常也需要构造函数.</p><p><strong>常成员函数</strong>:可以被非常成员调用.</p><p><strong>常量对象</strong>:只可以调用类的常成员函数和静态成员函数,不可以调用非常成员函数.</p><p>不允许创建指向自身类型的常量指针和引用.(套娃的官方说法)</p><p>构造函数重载错误:<code>A();A(int=0,int=0);</code></p><p>耦合度:继承的耦合度高于组合,实战中应尽量选择组合而不是继承(也就是耦合度尽量低).</p><p>通过声明私有禁止乱拷贝,拷贝构造函数.</p><p><strong>虚表和虚指针</strong>:虚指针每个对象都有一个,但是虚表是每个类只有一个的东西(也可以有虚表组).</p><p><strong>虚基类</strong>:C++由于支持多重继承可能导致名字冲突,所以提供了这个.虚拟继承的基类就叫虚基类.</p><p><strong>虚函数访问</strong>:非虚非静可以访问虚函数.</p><p>接口:C++支持接口.</p><p>B b和B* pB两种格式作为类A的数据成员的区别:Bb是一般不需要拷贝构造函数的,而pB通常需要拷贝构造函数.pB的时候B可以是抽象类而Bb不可以是抽象类.</p><p><strong>关联,聚集关系</strong>:关联分为单向关联和双向关联,双向关联是A中有B,B中有A的这么一个关系,聚集可以理解为组合,代码上没有差异.</p><p><strong>封装</strong>:可以定义私有成员和保护成员.</p><p><strong>多态</strong>:面向对象语言中,接口的多种不同实现方式即为多态.多态性允许父对象被设置为和子对象相等的技术,赋值以后父对象可以根据当前赋值给子对象的特性以不同方式运作,允许子类将类型指针赋值给父类型指针.多态性在C++和Object Pascal中都是用虚函数实现的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a *ppp=<span class="keyword">new</span> c;</span><br><span class="line">ppp-&gt;<span class="built_in">fuck</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的真谛:声明一个大的,然后因为大的覆写抽象类了,</p><p>类中没虚函数就没虚表了吗?nonono,如果他的基类有,他还是会有虚表的.</p><p>private和protected的区别:继承后子类可见不可见的问题.</p><p>catch支持多态地捕获派生异常.异常可以本层处理也可以部分处理后向上层抛出.(类型不需要严格相同)异常可以在外层函数中捕获,也可以在当前函数中捕获.举例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="built_in">f</span>();&#125;<span class="built_in">catch</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果f中没有try catch,f可以被catch捕获.</p><p>父子同名函数:1都不是虚函数2父不是虚函数子类是虚函数3都是虚函数</p><p><strong>函数占位参数</strong>:和默认值相反,占位参数只要出现必须填满.而且,正如其名,他只有类型没有名字,而且必须对应上,比个例子:<code>f(int,int k,int i=0)</code>这里的没名字int就叫占位参数,他只要出现就必须被填上,否则函数会匹配失败.这种占位的也可以有参数,比方说<code>int=0</code>之类的</p><p>内存:构造时new了好多内存是不算在类大小里面的.</p><p>成员函数:A以下情况不可以调用B:1A是静态函数B不是2A是常成员函数B不是</p><p><strong>函数重载</strong>:体会一下,必须<strong>完全一样</strong> 才能触发重载.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>)</span></span>;和<span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span>和<span class="type">int</span> <span class="title">f</span><span class="params">()</span><span class="type">const</span></span></span><br></pre></td></tr></table></figure><p>不会构成二义性,会构成重载.判断依据:参数个数,参数类型,参数顺序,函数是否为const.</p><p><strong>基类的成员函数可以和派生类重名,但是数据成员不可以重名</strong></p><p>抽象类的基类也是抽象类.</p><p>如何避免A外再派生其他类:同时满足:A的构造函数正常public写,然后A的析构函数设置成私有而且不进行实现(或者设置成纯虚函数)可以防止其他类从A派生.</p><p><strong>初始化列表</strong>:其实就是那个:a(),b(){}这个部分.有四种情况:1常量2引用3基类缺少无参数构造函数4类套类需要传参的情况.5其他需要在类初始化之前就需要初始化的情况.</p><p>前加加:<code>A&amp; operator ++()&#123;&#125;</code>后加加<code>A&amp; operator ++(int)&#123;&#125;</code>区别在于一个int.<br>顺带提一嘴,所有的operator返回值参考:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="type">int</span> dat;</span><br><span class="line">a <span class="keyword">operator</span> +(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> -(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> *(a&amp; io);</span><br><span class="line">a <span class="keyword">operator</span> /(a&amp; io);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> =(a&amp; io);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> ++()&#123;</span><br><span class="line">dat++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">a&amp; <span class="keyword">operator</span> ++(<span class="type">int</span>)&#123;<span class="comment">//注意运算顺序</span></span><br><span class="line"><span class="function">a <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">++(*<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">a&amp; <span class="keyword">operator</span> --();</span><br><span class="line">a&amp; <span class="keyword">operator</span> --(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">a&amp; <span class="keyword">operator</span> +=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> -=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> *=(a&amp; io);</span><br><span class="line">a&amp; <span class="keyword">operator</span> /=(a&amp; io);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(a&amp; io);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> !=(a&amp; io);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原因:赋值运算的结果是左值,应当按引用返回.</p><p><strong>常见错误</strong>:</p><p>double转float是不安全的.</p><p>析构函数有参数</p><p>类A开头默认私有的</p><p>乱加const的</p><p>继承未完全覆盖虚函数的(不能实例化)</p><p>继承调用私有参数的(权限问题)</p><p>不写<code>using namespace std;</code>然后用标准库的</p><p>少隐式格式转换的</p><p>少构造函数的</p><h3 id="大题">大题</h3><p>看到一个写法是:<code>std::vector&lt;std::string&gt; f()&#123;return &#123;&quot;message1&quot;,&quot;message2&quot;&#125;;&#125;</code>维克托好像可以用大括号构造的.</p><h3 id="关键字">关键字</h3><p>overide:覆写虚函数时加上的,比个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:<span class="keyword">public</span> a&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;<span class="comment">//这三份代码实际跑起来没有差异,所以知道override是什么就行了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fuck</span><span class="params">()</span><span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fuck you!\nCyka blyat!&quot;</span>;</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">&#125;;</span><br><span class="line">b aa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">aa.<span class="built_in">fuck</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加强代码规范的,不写也罢.(为了拿更多分,请你写上)</p><p>namespace:名字空间.有的时候有好多函数都叫一个名字,就需要名字空间来进行区分.名字空间不应当被放在头文件里面.名字空间也可以嵌套.</p><p><code>dynamic_cast&lt;&gt;()</code>:类型的向上转换.比如父类派生好多子类,子类转父类是安全的,但是dynamic_cast&lt;儿子&gt;(父类变量)则是转换成儿子的.众所周知每个爹都不想当儿子,于是这种转换需要代价.</p><p>explicit:构造函数加一个这个可以禁止隐式格式转换.</p><p>完结.</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学物理B学习笔记</title>
      <link href="/2024/06/08/00001%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/08/00001%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>RT,这是大物的笔记.(草,劳改课还有一篇三千字的论文等着我…)</p><p>听说大物就是高中物理加点微积分的东西,我怎么这么不信啊…</p><p>考试范围是2-8章,别问为什么缺东西.</p><h1>第2章 机械振动</h1><h2 id="2-1-简谐振动">2.1 简谐振动</h2><p>胡克定律<br>$$F=-kx$$<br>设物体质量为m,牛二得<br>$$F=ma=m\frac{\mathrm d^2x}{\mathrm dt^2}$$<br>将上二式合并改写得<br>$$\frac{\mathrm d^2x}{\mathrm dt^2}=-\frac kmx=-\omega^2x$$<br>式子的解是<br>$$x=A\cos(\omega t+\varphi)$$<br>其中A和varphi都是积分常数.<br>式中<br>$$\omega^2=\frac km$$<br>$\omega$是一个系统自身性质决定的常量.拓展:任意满足下式的都可以被称为简谐运动(式子的意思是加速度与位移均匀变化)<br>$$\frac{\mathrm d^2y}{\mathrm dt^2}=-\omega^2y$$<br>任意时刻的速度和加速度,自己求导算.下面摆以下式子,别记,看看咋写的.<br>$$\begin{aligned}\upsilon&amp;=\frac{\mathrm dx}{\mathrm dt}=-\omega A\sin(\omega t+\varphi)\\ a&amp;=\frac{\mathrm d\upsilon}{\mathrm dt}=-\omega^2A\cos(\omega t+\varphi)\end{aligned}$$<br><strong>振幅</strong>:A.</p><p><strong>周期</strong>:T,单位s.(其中mk都是振子的自身物理属性,可见这些都是固有的)<br>$$T=\frac{2\pi}\omega=2\pi\sqrt{\frac mk}$$<br><strong>振动频率</strong>:$\nu$,单位Hz.<br>$$\nu=\frac\omega{2\pi}=\frac 1T=\frac1{2\pi}\sqrt\frac km$$<br><strong>圆频率</strong>:$2\pi$秒内震动次数,单位$\mathrm{rad\cdot s}^{-1}$.<br>$$\omega=2\pi\nu$$<br><strong>相位</strong>:$(\omega t+\varphi)$,又叫位相,又叫相.<br><strong>初相</strong>:$\varphi$.</p><p>求解初相啥的自己算吧…以后部分公式点到为止,不写长啥样,让你知道哦有这么个事就行,1记不住2能推导,写他干嘛?</p><p><strong>相位差</strong>:<br>$$\Delta\varphi=(\omega_2t+\varphi_2)-(\omega_1t+\varphi_1)$$<br>同频率简谐相位差公式略.<br>如果$\Delta\varphi=2k\pi$叫做同相<br>$\Delta\varphi=\pi+2k\pi$叫做反相.负的叫落后,正的叫领先,范围在$[-\pi,\pi]$.</p><p><strong>简谐运动能量</strong>:就是$E=\frac12kA^2$,平衡点在$\pm\frac{\sqrt2}2A$处,自己证.<br><strong>旋转矢量法</strong>:有一个点围着x逆时针转,投影点就是x,初始时和x轴夹角是$(\omega t+\varphi)$.</p><h3 id="简谐振动的合成">简谐振动的合成</h3><h4 id="同方向同频">同方向同频</h4><p>合振幅<br>$$A=\sqrt{A_1^2+A_2^2+2A_1A_2\cos(\varphi_2-\varphi_1)}$$<br>初相满足<br>$$\tan\varphi=\frac{A_1\sin\varphi_1+A_2\sin\varphi_2}{A_1\cos\varphi_1+A_2\cos\varphi_2}$$<br>$\varphi$角的象限可以通过振动的矢量图直接判定.</p><p><strong>同方向频率相近简谐振动合成</strong>:略,很复杂不让你算.<br><strong>2.3*振动的分解和频谱分析</strong><br><strong>2.4*阻尼振动 受迫振动 共振</strong><br>这俩都加星号,考试不考,不写.</p><h1>第3章 机械波</h1><p>机械波产生条件:<strong>波源和弹性介质</strong>.</p><p>声音是纵波,光是横波.</p><p><strong>波线,波面</strong>:表示波的传递方向,任意时刻振动相位相同的成为波面(波阵面,同相面),最前面的波面叫 <strong>波前</strong>.波线与波面垂直.球面波,正如字面意思.</p><p><strong>波长,周期,频率</strong>:$\lambda$,完整波的长度$T,\nu$.<br><strong>波速</strong>:用$u$表示.公式:<br>$$\lambda=uT$$<br>$$u=\lambda T=\nu\lambda$$<br><strong>波函数</strong>:以下公式表示:<br>$$y_0(t)=A\cos(\omega t+\varphi)$$<br>时间落后:<br>$$y=A\cos\Big[\omega\Big(t-\frac xu\Big)+\varphi\Big]$$<br><strong>波形方程</strong>:波在某点形成的曲线.</p><p><strong>波形向前推移</strong>:经过dt时间,出现在x+dx处,公式为<br>$$A\cos[\omega(t-\frac xu)+\varphi]=A\cos[\omega(t+\Delta t-\frac{x+\Delta x}u)+\varphi]$$<br><strong>行波</strong>:向前推移,走的波叫行波.</p><h3 id="波动方程">波动方程</h3><p>好神秘的样子,升一手三级标题.<br>无吸收的各向同性的三维空间的一切传播的波动过程均满足下式:<br>$$\frac{\partial^2\psi}{\partial x^2}+\frac{\partial^2\psi}{\partial y^2}+\frac{\partial^2\psi}{\partial z^2}=\frac 1{u^2}\frac{\partial^2\psi}{\partial t^2}$$<br>其中的$\psi$可以代表任何物理量.波函数啊啥的.</p><h3 id="波的能量-能流密度">波的能量 能流密度</h3><p><strong>能量密度</strong>:介质单位体积内的波动能量.<br>$$w=\frac{\mathrm dE}{\mathrm dV}=\rho A^2\omega^2\sin^2\omega(t-\frac xu)$$<br>这个是随时间变化的,平均能量密度是<br>$$\overline w=\frac 1T\int_0^T\rho A^2\omega^2\sin^2\omega(t-\frac xu)\mathrm dt=\frac 12\rho A^2\omega^2$$<br><strong>能流</strong>:单位时间内,通过介质某面积的能量.<br>$$P=\frac{\mathrm dE}{\mathrm dt}=wuS=\rho A^2\omega^2uS\sin^2\omega(t-\frac xu)$$<br><strong>平均能流</strong>:<br>$$\overline P=\overline wus=\frac 12\rho A^2\omega^2uS$$<br><strong>能流密度</strong>:单位时间内垂直于波线的单位面积平均能量.(也叫波强,单位$\mathrm{W\cdot m^{-2}}$)<br>$$I=\frac{\overline P}S=\frac 12\rho A^2\omega^2u=\overline wu$$<br>矢量式:<br>$$\overrightarrow I=\overline w\cdot\overrightarrow u=\frac 12\rho A^2\omega^2\overrightarrow u$$</p><p><strong>声波</strong>:20-20000Hz.声波的强度叫声强,声强级是比较声波强度的概念.单位B(贝尔),实际一般使用分贝(dB),$1B=10dB$.<br>以$10^{-12}\mathrm{W\cdot m^{-2}}$为基准声强.($I_0$)<br>$$L=\lg\frac I{I_0}(\mathrm B)=10\lg\frac I{I_0}(\mathrm{dB})$$<br><strong>波的衍射反射折射叠加,惠更斯原理</strong>:略(乐)</p><h3 id="波的干涉">波的干涉</h3><p>两个波方程在P点的干涉,合起来是<br>$$A=\sqrt{A_1^2+A_2^2+2A_1A_2\cos\Delta\varphi}$$<br>其中<br>$$\Delta\varphi=\varphi_1-\varphi_2-\frac{2\pi}\lambda(r_2-r_1)$$<br>式子可以理解为波函数先在P点的波形方程,然后两个波形方程叠加(回归上一章了)<br>初相$\varphi$满足<br>$$\tan\varphi=\frac{A_1\sin(\varphi_1-\frac{2\pi r_1}\lambda)+A_2\sin(\varphi_2-\frac{2\pi r_2}\lambda)}{A_1\cos(\varphi_1-\frac{2\pi r_1}\lambda)+A_2\cos(\varphi_2-\frac{2\pi r_2}\lambda)}$$<br>然后还是那句老话:2k pi振动加强,pi+2k pi振动减弱.<br>实际条件中两个相干波源可能是同一个震源驱动的,初相相同,干涉极值可以用波程差表示.<br>$$\delta=r_2-r_1=k\lambda\\ \delta=r_2-r_1=(2k+1)\frac\lambda2$$<br>干涉加强和干涉减弱的式子.整数波长加强,半数波长减弱.</p><h3 id="驻波">驻波</h3><p>干涉的一种特殊情况,合成的波并不向前传递,表现为某些点就是一直不动,然后这些点把绳子分开,像跳绳一样.</p><p><strong>波节</strong>:振动不动的点.<br><strong>波腹</strong>:有些点的振幅始终最大.</p><p>设两个波的初相都是0,波动方程为<br>$$y=A\cos2\pi(\frac tT-\frac x\lambda)$$<br>叠加一下,用个和差化积,得到<br>$$y=2A\cos2\pi\frac x\lambda\cos\frac{2\pi}Tt$$<br>所以波节满足振动位移是0,带入解出<br>$$x=\pm(2k+1)\frac\lambda4$$<br>同理波腹也能这么求出来:<br>$$x=\pm k\frac\lambda2$$<br>他俩之间有半个波长距离.</p><h3 id="半波损失">半波损失</h3><p>一般情况下,半波损失和波的种类,两种介质的性质和入射角大小都有关.但是波垂直入射时,半波损失由介质密度和波速乘积$\rho v$决定.这个数大的叫波密介质,这个小的叫波疏介质,波疏到波密有半波损失,反之没有,界面是驻波波腹.</p><h4 id="弦上驻波">弦上驻波</h4><p>由于两固定端必为波节,所以弦长是半波长的整数倍,有<br>$$L=n\frac\lambda2$$<br>所以频率能求出来是<br>$$\nu_n=n\frac u{2L}$$<br>所以满足条件才能形成驻波,分别是基频,一次谐频,二次谐频,三次谐频…(取决于n的取值)</p><h3 id="多普勒效应">多普勒效应</h3><p>其实就是速度变成$u+u_B$,别的都一样,换个参考系就完事了.</p><h1>第4章 静电场</h1><p>基本电荷量(油滴实验测的):<br>$$e=1.602176462\times10^{-19}\mathrm C$$<br>库仑力:<br>$$\overrightarrow F=k\frac{q_1q_2}{r^2}\overrightarrow e_r$$<br>其中r是矢量$\overrightarrow r$的大小,$\overrightarrow e$是方向矢量,k是一个常数,大小为<br>$$k=8.9880\times10^9\mathrm{N\cdot m^2\cdot C^{-2}}\approx9\times10^9\mathrm{N\cdot m^2\cdot C^{-2}}$$<br>为了简化公式,我们定义一个真空介电常量,或真空电容率即<br>$$\varepsilon_0=\frac1{4\pi k}=8.85\times10^{-12}\mathrm{C^2\cdot N^{-1}\cdot m^{-2}}$$<br>(所以有下式,为了和高中转换思路):<br>$$k=4\pi\varepsilon_0$$<br>公式改写为<br>$$\overrightarrow F=\frac{q_1q_2}{4\pi\varepsilon_0r^2}\overrightarrow e_r$$<br><strong>电场强度</strong>:<br>$$\overrightarrow E=\frac{\overrightarrow F}{q_0}$$<br>好几个电场那就矢量叠加,公式略.<br><strong>受力</strong>:<br>$$\overrightarrow F=q_0\overrightarrow E$$<br><strong>点电荷场强</strong>:<br>$$\overrightarrow E=\frac q{4\pi\varepsilon_0r^2}\overrightarrow e_r$$<br>(r的方向是产生电场的电荷直接指向试验电荷)<br>好几个点电荷:直接矢量相加.<br><strong>连续带电体的场强</strong>:(划分为好多个点电荷元$\mathrm dq$求电场元$\mathrm dE$)矢量积分<br>$$\overrightarrow E=\int\mathrm d\overrightarrow E=\frac 1{4\pi\varepsilon_0}\int\frac{\mathrm dq}{r^2}\overrightarrow e_r$$<br>可以分解为<br>$$E_x=\int\mathrm dE_x,E_y=\int\mathrm dE_y,E_z=\int\mathrm dE_z\\ E=\sqrt{E_x^2+E_y^2+E_z^2}$$</p><p><strong>电偶极子</strong>:相隔较近的两个等量异号的点电荷.<br><strong>电偶极矩</strong>:大小是单个极子的电量乘距离,方向负到正.即<br>$$\overrightarrow p=q\overrightarrow l$$</p><h3 id="静电场中的电介质-电位移矢量">静电场中的电介质 电位移矢量</h3><p>就是说,分子受电场作用自己也会一字排开,然后产生一个极化电荷的电场,然后抵消原来的电场.公式<br>$$\overrightarrow E=\frac{\overrightarrow E_0}{\varepsilon_r}$$<br>式中$\varepsilon_r$叫相对介电常数(没错,就是高中电容那里的东西),$\overrightarrow E_0$是原来的电场.真空的介电常数为1,空气近似1.<br>假如电场太过强力,会把分子拆开变成自由电荷(击穿),临界电场强度叫 <strong>介电强度</strong>.<br><strong>电介质的介电常数</strong>:<br>$$\varepsilon=\varepsilon_0\varepsilon_r$$<br>这个$\varepsilon$的作用是替换之前的$\varepsilon_0$,代表某介质中的 <strong>介电常数</strong> 使用,别的不变.</p><p><strong>电极化强度</strong>:电介质单位体积内电偶极矩的矢量和.<br>$$\overrightarrow P=\frac{\sum\overrightarrow p_{分子}}{\Delta V}$$<br>反映了介质内电极化的强弱和方向.<br>极化电荷与电极化强度之间的关系:设两平面的自由电荷面密度是$\sigma$和$-\sigma$,有<br>$$\sigma’=\frac{\varepsilon_r-1}{\varepsilon_r}\sigma$$<br>表示自由电荷密度$(\sigma)$和极化电荷密度$(\sigma’)$的关系.<br>利用$q=\sigma S$带入得<br>$$\overrightarrow P=\frac{\varepsilon_r-1}{\varepsilon_r}\sigma=\varepsilon_0(\varepsilon_r-1)E=\overrightarrow P=\varepsilon_0\chi_e\overrightarrow E$$<br>(定义$\chi_e=\varepsilon_r-1$表示电极化率).理论上是个常数,但是实际上极化介质需要时间,高频电场会让介电常数与外加电场频率有关.</p><p><strong>电位移矢量</strong>:定义如下<br>$$\overrightarrow D=\varepsilon_0\overrightarrow E+\overrightarrow P$$<br>单位$\mathrm{C\cdot m^{-2}}$.<br>平板电场的特例:(等于电荷面密度)<br>$$D=\sigma$$<br>仍然满足矢量叠加原理.<br>$$D=\frac{\mathrm d\varPhi_e}{\mathrm dS_\perp}$$<br><strong>这表明,电场中某点电位移矢量大小等于该点处电位移线的密度.</strong></p><p>这个时候要祭出一个牛逼的公式帮我们衔接高中:<br>$$\boxed{E=\frac D\varepsilon}$$</p><h3 id="静电场中的高斯定理">静电场中的高斯定理</h3><p><strong>电场线,电位移线</strong>:永不闭合(无旋性),切线方向垂直,永不相交.电位移线线和电场线一毛一样,只是量纲不太一样.</p><p><strong>电通量</strong>:用$\varPhi_e$表示.<br>$$\varPhi_e=\overrightarrow D\cdot\overrightarrow S$$<br>任意曲面:<br>$$\varPhi_e=\int_S\overrightarrow D\cdot\mathrm d\overrightarrow S$$<br>闭合曲面:<br>$$\varPhi_e=\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S$$<br><strong>高斯定理</strong>:空间内分布好多个点电荷,空间内做一个任意形状的闭合曲面(叫做高斯面),有的点电荷在面内有的在面外,通过该面的电通量只与面内的点电荷有关,等于其中的自由电荷量的代数和.表示为:<br>$$\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S=\sum_{(S内)}q_i$$</p><p><strong>直线的电荷线密度</strong>:$\lambda$.作用:<br>一段线的带电量<br>$$\sum q_i=\lambda l$$<br>很方便.</p><h3 id="几个结论">几个结论</h3><p><strong>球面的电场强度</strong><br>$$E=\begin{cases}\frac q{4\pi\varepsilon r^2}&amp;(r&gt;R)\\ 0&amp;(r&lt;R)\end{cases}$$<br><strong>球体的电场强度</strong>($\varepsilon_1$表示内部介电常数,2是外部的)<br>$$E=\begin{cases}\frac q{4\pi\varepsilon_2r^2}&amp;(r&gt;R)\\ \frac{qr}{4\pi\varepsilon_1R^3}&amp;(r&lt;R)\end{cases}$$</p><h4 id="柱对称的状况">柱对称的状况</h4><p>$$E=\frac\lambda{2\pi\varepsilon r}$$<br><strong>圆柱面的情况</strong>:同理,内部是0外部和上面公式一毛一样.</p><p><strong>圆柱体的状况</strong>:我逐渐理解&quot;电荷体密度&quot;是什么意思了…就是&quot;电荷 体密度&quot;和&quot;电荷 线密度&quot;,单位不一样,直接乘面积或者体积就是对应的电荷量…所以这个可以自己导了.</p><p><strong>无限大均匀带电平面的分布</strong>:<br>$$E=\frac{\sigma}{2\varepsilon}$$</p><h3 id="静电场的环路定理-电势">静电场的环路定理 电势</h3><p>任何做功与路径无关的电场叫做 <strong>保守场</strong>.静电场是保守场,静电力是保守力.</p><h2 id="电势">电势</h2><p>(高中整天谈的东西,升一手二级标题不过分吧)<br>$$U_A=\int^\infty\overrightarrow E\cdot\mathrm d\overrightarrow l$$<br>两点的电势差:<br>$$U_{ab}=U_a-U_b$$<br>又叫电压,符号福特.</p><p><strong>等势面</strong>:略,太熟悉了.</p><p><strong>电场强度和电势梯度</strong>:有<br>$$\overrightarrow E=-\nabla U$$<br>意思是某点电场强度就是电势梯度的负值.</p><p><strong>注意</strong>:1.场强方向是电势衰减最快的方向.<br>2.场强大小和变化率有关,与电势值并无直接关系.</p><p><strong>静电场中的导体</strong>:记住一个结论:越尖端积聚电荷量越大.<br><strong>静电屏蔽</strong>:网罩,尽量减少电场对精密器械的影响.<br><strong>接地</strong>:金属空腔内放一个电子会往外辐射电场,但是如果空腔接地那就不会有电场溢出.</p><h3 id="电容">电容</h3><p>公式<br>$$C=\frac qU$$<br>单位 法拉.<br>$$\mathrm{1F=1C/V,1F=10^6\mu F=10^{12}pF}$$<br><strong>求电容</strong>:</p><p><strong>平板容器</strong>:先求电场:<br>$$D=\sigma,E=\frac\sigma\varepsilon$$<br>两点间电势差<br>$$U_{AB}=Ed=\frac{qd}{\varepsilon S}$$<br>所以<br>$$C=\frac{\varepsilon S}d$$<br>有<br>$$\frac C{C_0}=\frac \varepsilon{\varepsilon_0}=\varepsilon_r$$<br>带r的那个是相对介电常数.</p><p><strong>圆柱形电容器的电容</strong>:<br>先求电场:<br>$$E=\frac \lambda{2\pi\varepsilon r}$$<br>然后求电势差<br>$$U_{AB}=\int^B_A\overrightarrow E\cdot\mathrm d\overrightarrow l=\int^{R_B}_ {R_A}\frac\lambda{2\pi\varepsilon r}\mathrm dr=\frac\lambda{2\pi\varepsilon}\ln\frac{R_B}{R_A}$$<br>故有<br>$$C=\frac{2\pi\varepsilon l}{\ln\frac{R_B}{R_A}}$$<br><strong>球形容器的电容</strong>:老规矩,先求电场.<br>$$E=\frac q{4\pi\varepsilon r^2}$$<br>然后求出来电势差<br>$$U_{AB}=\int^B_A\overrightarrow E\cdot\mathrm d\overrightarrow l=\int^{R_B}_ {R_A}\frac q{4\pi\varepsilon r^2}\mathrm dr=\frac q{4\pi\varepsilon}\Big(\frac 1{R_A}-\frac 1{R_B}\Big)$$<br>最后求出来电容:<br>$$C=\frac q{U_{AB}}=4\pi\varepsilon\frac{R_AR_B}{R_B-R_A}$$<br><strong>电容串联</strong>:<br>$$\frac 1C=\frac 1{C_1}+\frac 1{C_2}+…$$<br>也就是说更不容易击穿了,但是电容变小了.<br><strong>电容并联</strong>:<br>$$C=C_1+C_2+…$$<br>直接相加,电容变大,但是更容易被击穿,取决于能力最低的那个.</p><p><strong>电容能量</strong>:<br>$$W_e=\frac 12CU^2_{AB}=\frac 12U_{AB}Q$$<br><strong>电场能量</strong>:先引入电场能量密度的概念,用$w_e$表示:<br>$$w_e=\frac 12DE=\frac 12\varepsilon E^2=\frac 12\overrightarrow D\cdot\overrightarrow E$$<br>所以(V是电场空间所占体积)<br>$$W_e=\frac 12\varepsilon E^2V=\int w_e\mathrm dV$$</p><h1>第5章 稳恒磁场</h1><p>耶比,到磁场了…</p><h3 id="电流和电流密度">电流和电流密度</h3><p>电流的定义式<br>$$I=\frac{\mathrm dq}{\mathrm dt}$$<br>电流密度使用$\overrightarrow J$表示,公式为<br>$$\overrightarrow J=\frac{\mathrm dI}{\mathrm dS_\perp}=\rho_e\overrightarrow v$$<br>垂直电流线.其中$\rho_e$是平均电流密度,$\overrightarrow v$是该点电荷运动速度的平均值,称为迁移速度.<br>$$\overrightarrow J=ne\overrightarrow v$$<br>其中n是单位体积内载流子数目,e是载流子电荷量.如果有好几种电荷和不同的速度那就是他们的矢量和.</p><h3 id="稳恒电场-欧姆定律">稳恒电场 欧姆定律</h3><p>$$I=\frac UR$$<br>适用范围,金属导体,电解液.<br><strong>电导</strong>:单位S(西门子),欧姆倒数.<br>$$G=\frac1R$$<br>电阻率:<br>$$R=\rho\frac lS$$<br>不均匀时:<br>$$R=\int\frac{\rho\mathrm dl}S$$<br><strong>电导率</strong>:<br>$$\sigma=\frac1\rho$$<br>电阻率和温度之间有以下关系:<br>$$\rho=\rho_0(1+\alpha t)$$<br>其中$\alpha$叫做电阻温度系数.</p><p><strong>魔改欧姆定律</strong>:<br>$$\overrightarrow J=\sigma\overrightarrow E$$<br>其中$\overrightarrow E$是电场强度.对非稳恒情况也适用,具有更大的普遍性.</p><p><strong>电动势</strong><br>$$\overrightarrow E_k=\frac{\overrightarrow F_k}q$$<br>叫做 <strong>非静电场强</strong>,他的作用使得正极积聚正电荷,负极积聚负电荷,形成电流.<br>$$\varepsilon=\frac Aq=\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l$$<br>式中$\varepsilon$叫做电动势,单位是伏特.</p><h3 id="磁场">磁场</h3><p><strong>磁感应强度</strong>:(最大力的时候是电子垂直磁场运动(废话))<br>$$B=\frac{F_{\max}}{qv}$$<br>单位特斯拉(T).<br><strong>电流元产生磁场</strong>:设电流元为$I\mathrm d\overrightarrow l$,方向与电流相同,于是有<br>$$\mathrm d\overrightarrow B=k\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}$$<br>k为比例系数,大小和上式单位有关.如果国际单位制就是:<br>$$\mathrm d\overrightarrow B=\frac{\mu_0}{4\pi}\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}$$<br>积分形式是<br>$$\overrightarrow B=\int_L\mathrm d\overrightarrow B=\int_L\frac{\mu_0}{4\pi}\frac{I\mathrm d\overrightarrow l\times\overrightarrow r}{r^3}$$<br>其中$\mu_0=4\pi\times10^{-7}\mathrm{T\cdot m\cdot A^{-1}}$叫做真空的磁导率.</p><p><strong>运动电荷的磁场</strong>:<br>$$\overrightarrow B_1=\frac{\mathrm d\overrightarrow B}N=\frac{\mu_0}{4\pi}\frac{q\overrightarrow v\times\overrightarrow r}{r^3}$$</p><h3 id="上面俩定律的应用">上面俩定律的应用</h3><p>求磁场呗…说什么废话.</p><p><strong>无限长直导线在某点产生的磁场</strong>(a是距离):<br>$$B=\frac{\mu_0I}{2\pi a}$$<br><strong>环形导线的磁场</strong>(中心线上):<br>$$B=\frac{\mu_0}2\frac{R^2I}{(R^2+x^2)^{\frac32}}$$<br><strong>直螺线管的磁场</strong>:(这个细讲讲,会导式子就行)<br>因为螺线管很密,所以每个电流元可以取$n\mathrm dl$,这条段上线圈在P点产生的磁感应强度就是<br>$$\mathrm dB=\frac{\mu_0}{2}\frac{R^2In\mathrm dl}{(R^2+l^2)^\frac32}$$<br>考虑对B求积分,引入变量$\beta$表示矢径之间的夹角,看图发现$l=Rc\tan\beta,\mathrm dl=-R\csc^2\beta\mathrm d\beta$,利用$R^2+l^2=R^2\csc^2\beta$得<br>$$B=\int-\frac{\mu_0}2nI\sin\beta\mathrm d\beta$$<br>$\beta$的上界和下限分别为$\beta_1,\beta_2$,带入得<br>$$B=\frac{\mu_0}2nI(\cos\beta_2-\cos\beta_1)$$<br>方向沿轴线向右.无限长:<br>$$B=\mu_0nI$$<br>对于长直螺线管,边缘的大小是二分之中间的大小.</p><p><strong>磁感线</strong>:几个性质</p><ol><li>任意两条磁感线不会相交.(因为任意一点方向是唯一确定的)</li><li>磁感线是无头无尾的闭合曲线.</li><li>磁场较强的地方磁感线比较密集.</li></ol><p><strong>磁通量 磁场中的高斯定理</strong>:<br>单位Wb(韦伯).<br>$$\varPhi_m=\int_S\overrightarrow B\cdot\mathrm d\overrightarrow S$$<br>高斯定理:对于任意闭合曲面的总磁通量为0(这回就很鸡肋了,只表明了磁场是无源场).<br>$$\oint_SB\cos\theta\mathrm dS=\oint_S\overrightarrow B\cdot\mathrm d\overrightarrow S=0$$</p><h3 id="磁介质-磁化强度">磁介质,磁化强度</h3><p>略,加星了不讲.</p><p>$$\overrightarrow H=\frac{\overrightarrow B}\mu$$<br>$\mu$被称为介质的磁导率,有$\mu=\mu_0\mu_r$,H是新引入的概念,表示磁场强度.</p><p>哈哈,略个几把,后面要用到前面的概念你给我说不讲我去?</p><h3 id="安培环路定律">安培环路定律</h3><p>环流:(记住得顺着磁场线)<br>$$\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=\oint_LH\mathrm dl=\frac{I}{2\pi r}\oint\mathrm dl=\frac I{2\pi r}\cdot2\pi r=I$$<br>上式表明积分和只与传导电流有关.反向积分结果是负的.<br><strong>多个导线</strong>:<br>$$\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=\oint_LH\cos\theta\mathrm dl=\sum I_i$$<br>上式被称为安培环路定律.</p><h3 id="磁场对载流导线的作用">磁场对载流导线的作用</h3><p><strong>安培力公式</strong>:<br>$$\overrightarrow F=\int_LI\mathrm d\overrightarrow l\times\overrightarrow B$$<br><strong>洛伦兹力</strong>:<br>$$F_{\max}=qvB$$<br>$$\overrightarrow F=q\overrightarrow v\times\overrightarrow B$$<br>洛伦兹力公式.(左力右电的口诀仍记心间…)</p><p><strong>转圈圈~</strong><br>$$R=\frac{mv_0}{qB}$$<br>$$T=\frac{2\pi R}{v_0}=\frac{2\pi m}{qB}$$<br>螺距:转一圈差多少距离(螺旋升天的时候)(这里把速度分解了,升天的速度是$v_0\cos\theta$)<br>$$h=\frac{2\pi mv_0\cos\theta}{qB}$$<br><strong>霍尔效应</strong>:额,吃老底吧,没啥好说的.</p><h1>第6章 电磁场理论基础</h1><p><strong>电磁感应</strong>:<br><strong>感生电动势</strong>:<br>$$\varepsilon=-\frac{\mathrm d\varPhi}{\mathrm dt}$$<br><strong>电荷</strong>:<br>$$q=\int_{\Delta\varPhi}-\frac1R\mathrm d\varPhi$$<br><strong>楞次定律</strong>:阻碍.</p><h3 id="感生和动生电动势">感生和动生电动势</h3><h4 id="动生电势">动生电势</h4><p>$$\varepsilon=\int_a^b(\overrightarrow v\times\overrightarrow B)\cdot\mathrm d\overrightarrow l$$<br>三者垂直有<br>$$\varepsilon=Bvl$$<br>(上面的是正常的导体棒移动的电动势)<br>$$\mathrm d\varepsilon=Bv\mathrm dr=B\omega r\mathrm dr$$<br>$$\varepsilon=\int\mathrm d\varepsilon=\int_0^1B\omega r\mathrm dr=\frac 12B\omega l^2$$<br>导体棒旋转产生的电动势.</p><h4 id="感生电势">感生电势</h4><p>$$\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l=-\frac{\mathrm d}{\mathrm dt}\int_S\overrightarrow B\cdot\mathrm d\overrightarrow S$$<br>$$\oint_L\overrightarrow E_k\cdot\mathrm d\overrightarrow l=-\int_S\frac{\partial\overrightarrow B}{\partial t}\cdot\mathrm d\overrightarrow S$$<br>两个式子(害,无非就是磁通量变化)</p><p><strong>涡流和趋肤效应</strong>:涡流不解释,趋肤效应是导线在高频交流电作用下电流会主要趋近导线表面,所以常常用多股导线代替一根长直导线,而且可以利用涡流导致的趋肤效应淬火,表面快速升温淬火变硬,但是内部还是维持原先的韧性.</p><h3 id="自感">自感</h3><p>有一种预感,自感会很恐怖…<br>$$\varPhi=LI$$<br>L是自感系数,单位亨利(H)<br>$$\varepsilon_L=-L\frac{\mathrm dI}{\mathrm dt}$$<br>$$\varepsilon_L=-\frac{\mathrm d\varPhi}{\mathrm dt}=-(L\frac{\mathrm dI}{\mathrm dt}+I\frac{\mathrm dL}{\mathrm dt})$$<br>感生电动势阻碍.</p><p><strong>自感电路中的衰减和增长过程</strong>:弛豫时间$t=\tau=L/R$<br>然后自己求积分算.</p><h3 id="磁场的能量">磁场的能量</h3><p>自感线圈存储的能量:(其实就是螺线管)<br>$$W_m=\frac12LI^2$$<br><strong>磁场能量密度</strong>:<br>$$w_m=\frac{B^2}{2\mu}=\frac12BH=\frac12\mu H^2$$<br>推广:<br>$$W_m=\int_V\mathrm dW_m=\int_Vw_m\mathrm dV=\int_V\frac{B^2}{2\mu}\mathrm dV$$</p><hr><p><strong>题外话</strong>:电缆长为l,半径r,体积设为<br>$$\mathrm dV=2\pi r\mathrm dr$$<br>体会一下,好像是对面积公式求导然后在积分的时候把同轴电缆的两个参数带进去,不需要无脑求体积.</p><h3 id="位移电流">位移电流</h3><p><strong>非恒定电流的磁场中,安培环路定律不再适用.</strong>(因为非恒定状况下,电流不连续)</p><p>麦克斯韦说,能等效一个电流出来,叫&quot;位移电流&quot;,能够让变化电场的高斯定理仍然成立.<br>$$\oint_S\overrightarrow D\cdot\mathrm d\overrightarrow S=q$$<br>然后先对时间求导,有<br>$$\oint_S\frac{\partial\overrightarrow D}{\partial t}\cdot\mathrm d\overrightarrow S=\frac{\mathrm dq}{\mathrm dt}$$<br>带入方程可得<br>$$\oint_S(\overrightarrow j+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S=0$$<br>这个&quot;勾&quot;就是 <strong>位移电流</strong>,满足<br>$$\overrightarrow j_d=\frac{\partial\overrightarrow D}{\partial t}$$<br>所以<br>$$I_d=\int_S\overrightarrow j_d\cdot\mathrm d\overrightarrow S$$<br><strong>全电流</strong>:传导电流和位移电流的总和.是连续的.有<br>$$\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow L=I_全=I+I_d=\int_S(\overrightarrow j+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S$$<br>叫做全电流定律.</p><h3 id="麦克斯韦方程组">麦克斯韦方程组</h3><p>静电场和稳恒磁场的基本方程.<br>$$\oint\overrightarrow D\cdot\mathrm d\overrightarrow S=q\\ <br>\oint\overrightarrow E\cdot\mathrm d\overrightarrow l=-\frac{\mathrm d\varPhi}{\mathrm dt}=-\int_S\frac{\partial\overrightarrow B}{\partial t}\cdot\mathrm d\overrightarrow S\\ <br>\oint_S\overrightarrow B\cdot\mathrm d\overrightarrow S=0\\ <br>\oint_L\overrightarrow H\cdot\mathrm d\overrightarrow l=I+I_d=\int_S(\overrightarrow J+\frac{\partial\overrightarrow D}{\partial t})\cdot\mathrm d\overrightarrow S<br>$$<br>很牛逼,但是不教怎么用.(估计就是看看牛逼得了)</p><h3 id="电磁波">电磁波</h3><p>传播速率:(下面的c是光速)<br>$$u=\frac 1{\sqrt{\mu\varepsilon}}\\ c=\frac 1{\sqrt{\mu_0\varepsilon_0}}$$<br>电磁波的波函数:<br>$$E=E_0\cos\omega(t-\frac zu)$$<br>$$H=H_0\cos\omega(t-\frac zu)$$<br>任何时刻,$\overrightarrow E,\overrightarrow H$和波的传播方向都构成一对右旋的直角坐标系.<br><img src="https://pic4.zhimg.com/v2-df0659a8e768790ecb729e2d587e5afd_r.jpg?source=1940ef5c" alt="图炸了"></p><p>而且$\overrightarrow E\times\overrightarrow H$总是沿着波的方向.(所以光是横波)</p><p><strong>任意时刻有</strong>:<br>$$\sqrt\mu H=\sqrt\varepsilon E$$<br>E和H分别在各自的平面上传播,体现了光的偏振性.</p><p><strong>电磁波的能量</strong>:<br>$$S=\frac 12u(\varepsilon E^2+\mu H^2)=EH$$<br>把光速带进去自己算结论式子.同理,矢量式是他俩叉乘.<br><strong>平面电磁波的强度表示式</strong>:<br>$$I=\frac12E_0H_0$$<br>剩下的自己推.</p><p><strong>电磁波谱</strong>:从能量低到高分别是:<br>无线电波,红外线,可见光,紫外线,X射线,$\gamma$射线</p><h1>第7章 光的干涉</h1><p>由于生理上引起感光作用的是$\overrightarrow E$而不是$\overrightarrow H$,所以把E叫做光矢量.</p><p>叠加时,各点光强为<br>$$I=I_1+I_2+2\sqrt{I_1I_2}\cos\Delta\varphi$$<br>相位差<br>$$\Delta\varphi=(\varphi_1-\varphi_2)-\frac{2\pi}{\lambda}(r_1-r_2)$$<br>表明,叠加光强具有偶数k pi时干涉极大,奇数k pi时干涉极小.</p><p><strong>光程差</strong>:光在折射率n的介质中传播的几何路程为r,相当于在真空中传播$L=nr$,叫做光程.</p><p>相位差:<br>$$\Delta\varphi=\varphi_2-\varphi_1-2\pi\frac{n_2r_2-n_1r_1}\lambda$$<br>光程差就是二者相减:<br>$$\delta=n_2r_2-n_1r_1$$</p><p>所以暗纹判定可能会很好用:(phi用2k pi判定)<br>$$\delta=\begin{cases}\pm k\lambda&amp;亮\\ \pm(2k+1)\frac\lambda2&amp;暗\end{cases}$$<br>一个结论:透镜虽然会引起光传播路径的差异,但是不会产生光程差的变化.</p><h3 id="获得相干光的办法">获得相干光的办法</h3><p><strong>分波面法</strong>:平行光先透过一个单缝然后分成一束光衍射,然后后面放一个双缝.</p><p><strong>分振幅法</strong>:一块玻璃,然后一束光打在上面会发生反射和折射,反射的光直接出去了,折射的打到玻璃底部再反射出去,可以获得两束相干光</p><p><strong>附加条件</strong>:1两束光不可振幅相差太大,否则看不出来.2光程差不可太大,不然一束光道路另一束还没到,会很难评.</p><h3 id="分波阵面干涉">分波阵面干涉</h3><p><strong>杨氏干涉</strong>(高中实验)<br>$$x=\pm k\frac Da\lambda$$<br>这是明条纹的位置,k是整数,a是两光源之间的距离,D是筒的长度.<br>$$x=\pm(2k+1)\frac{D\lambda}{2a}$$<br><strong>劳埃镜实验</strong>:<br>一束光源和一个镜子,镜子用来反射光模拟一个虚拟的相干光源,剩下的不用多说了,1能看干涉条纹,2能观测到反射光的相位发生了跃变.</p><h3 id="分振幅干涉">分振幅干涉</h3><p>(有点看懵逼了,感觉需要考场自己写自己导式子,这里先挖个坑)</p><p><strong>薄膜干涉</strong>:</p><p><img src="https://img.mianfeiwendang.com/pic/d7173276b7690f6b4392b677/1-810-jpg_6-1080-0-0-1080.jpg" alt="你是一个一个一个炸掉的图啊啊啊啊"></p><p>所以两束光,一个过薄膜一个没有,中间会有固定的光程差,满足相干光的条件.<br>$$\delta=2e\sqrt{n_2^2-n_1^2\sin^2i}+\frac\lambda2=\begin{cases}k\lambda&amp;亮啊,很亮啊\\ (2k+1)\frac\lambda2&amp;黑的\end{cases}$$<br>式子最后加的半个波长是半波损失,发生在光从1表面反射到透镜的过程(e是薄膜的厚度,i是入射角,n1是空气折射率,n2是薄膜折射率).</p><p>可以发现,在一个薄膜干涉系统中,光程差最后取决于入射角.不同倾角的入射光最后都会形成不同的干涉条纹,叫做 <strong>等倾干涉</strong>.条纹是内疏外密的明暗相间圆环.</p><p>但是可以看到,有一部分光直接透射出去了,这两束透射光也是可以进行干涉的,光程差是<br>$$\delta=2e\sqrt{n_2^2-n_1^2\sin^2i}$$<br>这里是没有半波损失的,所以发现反射光干涉强了透射光干涉就会减弱,这是符合能量守恒定律的.</p><p><strong>劈尖干涉</strong>:其实就是 <strong>等厚干涉</strong>.凡厚度相同的地方都会是同一条干涉条纹.</p><p>实验:两个玻璃片边上垫一层纸(劈尖角一般都很小),然后用光垂直入射,会让直接反射和透射玻璃被劈尖反射的光发生干涉.<br>$$\delta=2n_2e+\frac\lambda2$$<br>老规矩,k入是加强,n2是两个劈尖中间的介质e是劈尖厚度,全程和玻璃板没任何关系,甚至换成空气劈尖都没问题.<br>$$l=\frac\lambda{2n_2\theta}$$<br>表示两个干涉条纹之间的距离</p><p><strong>牛顿环</strong>:也是一种等厚干涉.光程差:<br>$$\delta=2e+\frac\lambda2$$<br>光程差和半波损失,还是k入明环否则暗环.<br>$$e_k=\frac{r_k^2}{2R}$$<br>其中R是透镜曲率半径.e是对应的空气柱的厚度,也就是<br>$$r_k^2=2Re_k-e_k^2$$<br>所以明环:<br>$$r_k=\sqrt{(k-\frac12)R\lambda}$$<br>暗环:<br>$$r_k=\sqrt{kR\lambda}$$</p><h1>第8章 光的衍射</h1><p>这一章开始就看不懂了…光的波动函数还需要好好看看才能解析这部分的内容…</p><p>只有很小的时候,狭缝甚至和光的波长相比拟的时候衍射现象才明显.</p><p>先分开:当光源和接收屏或二者之一距离有限时叫菲涅尔衍射,或者叫近场衍射,都无限的时候(入射光和衍射光都是平行光的时候)叫夫琅禾费衍射,或远场衍射.</p><p><strong>因为夫琅禾费衍射在实际应用中十分重要,而且数学处理比菲涅尔衍射要简单,所以本章只讨论夫琅禾费衍射(老师人真好,%%%).</strong></p><h2 id="菲涅尔衍射">菲涅尔衍射</h2><p><strong>惠更斯原理</strong>:介质中传播到的各点,都可以看成是发射子波的波源,其后的任一时刻,子波的包迹就是新的波阵面.</p><p>略,太tm复杂了.Flu看不懂,在这里赌一手不考这逼玩意.</p><h2 id="夫琅禾费衍射">夫琅禾费衍射</h2><p>(这里只考虑 <strong>单缝衍射</strong> 的状况)远场衍射,使用两个凸透镜用来聚光.结构长这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">光-&gt;()|()-&gt;   |</span><br></pre></td></tr></table></figure><p>|上有一条小狭缝,假设太小了你看不到(我是不会说我没找到开了一个洞的符号的)()表示凸透镜(有俩)</p><p><strong>俩透镜作用</strong>:第一个是点光源,透镜会把发散的光变成平行光,然后通过狭缝.第二个透镜的目的是汇聚,把平行光衍射的一个方向的光汇聚在一起,然后打在屏幕上会发生干涉.</p><p>入射方向:$\varphi$</p><p>不同角度入射的光会有不同程度的光程差,最中间的叫中央明纹,是最大的干涉纹(都加强).否则会有光程差,最大的光程差是最上面的光和最下面的光,事实上决定一个条纹是亮还是暗就取决于这个.<br>$$\delta=BC=a\sin\varphi$$<br>(这个是光程差)</p><p>式子里面的BC是一个方向到透镜的夹角的一个小路程:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*|  /    /</span><br><span class="line"> | /    /</span><br><span class="line">A|/    /</span><br><span class="line"> |\   /</span><br><span class="line"> |  \/<span class="built_in">C</span>(假设BC垂直AC)</span><br><span class="line"> |  /</span><br><span class="line"> | /</span><br><span class="line">B|/</span><br></pre></td></tr></table></figure><p>然后就有最后的公式<br>$$\delta=a\sin\varphi=\begin{cases}0&amp;中央明纹\\ \pm2k\frac\lambda2&amp;暗纹\\ \pm(2k+1)\frac\lambda2&amp;明纹\end{cases}$$</p><h3 id="特别注意">特别注意</h3><p>只有这里是2k入是暗纹,原因是偶数个波长差时AB可以被分成偶数个半波带,然后彼此抵消,就是暗纹的结果了.注意只有这里是特殊的,千万不要记混.</p><h3 id="单缝衍射条纹特点">单缝衍射条纹特点</h3><p>x是条纹和中心O的距离,f是透镜焦距,a是狭缝宽,有<br>$$x=\begin{cases}\pm2k\frac{f\lambda}{2a}&amp;暗\\ \pm(2k+1)\frac{f\lambda}{2a}&amp;明\end{cases}$$<br>注意k从1开始取.</p><p>小结论:中央明条纹宽度是正常条纹宽度的2倍,而且衍射条纹是均匀不变的.(条纹距离可以用两个相邻另一种条纹相减算)</p><h2 id="光栅衍射">光栅衍射</h2><p>光栅就是一个一个小格凑一起的,分为 <strong>反射光栅</strong> 和 <strong>透射光栅</strong>.</p><p>透光的宽度是a,不透光的宽度是b,凑一起就是 <strong>光栅常数</strong>(a+b),一般数量级都在$\mathrm{10^{-5}-10^{-6}m}$的数量级.</p><h3 id="光栅方程">光栅方程</h3><p><strong>主极大</strong>:满足方程的条纹叫主极大.<br>$$(a+b)\sin\varphi=\pm2k\pi,k=0,1,2,…$$<br><strong>极小(暗纹)</strong>:<br>$$(a+b)\sin\varphi=\pm\frac{k’}N\lambda$$<br><strong>次极大</strong>:既满足主极大式子又满足单缝衍射暗条纹条件$a\sin\varphi=k’\lambda$证明第k大条纹不再出现,称为光栅缺级现象.</p><p>所以有缺级的级数是<br>$$k=\frac{a+b}ak’$$</p><h3 id="光栅光谱">光栅光谱</h3><p>第几级就是k=几,直接带进去算.</p><p><strong>色散本领</strong>:<br>$$D_l=\frac{kf}{(a+b)\cos\theta}$$</p><p>完结!喜( )个锤子,真$\mathbf{tm}$长</p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/17/00000hello-world/"/>
      <url>/2024/05/17/00000hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>人话:Hexo常见指令看这里</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> OTH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OTH </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
